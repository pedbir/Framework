/*
Deployment script for DevelopmentFrameworkConfig

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DevelopmentFrameworkConfig"
:setvar DefaultFilePrefix "DevelopmentFrameworkConfig"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
PRINT N'Altering [Metadata].[CreateFlatFileEntity]...';


GO
ALTER PROC Metadata.CreateFlatFileEntity
    @SourceFileRootFolder VARCHAR(128)
    , @SourceSchemaName VARCHAR(128)
    , @SourceTableName VARCHAR(128)
    , @FilePattern VARCHAR(128)
    , @ColumnNamesInFirstDataRow BIT
    , @HeaderRowsToSkip SMALLINT
    , @DataRowsToSkip SMALLINT
    , @FlatFileType VARCHAR(20)
    , @HeaderRowDelimiter VARCHAR(128)
    , @RowDelimiter VARCHAR(128)
    , @ColumnDelimiter VARCHAR(128)
    , @TextQualifer VARCHAR(5)
    , @IsUnicode BIT
    , @CodePage VARCHAR(128)
    , @FileNameRegExDateTime NVARCHAR(100) = '(\d{4})-(\d{2})-(\d{2}) (\d{2})_(\d{2})_(\d{2})'
    , @FileNameDateTimePattern NVARCHAR(100) = 'yyyy-MM-dd hh_mm_ss'
    , @DestinationDatabaseName VARCHAR(50) = 'DWH_1_Raw'
    , @LinkedServerName VARCHAR(50) = 'localhost'
    , @SourceMetadataDatabaseName VARCHAR(50) = 'Test'
    , @Locale VARCHAR(50) = 'Lcid1033'  -- Lcid1053 Swedish
AS
	/*
	EXEC Metadata.CreateFlatFileEntity                                            
        		@SourceFileRootFolder			=	'C:/DW/se_credit_deposits/'                                          
        		,@SourceSchemaName				=	'Deposit_RawTyped'                                                            
        		,@SourceTableName				=	'rt_SeCreditDeposit_01'                                                 
        		,@FilePattern					=	'*Bluestep Inlåning - Databasereport Daily*.csv'                      
        		,@ColumnNamesInFirstDataRow		=	1                                                                    
        		,@HeaderRowsToSkip				=	4                                                                    
        		,@DataRowsToSkip				=	0                                                                    
        		,@FlatFileType					=	'Delimited'                                                          
        		,@HeaderRowDelimiter			=	'{CR}{LF}'                                                           
        		,@RowDelimiter					=	'{CR}{LF}'                                                           
        		,@ColumnDelimiter				=	','                                                                  
        		,@TextQualifer					=	'\'                                                                 
        		,@IsUnicode						=	0                                                                    
        		,@CodePage						=	'1252'                                                               
        		,@DestinationDatabaseName		=	'DWH_1_Raw'                                                          
        		,@SourceMetadataDatabaseName	=	'DWH_1_Raw'                                                               
        		,@Locale	                    =	'Lcid1033'                                                           
        		,@FileNameRegExDateTime         =	'(\d{4})-(\d{2})-(\d{2}) (\d{2})_(\d{2})_(\d{2})'              
        		,@FileNameDateTimePattern	    =	'yyyy-MM-dd hh_mm_ss'                                                
        		,@LinkedServerName				=	'localhost'        
	Locale
	https://www.varigence.com/Documentation/Api/Enum/Language
	*/

SET NOCOUNT ON;

BEGIN TRANSACTION;
BEGIN TRY


	DECLARE @ExecProcAnnotation NVARCHAR(MAX) = 'EXEC Metadata.CreateFlatFileEntity 
		@SourceFileRootFolder			=	'''+CAST(@SourceFileRootFolder			as nvarchar(50)) +'''  
		,@SourceSchemaName				=	'''+CAST(@SourceSchemaName				as nvarchar(50)) +'''  
		,@SourceTableName				=	'''+CAST(@SourceTableName				as nvarchar(50)) +'''  
		,@FilePattern					=	'''+CAST(@FilePattern					as nvarchar(50)) +'''  
		,@ColumnNamesInFirstDataRow		=	  '+CAST(@ColumnNamesInFirstDataRow		as nvarchar(50)) +'	   
		,@HeaderRowsToSkip				=	  '+CAST(@HeaderRowsToSkip				as nvarchar(50)) +'	   
		,@DataRowsToSkip				=	  '+CAST(@DataRowsToSkip				as nvarchar(50)) +'	   
		,@FlatFileType					=	'''+CAST(@FlatFileType					as nvarchar(50)) +'''  
		,@HeaderRowDelimiter			=	'''+CAST(@HeaderRowDelimiter			as nvarchar(50)) +'''  
		,@RowDelimiter					=	'''+CAST(@RowDelimiter					as nvarchar(50)) +'''  
		,@ColumnDelimiter				=	'''+CAST(@ColumnDelimiter				as nvarchar(50)) +'''  
		,@TextQualifer					=	'''+CAST(@TextQualifer					as nvarchar(50)) +'''  
		,@IsUnicode						=	  '+CAST(@IsUnicode						as nvarchar(50)) +'	   
		,@CodePage						=	'''+CAST(@CodePage						as nvarchar(50)) +'''  
		,@DestinationDatabaseName		=	'''+CAST(@DestinationDatabaseName		as nvarchar(50)) +'''  
		,@LinkedServerName				=	'''+CAST(@LinkedServerName				as nvarchar(50)) +'''  
		,@SourceMetadataDatabaseName	=	'''+CAST(@SourceMetadataDatabaseName	as nvarchar(50)) +'''  
		,@Locale						=	'''+CAST(@Locale						as nvarchar(50)) +'''  
		,@FileNameRegExDateTime			=	'''+CAST(@FileNameRegExDateTime			as nvarchar(50)) +'''  
		,@FileNameDateTimePattern		=	'''+CAST(@FileNameDateTimePattern		as nvarchar(50)) +'''  

	'	
	PRINT '-----------------------------------------' + CHAR(13) + '--Run Proc' + CHAR(13) + '-----------------------------------------' 
	PRINT @ExecProcAnnotation

	SELECT @SourceFileRootFolder = REPLACE(@SourceFileRootFolder, '/', '\') + IIF(RIGHT(REPLACE(@SourceFileRootFolder, '/', '\'), 1) = '\', '', '\' )

	DECLARE @DestinationTableName VARCHAR(250) = 'rt_' + REPLACE(@SourceTableName, 'rt_', '')
		,	@DestinationSchemaName VARCHAR(250) = REPLACE(@SourceSchemaName, '_RawTyped', '') + '_RawTyped'
		,   @SourceSchemaNameWitoutSuffix VARCHAR(250)= REPLACE(@SourceSchemaName, '_RawTyped', '')
		,   @SourceTableNameWithoutPrefix VARCHAR(250)=  REPLACE(@SourceTableName, 'rt_', '')
		,	@SQLString VARCHAR(MAX)

	DECLARE @DestinationTableFullNameWithBrackets VARCHAR(250) = QUOTENAME(@DestinationSchemaName) + '.' + QUOTENAME(@DestinationTableName)
		,	@DestinationViewFullNameWithBrackets VARCHAR(250) = QUOTENAME(@DestinationSchemaName) + '.' + QUOTENAME('v' + @DestinationTableName)

	-- Create metadata temp table for generating create table script
	SELECT * INTO #SourceMetadata FROM INFORMATION_SCHEMA.COLUMNS c WHERE 1=0
	SET @SQLString ='EXECUTE '+@LinkedServerName+'.'+@SourceMetadataDatabaseName+'.dbo.sp_executesql N''SELECT * FROM INFORMATION_SCHEMA.Columns WHERE COLUMN_NAME NOT LIKE ''''sys%'''' AND TABLE_SCHEMA = '''''+@SourceSchemaName+''''''+'AND TABLE_NAME = '''''+@SourceTableName+''''''+'''';	
	PRINT CHAR(13) + '-----------------------------------------' + CHAR(13) + '-- Create #SourceMetadata table' + CHAR(13) + '-----------------------------------------' 
	PRINT @SQLString 
	INSERT INTO #SourceMetadata EXECUTE (@SQLString);
	ALTER TABLE #SourceMetadata DROP COLUMN TABLE_CATALOG
	ALTER TABLE #SourceMetadata DROP COLUMN TABLE_SCHEMA
	ALTER TABLE #SourceMetadata DROP COLUMN TABLE_NAME
	SELECT * INTO #CreateTableMetadata FROM #SourceMetadata sm
	
	-- Create #index_columns table
	CREATE TABLE #index_columns(object_id int,index_id int, is_descending_key bit, is_included_column bit ,Columnname sysname NULL)  

	DECLARE @CreateIndexSQL NVARCHAR(max)=  
	'SELECT	ic.object_id
					,ic.index_id
					,ic.is_descending_key
					,ic.is_included_column
					,Columnname = c.name
	FROM	sys.index_columns ic WITH (NOWAIT)
	INNER JOIN sys.columns c WITH (NOWAIT) ON ic.object_id			= c.object_id AND ic.column_id = c.column_id
	INNER JOIN sys.key_constraints k WITH (NOWAIT) ON ic.object_id			= k.parent_object_id AND ic.index_id = k.unique_index_id
	WHERE ic.object_id = (
	SELECT	TOP 1 o.object_id
	FROM	sys.objects o WITH (NOWAIT)
	JOIN sys.schemas s WITH (NOWAIT) ON o.schema_id = s.schema_id
	WHERE s.name  = '''''+@SourceSchemaName+'''''
				AND o.name = '''''+@DestinationTableName+'''''
				AND o.type = ''''U''''
				AND o.is_ms_shipped = 0
				)
	AND c.name NOT LIKE ''''Sys%'''''
	SET @SQLString ='EXECUTE '+@LinkedServerName+'.'+@SourceMetadataDatabaseName+'.dbo.sp_executesql N'''+@CreateIndexSQL+'''';
	PRINT CHAR(13) + '-----------------------------------------' + CHAR(13) + '-- Create #index_columns table' + CHAR(13) + '-----------------------------------------' 
	PRINT @SQLString 

	INSERT INTO #index_columns EXECUTE (@SQLString);
	INSERT INTO #index_columns SELECT TOP 1 ic.object_id,ic.index_id, 1 AS is_descending_key,ic.is_included_column ,'SysSrcGenerationDateTime' AS Columnname FROM #index_columns ic


	INSERT INTO #CreateTableMetadata 
	VALUES
	( N'SysFileName'				, -100, NULL, 'NO', N'nvarchar', 250, 500, NULL, NULL, NULL, NULL, NULL, NULL, N'UNICODE', NULL, NULL, NULL, NULL, NULL, NULL ), 
	( N'SysDatetimeInsertedUTC'		, -90, NULL, 'NO', N'datetime2', NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL ), 
	( N'SysDatetimeUpdatedUTC'		, -80, NULL, 'YES', N'datetime2', NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL ), 
	( N'SysDatetimeDeletedUTC'		, -70, NULL, 'YES', N'datetime2', NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL ), 
	( N'SysSrcGenerationDateTime'	, -60, NULL, 'NO', N'datetime2', NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL ), 
	( N'SysModifiedUTC'				, -50, NULL, 'NO', N'datetime2', NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL ), 
	( N'SysExecutionLog_key'		, -40, NULL, 'NO', N'int', NULL, NULL, 10, 10, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL )
	
	-- Drop table and view and create schema	
	DECLARE @CreateTableSql NVARCHAR(max) = 
	'IF EXISTS (SELECT * from sys.objects WHERE object_id = OBJECT_ID(N'''''+ @DestinationTableFullNameWithBrackets +''''') AND type IN (N''''U''''))
	DROP TABLE '+ @DestinationTableFullNameWithBrackets + ''
	SET @SQLString ='EXECUTE '+@LinkedServerName+'.'+@DestinationDatabaseName+'.dbo.sp_executesql N'''+@CreateTableSql+'''';
	PRINT CHAR(13) + '-----------------------------------------' + CHAR(13) + '-- Drop table ' + @DestinationTableFullNameWithBrackets + CHAR(13) + '-----------------------------------------' 
	PRINT @SQLString 
	EXECUTE (@SQLString);

	SET @CreateTableSql  =	N'IF EXISTS (SELECT * from sys.objects WHERE object_id = OBJECT_ID(N'''''+ @DestinationViewFullNameWithBrackets +N''''') AND type IN (N''''V''''))
	DROP VIEW '+ @DestinationViewFullNameWithBrackets 	
	SET @SQLString ='EXECUTE '+@LinkedServerName+'.'+@DestinationDatabaseName+'.dbo.sp_executesql N'''+@CreateTableSql+'''';
	PRINT CHAR(13) + '-----------------------------------------' + CHAR(13) + '-- Drop destination view ' + @DestinationViewFullNameWithBrackets  + CHAR(13) + '-----------------------------------------' 
	PRINT @SQLString 
	EXECUTE (@SQLString);
	
	SET @CreateTableSql =N'IF NOT EXISTS (SELECT * from sys.schemas s WHERE name = N'''''+  @DestinationSchemaName +''''')
	EXEC(''''CREATE SCHEMA '+ @DestinationSchemaName+ ''''')'	
	SET @SQLString ='EXECUTE '+@LinkedServerName+'.'+@DestinationDatabaseName+'.dbo.sp_executesql N'''+@CreateTableSql+'''';
	PRINT CHAR(13) + '-----------------------------------------' + CHAR(13) + '-- Create Schema ' + @DestinationSchemaName  + CHAR(13) + '-----------------------------------------' 
	PRINT @SQLString 
	EXECUTE (@SQLString);	
	
	-- Create Table, View and Index
	SET @CreateTableSql  = N'CREATE TABLE ' + @DestinationTableFullNameWithBrackets + N' (' +
		STUFF((
	SELECT  ',['+m.COLUMN_NAME+'] ' + 
			UPPER(data_type) + case data_type
				when 'sql_variant' then ''
				when 'text' then ''
				when 'ntext' then ''
				when 'xml' then ''
				when 'decimal' then '(' + cast(numeric_precision as varchar) + ', ' + cast(numeric_scale as varchar) + ')'
				WHEN 'datetime2' THEN '(' + cast(m.DATETIME_PRECISION as varchar)  + ')'
				else coalesce('('+case when character_maximum_length = -1 then 'MAX' else cast(character_maximum_length as varchar) end +')','') end 
			+ ' ' + case when IS_NULLABLE = 'No' then 'NOT ' else '' end  + 'NULL '
	FROM #CreateTableMetadata m
	ORDER BY m.ORDINAL_POSITION
	FOR XML PATH('')), 1,1,'') + CHAR(13) +
	ISNULL((SELECT CHAR(9) + ', CONSTRAINT [PK_' +@SourceSchemaNameWitoutSuffix  + @SourceTableNameWithoutPrefix +'] PRIMARY KEY (' + 
						(SELECT STUFF((
							 SELECT ', [' + i.Columnname + '] ' + CASE WHEN i.is_descending_key = 1 THEN 'DESC' ELSE 'ASC' END
							 FROM #index_columns i						                        
							 FOR XML PATH(N''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, ''))
				+ ')' + CHAR(13)), '')+ N')' + CHAR(13) + 
	'CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_'+@SourceSchemaNameWitoutSuffix  + @SourceTableNameWithoutPrefix +'] ON '+@DestinationTableFullNameWithBrackets+'([SysModifiedUTC] ASC)' + CHAR(13) + 
	'CREATE NONCLUSTERED INDEX [NCIDX_SysFileName_'+@SourceSchemaNameWitoutSuffix + @SourceTableNameWithoutPrefix +'] ON '+@DestinationTableFullNameWithBrackets+'([SysFileName] ASC)' 

	SET @SQLString ='EXECUTE '+@LinkedServerName+'.'+@DestinationDatabaseName+'.dbo.sp_executesql N'''+@CreateTableSql+'''';

	PRINT CHAR(13) + '-----------------------------------------' + CHAR(13) + '-- Create table and index ' + @DestinationTableFullNameWithBrackets + CHAR(13) + '-----------------------------------------' 
	PRINT @SQLString 
	EXECUTE (@SQLString);	

	SET @CreateTableSql = N'CREATE VIEW '+@DestinationViewFullNameWithBrackets + CHAR(13) + N'AS' + CHAR(13) + N'SELECT ' + STUFF((SELECT  ',['+m.COLUMN_NAME+'] ' FROM #CreateTableMetadata m ORDER BY m.ORDINAL_POSITION FOR XML PATH('')), 1,1,'') + ' FROM    (SELECT * '+ ISNULL(', _isFirst = LAG(0,1,1) OVER (PARTITION BY ' + STUFF((SELECT ', [' + i.Columnname + '] ' FROM #index_columns i WHERE i.Columnname NOT LIKE 'Sys%' FOR XML PATH(N''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '') + ' ORDER BY [SysSrcGenerationDateTime] DESC)', ', _isFirst = 1') +'  FROM '+ @DestinationTableFullNameWithBrackets + ') t WHERE t._isFirst = 1' 
	SET @SQLString ='EXECUTE '+@LinkedServerName+'.'+@DestinationDatabaseName+'.dbo.sp_executesql N'''+@CreateTableSql+'''';

	

	PRINT CHAR(13) + '-----------------------------------------' + CHAR(13) + '-- Create View ' + @DestinationViewFullNameWithBrackets + CHAR(13) + '-----------------------------------------' 
	PRINT @SQLString 
	EXECUTE (@SQLString);

	SET @CreateTableSql = N'
	IF EXISTS (SELECT TOP 1 * FROM dbo.SSISConfigurations sc WHERE sc.ConfigurationFilter = '''''+ @SourceSchemaName + N'_ArchiveFolderPath'''')
		DELETE dbo.SSISConfigurations WHERE ConfigurationFilter = '''''+ @SourceSchemaName + N'_ArchiveFolderPath''''
	IF EXISTS (SELECT TOP 1 * FROM dbo.SSISConfigurations sc WHERE sc.ConfigurationFilter = '''''+ @SourceSchemaName + N'_SourceFolderPath'''')
		DELETE dbo.SSISConfigurations WHERE ConfigurationFilter = '''''+ @SourceSchemaName + N'_SourceFolderPath''''
	IF EXISTS (SELECT TOP 1 * FROM dbo.SSISConfigurations sc WHERE sc.ConfigurationFilter = '''''+ @SourceSchemaName + N'_ErrorFolderPath'''')
		DELETE dbo.SSISConfigurations WHERE ConfigurationFilter = '''''+ @SourceSchemaName + N'_ErrorFolderPath''''

	INSERT INTO dbo.SSISConfigurations (ConfigurationFilter, ConfiguredValue, PackagePath, ConfiguredValueType) VALUES (N'''''+@SourceSchemaName+N'_ArchiveFolderPath'''',N'''''+@SourceFileRootFolder+N'Archive'''',N''''' + N'\Package.Variables[User::'+ @SourceSchemaName+N'_ArchiveFolderPath].Properties[Value]' + N''''',N''''String'''')
	INSERT INTO dbo.SSISConfigurations (ConfigurationFilter, ConfiguredValue, PackagePath, ConfiguredValueType) VALUES (N'''''+@SourceSchemaName+N'_SourceFolderPath'''',N'''''+@SourceFileRootFolder+N'Data'''',N''''' + N'\Package.Variables[User::'+ @SourceSchemaName+N'_SourceFolderPath].Properties[Value]' + N''''',N''''String'''')
	INSERT INTO dbo.SSISConfigurations (ConfigurationFilter, ConfiguredValue, PackagePath, ConfiguredValueType) VALUES (N'''''+@SourceSchemaName+N'_ErrorFolderPath'''',N'''''+@SourceFileRootFolder+N'Error'''',N''''' + N'\Package.Variables[User::'+ @SourceSchemaName+N'_ErrorFolderPath].Properties[Value]' + N''''',N''''String'''')
	'
	SET @SQLString ='EXECUTE '+@LinkedServerName+'.DWH_0_Admin.dbo.sp_executesql N'''+@CreateTableSql+'''';

	PRINT CHAR(13) + '-----------------------------------------' + CHAR(13) + '-- Insert SSISConfigurations' + CHAR(13) + '-----------------------------------------' 
	PRINT @SQLString 	
	EXECUTE (@SQLString);

	SELECT	sm.COLUMN_NAME

					,BIML_DATATYPE					= dtt.Biml
					,LENGHT							= ISNULL(sm.CHARACTER_MAXIMUM_LENGTH, 0)
					,NUMERIC_PRECISION				= ISNULL(sm.NUMERIC_PRECISION, 0)
					,NUMERIC_SCALE					= ISNULL(sm.NUMERIC_SCALE, 0)
					,sm.ORDINAL_POSITION
					,DELIMITER						= LEAD(@ColumnDelimiter, 1, @RowDelimiter) OVER (ORDER BY sm.ORDINAL_POSITION)
					,SOURCETABLECATALOG				= @SourceFileRootFolder
					,SOURCESCHEMANAME				= @SourceSchemaName
					,SourceTableName				= @SourceTableName
					,FilePattern					= @FilePattern
					,ColumnNamesInFirstDataRow		= @ColumnNamesInFirstDataRow
					,HeaderRowsToSkip				= @HeaderRowsToSkip
					,DataRowsToSkip					= @DataRowsToSkip
					,FlatFileType					= @FlatFileType
					,HeaderRowDelimiter				= @HeaderRowDelimiter
					,RowDelimiter					= @RowDelimiter
					,ColumnDelimiter				= @ColumnDelimiter
					,TextQualifer					= IIF(@TextQualifer = '"', '&quot;', @TextQualifer)
					,IsUnicode						= @IsUnicode
					,CodePage						= @CodePage
					,DestinationFullTableName		= @DestinationTableFullNameWithBrackets
					,DestinationFullViewName		= @DestinationViewFullNameWithBrackets
					,DestinationDatabaseName		= @DestinationDatabaseName
					,Locale							= @Locale
					,FileNameRegExDateTime			= @FileNameRegExDateTime
					,FileNameDateTimePattern		= @FileNameDateTimePattern
					,ExecProc						= @ExecProcAnnotation
					,DestinationSchemaName			= @DestinationSchemaName
					,DestinationTableName			= @DestinationTableName
	FROM	#SourceMetadata										sm
	LEFT JOIN Metadata.DataTypeTranslation dtt ON dtt.SQLServer = sm.DATA_TYPE
	ORDER BY sm.ORDINAL_POSITION


END TRY
BEGIN CATCH
    SELECT 
         ERROR_NUMBER() AS ErrorNumber
        ,ERROR_SEVERITY() AS ErrorSeverity
        ,ERROR_STATE() AS ErrorState
        ,ERROR_PROCEDURE() AS ErrorProcedure
        ,ERROR_LINE() AS ErrorLine
        ,ERROR_MESSAGE() AS ErrorMessage;


    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
END CATCH;

IF @@TRANCOUNT > 0
    COMMIT TRANSACTION;
GO
PRINT N'Creating [Metadata].[CopyMetadataReferences]...';


GO
-- =============================================
--
-- Author:		
-- Create date: 2016-06-05
-- Description:	Copies meta data references, from a given table, from a database to another
-- Example:	
--
--
-- =============================================
CREATE PROCEDURE [Metadata].[CopyMetadataReferences] @FromDatabase NVARCHAR(128)
	,@ToDatabase NVARCHAR(128)
	,@FromDatabaseSource NVARCHAR(128)
	,@ToDatabaseSource NVARCHAR(128)
	,@CurrentDestinationTableNameToCopy NVARCHAR(128)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRANSACTION

	BEGIN TRY
		DECLARE @CurrentSourceTableNameToCopy NVARCHAR(128) = (
				SELECT SourceTableName
				FROM [Metadata].[DestinationTable]
				WHERE DestinationTableName = @CurrentDestinationTableNameToCopy
					AND DestinationTableCatalog = @FromDatabase
				)

		-- Insert meta data into the SourceField table
		IF NOT EXISTS (
				SELECT 1
				FROM [Metadata].[SourceField]
				WHERE DestinationTableCatalog = @ToDatabaseSource
					AND TABLE_NAME = @CurrentSourceTableNameToCopy
				)
		BEGIN
			INSERT INTO [Metadata].[SourceField] (
				TABLE_CATALOG
				,TABLE_SCHEMA
				,TABLE_NAME
				,COLUMN_NAME
				,ORDINAL_POSITION
				,COLUMN_DEFAULT
				,IS_NULLABLE
				,DATA_TYPE
				,CHARACTER_MAXIMUM_LENGTH
				,CHARACTER_OCTET_LENGTH
				,NUMERIC_PRECISION
				,NUMERIC_PRECISION_RADIX
				,NUMERIC_SCALE
				,DATETIME_PRECISION
				,CHARACTER_SET_CATALOG
				,CHARACTER_SET_SCHEMA
				,CHARACTER_SET_NAME
				,COLLATION_CATALOG
				,COLLATION_SCHEMA
				,COLLATION_NAME
				,DOMAIN_CATALOG
				,DOMAIN_SCHEMA
				,DOMAIN_NAME
				,DestinationTableCatalog
				,TABLE_SERVER
				)
			SELECT @ToDatabaseSource
				,TABLE_SCHEMA
				,TABLE_NAME
				,COLUMN_NAME
				,ORDINAL_POSITION
				,COLUMN_DEFAULT
				,IS_NULLABLE
				,DATA_TYPE
				,CHARACTER_MAXIMUM_LENGTH
				,CHARACTER_OCTET_LENGTH
				,NUMERIC_PRECISION
				,NUMERIC_PRECISION_RADIX
				,NUMERIC_SCALE
				,DATETIME_PRECISION
				,CHARACTER_SET_CATALOG
				,CHARACTER_SET_SCHEMA
				,CHARACTER_SET_NAME
				,COLLATION_CATALOG
				,COLLATION_SCHEMA
				,COLLATION_NAME
				,DOMAIN_CATALOG
				,DOMAIN_SCHEMA
				,DOMAIN_NAME
				,@ToDatabase
				,TABLE_SERVER
			FROM [Metadata].[SourceField]
			WHERE DestinationTableCatalog = @FromDatabase
				AND TABLE_NAME = @CurrentSourceTableNameToCopy

			PRINT 'Inserted records into [Metadata].[SourceField]'
		END
		ELSE
			PRINT '[Metadata].[SourceField] skipped'

		-- Insert meta data for PK definition
		IF NOT EXISTS (
				SELECT 1
				FROM [Metadata].[SourceField]
				WHERE DestinationTableCatalog = @ToDatabase
					AND TABLE_NAME = @CurrentSourceTableNameToCopy
				)
		BEGIN
			INSERT INTO [Metadata].[TableKeyDefinition] (
				TableCatalog
				,SchemaName
				,TableName
				,TableKeyName
				,COLUMN_NAME
				,DATA_TYPE
				,KeyType
				,KeyColumnOrder
				,IncludedColumn
				)
			SELECT @ToDatabase
				,SchemaName
				,TableName
				,TableKeyName
				,COLUMN_NAME
				,DATA_TYPE
				,KeyType
				,KeyColumnOrder
				,IncludedColumn
			FROM [Metadata].[TableKeyDefinition]
			WHERE TableCatalog = @FromDatabase
				AND TableName = @CurrentDestinationTableNameToCopy
				AND KeyType = 'PK'

			PRINT 'Inserted records into [Metadata].[TableKeyDefinition]'
		END
		ELSE
			PRINT '[Metadata].[TableKeyDefinition] skipped'

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		PRINT 'Failure'

		ROLLBACK TRANSACTION
	END CATCH
END
GO
PRINT N'Creating [Metadata].[CreateFactEntities]...';


GO



CREATE PROCEDURE [Metadata].[CreateFactEntities] @SourceSchema VARCHAR(50), @DropAndCreate BIT = 0 
AS
--EXEC [Metadata].[CreateFactEntities] @SourceSchema = 'Fact', @DropAndCreate = 1 -- varchar(50)
    DECLARE @psource_DB NVARCHAR(50)
       ,@pdest_db NVARCHAR(50) = 'DWH_3_Fact'
       ,@psource_schema NVARCHAR(50)
       ,@pdest_schema NVARCHAR(50)
       ,@psource_table NVARCHAR(50)
       ,@pGroupName NVARCHAR(50)
       ,@pdest_Table NVARCHAR(50)
       ,@pCreateOrRebuild NVARCHAR(50);
		 
        
    IF @DropAndCreate = 1
        BEGIN 
            EXECUTE Metadata.RemoveMultipleMetaDataObject @SourceSchema = @SourceSchema, @DestinationTableCatalog = @pdest_db             
        END 
	       
    DECLARE SourceTables CURSOR FAST_FORWARD READ_ONLY
    FOR
        SELECT  t.TABLE_CATALOG
               ,t.TABLE_SCHEMA
               ,t.TABLE_NAME
               ,GroupName = CASE WHEN LEFT(t.TABLE_NAME, 2) = 'f_'
                                     THEN 'Fact'
                                     ELSE 'Dimension'
                                END
               ,dest_schema =  t.TABLE_SCHEMA
               ,dest_Table = TABLE_NAME
               ,CreateOrRebuild = CASE WHEN dt.SourceTableName IS NULL THEN 'C'
                                    ELSE 'R'
                                  END
        FROM    DWH_2_Norm.INFORMATION_SCHEMA.TABLES t
        LEFT JOIN Metadata.DestinationTable dt ON t.TABLE_SCHEMA = dt.SourceSchemaName AND t.TABLE_CATALOG = dt.SourceTableCatalog AND t.TABLE_NAME = dt.SourceTableName
        WHERE   t.TABLE_TYPE = 'VIEW' AND t.TABLE_SCHEMA LIKE @SourceSchema;
        
    OPEN SourceTables;
        
    FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
        @psource_table, @pGroupName, @pdest_schema, @pdest_Table, @pCreateOrRebuild;
                 

    WHILE @@FETCH_STATUS = 0
        BEGIN
        
            IF NOT EXISTS ( SELECT  *
                            FROM    DWH_3_Fact.sys.schemas
                            WHERE   name = @pdest_schema )
                BEGIN 
                        
                    EXEC('use '+ @pdest_db +'; exec sp_executesql N''create schema '+ @pdest_schema +' '' ')
				   
                END;

            IF @pCreateOrRebuild = 'R'
                BEGIN				       		  
				EXECUTE Metadata.ReGenerateTable @_DestinationTableCatalog = @pdest_db,
				    @_LinkedServerName = N'localhost', 
				    @_DestinationTableName = @pdest_Table,
				    @_DestinationSchemaName = @pdest_schema, 
				    @UpdateSourceFields = 1, -- bit
				    @VersionComment = 'AutoRebuild' 				
                END 

            IF @pCreateOrRebuild = 'C' 
                BEGIN 
                    EXECUTE Metadata.CreateNormEntity @source_DB = @psource_DB,
                        @dest_db = @pdest_db, @source_schema = @psource_schema,
                        @dest_schema = @pdest_schema,
                        @source_table = @psource_table, @BIP = N'Test',
                        @GroupName = @pGroupName, @FactScdType = 1;
                END 
        
            FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
                @psource_table, @pGroupName, @pdest_schema, @pdest_Table, @pCreateOrRebuild;
        END;
        
    CLOSE SourceTables;
    DEALLOCATE SourceTables;


/*

	   
        DECLARE @psource_DB NVARCHAR(50)
           ,@pdest_db NVARCHAR(50) = 'DWH_3_Fact'
           ,@psource_schema NVARCHAR(50)
           ,@pdest_schema NVARCHAR(50)
           ,@psource_table NVARCHAR(50)
           ,@pGroupName NVARCHAR(50)
           ,@pdest_Table NVARCHAR(50);
		 
        

        
        DECLARE SourceTables CURSOR FAST_FORWARD READ_ONLY
        FOR
            SELECT  t.TABLE_CATALOG
                   ,t.TABLE_SCHEMA
                   ,t.TABLE_NAME
                   ,GroupName = CASE WHEN LEFT(t.TABLE_NAME, 2) = 'f_'
                                     THEN 'Fact'
                                     ELSE 'Dimension'
                                END
                   ,dest_schema = t.TABLE_SCHEMA
                   ,dest_Table = TABLE_NAME
            FROM    DWH_2_Norm.INFORMATION_SCHEMA.TABLES t
            WHERE   t.TABLE_TYPE = 'VIEW'
                    AND t.TABLE_SCHEMA LIKE @SourceSchema + '%';
        
        OPEN SourceTables;
        
        FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
            @psource_table, @pGroupName, @pdest_schema, @pdest_Table;
                 

        WHILE @@FETCH_STATUS = 0
            BEGIN
        
                IF NOT EXISTS ( SELECT  *
                                FROM    DWH_2_Norm.sys.schemas
                                WHERE   name = @pdest_schema )
                    BEGIN 
                        
                        exec('use '+ @pdest_db +'; exec sp_executesql N''create schema '+ @pdest_schema +' '' ')
				   
                    END;

                
			 	
                EXECUTE Metadata.RemoveMetaData @DestinationTableDataBase = @pdest_db,
                    @SourceTableDataBase = @psource_DB,
                    @DestinationTableName = @pdest_Table,
                    @DestinationSchemaName = @pdest_schema;

                EXECUTE DevelopmentFrameworkConfig.Metadata.CreateNormEntity @source_DB = @psource_DB,
                    @dest_db = @pdest_db, @source_schema = @psource_schema,
                    @dest_schema = @pdest_schema,
                    @source_table = @psource_table, @BIP = N'Test',
                    @GroupName = @pGroupName;
           
        
                FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
                    @psource_table, @pGroupName, @pdest_schema, @pdest_Table;
            END;
        
        CLOSE SourceTables;
        DEALLOCATE SourceTables;
	   */
GO
PRINT N'Creating [Metadata].[CreateJob]...';


GO
-- =============================================
--
-- Author:		
-- Create date: 2016-06-05
-- Description:	Creates job to execute SSIS packages based on meta data
-- Example:	
/*	
		EXECUTE [DevelopmentFrameworkConfig].[Metadata].[CreateJob] 
				@DestinationTableCatalog = 'DataWarehouse'
				, @FilterBySchema1 = 'Navision'
				, @FilterBySchema2 = 'Navision'
				, @RunJobAsLastStep = 'NameOfJobToRun'
				, @server_name = 'LOCALHOST'	
	
*/
-- =============================================
CREATE PROCEDURE [Metadata].[CreateJob] @DestinationTableCatalog NVARCHAR(128)
	,@RunJobAsLastStep NVARCHAR(128) = NULL
	,@RunJobAsLastStep2 NVARCHAR(128) = NULL
	,@RunJobAsLastStep3 NVARCHAR(128) = NULL
	,@FilterBySchema1 NVARCHAR(20) = NULL
	,@FilterBySchema2 NVARCHAR(20) = NULL
	,@SSISPackagePath NVARCHAR(255) = 'C:\SSIS\SSISPackages\'
	,@server_name NVARCHAR(50) = 'localhost'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @SQLScript VARCHAR(max)
		,@SSISPackageName NVARCHAR(128)
		,@RowCounter INT = 0
		,@JobName NVARCHAR(128)
		,@on_success_action_var CHAR(1) = '3'

	SET @JobName = 'MainRunBIMLPackages_' + @DestinationTableCatalog + ISNULL('_' + @FilterBySchema1, '') + ISNULL('_' + @FilterBySchema2, '')
	SET @SQLScript = '
	USE [msdb]
	IF  EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = N''' + @JobName + ''')
	EXEC msdb.dbo.sp_delete_job @job_name=N''' + @JobName + ''', @delete_unused_schedule=1

	DECLARE @jobId BINARY(16)
	EXEC  msdb.dbo.sp_add_job @job_name=N''' + @JobName + ''', 
			@enabled=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=2, 
			@notify_level_netsend=2, 
			@notify_level_page=2, 
			@delete_level=0, 
			@category_name=N''[Uncategorized (Local)]'', 
			@owner_login_name=N''sa'', @job_id = @jobId OUTPUT
	select @jobId
	EXEC msdb.dbo.sp_add_jobserver @job_name=N''' + @JobName + ''', @server_name = N''' + @server_name + '''
	'

	DECLARE cTemp CURSOR
	FOR
	SELECT SSISPackageName
	FROM DevelopmentFrameworkConfig.Metadata.DestinationTable
	WHERE DestinationTableCatalog = @DestinationTableCatalog
		AND CreateTable = 1
		AND CreateSSISPackage = 1
		AND (
			DestinationSchemaName = ISNULL(@FilterBySchema1, DestinationSchemaName)
			OR DestinationSchemaName = ISNULL(@FilterBySchema2, DestinationSchemaName)
			)
	ORDER BY DestinationSchemaName
		,SSISPackageName

	OPEN cTemp

	FETCH NEXT
	FROM cTemp
	INTO @SSISPackageName

	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @RowCounter = @RowCounter + 1
		SET @SQLScript = @SQLScript + 'USE [msdb]
			EXEC msdb.dbo.sp_add_jobstep @job_name=N''' + @JobName + ''', @step_name=N''Run SSIS package ' + @SSISPackageName + ''', 
					@step_id=' + cast(@RowCounter AS VARCHAR(10)) + ', 
					@cmdexec_success_code=0, 
					@on_success_action=3, 
					@on_fail_action=3, 
					@retry_attempts=0, 
					@retry_interval=0, 
					@os_run_priority=0, @subsystem=N''SSIS'', 
					@command=N''/FILE "' + @SSISPackagePath + @SSISPackageName + '.dtsx" /CHECKPOINTING OFF /REPORTING E'', 
					@database_name=N''master'', 
					@flags=0
			'

		FETCH NEXT
		FROM cTemp
		INTO @SSISPackageName
	END

	CLOSE cTemp

	DEALLOCATE cTemp

	EXECUTE (@SQLScript)

	IF (@RunJobAsLastStep IS NOT NULL)
	BEGIN
		IF (@RunJobAsLastStep2 IS NULL)
			SET @on_success_action_var = '1'
		SET @SQLScript = 'USE [msdb]
				EXEC msdb.dbo.sp_add_jobstep @job_name=N''' + @JobName + ''', @step_name=N''Run jobb ' + @RunJobAsLastStep + ''', 
						@step_id=' + cast(@RowCounter + 1 AS VARCHAR(10)) + ', 
						@cmdexec_success_code=0, 
						@on_success_action=' + @on_success_action_var + ', 
						@on_success_step_id=0, 
						@on_fail_action=2, 
						@on_fail_step_id=0, 
						@retry_attempts=0, 
						@retry_interval=0, 
						@os_run_priority=0, @subsystem=N''TSQL'', 
						@command=N''EXECUTE msdb.dbo.sp_start_job @job_name = ''''' + @RunJobAsLastStep + ''''''', 
						@database_name=N''msdb'', 
						@flags=0
						'

		EXECUTE (@SQLScript)

		PRINT @SQLScript
	END

	IF (@RunJobAsLastStep2 IS NOT NULL)
	BEGIN
		IF (@RunJobAsLastStep3 IS NULL)
			SET @on_success_action_var = '1'
		SET @SQLScript = 'USE [msdb]
				EXEC msdb.dbo.sp_add_jobstep @job_name=N''' + @JobName + ''', @step_name=N''Run jobb ' + @RunJobAsLastStep2 + ''', 
						@step_id=' + cast(@RowCounter + 2 AS VARCHAR(10)) + ', 
						@cmdexec_success_code=0, 
						@on_success_action=' + @on_success_action_var + ', 
						@on_success_step_id=0, 
						@on_fail_action=2, 
						@on_fail_step_id=0, 
						@retry_attempts=0, 
						@retry_interval=0, 
						@os_run_priority=0, @subsystem=N''TSQL'', 
						@command=N''EXECUTE msdb.dbo.sp_start_job @job_name = ''''' + @RunJobAsLastStep2 + ''''''', 
						@database_name=N''msdb'', 
						@flags=0
						'

		EXECUTE (@SQLScript)

		PRINT @SQLScript
	END

	SET @SQLScript = 'USE [msdb]
	EXEC msdb.dbo.sp_update_job @job_name=N''' + @JobName + ''', 
			@enabled=1, 
			@start_step_id=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=2, 
			@notify_level_netsend=2, 
			@notify_level_page=2, 
			@delete_level=0, 
			@description=N'''', 
			@category_name=N''[Uncategorized (Local)]'', 
			@owner_login_name=N''sa'', 
			@notify_email_operator_name=N'''', 
			@notify_netsend_operator_name=N'''', 
			@notify_page_operator_name=N''''
	'

	EXECUTE (@SQLScript)
END
GO
PRINT N'Creating [Metadata].[CreateNormEntities]...';


GO






CREATE PROCEDURE [Metadata].[CreateNormEntities]
    @SourceSchema VARCHAR(50)
   ,@DropAndCreate BIT = 0
AS -- EXEC Metadata.CreateNormEntities @SourceSchema = 'Norm', @DropAndCreate = 1 -- varchar(50)

    DECLARE @psource_DB NVARCHAR(50)
       ,@pdest_db NVARCHAR(50) = 'DWH_2_Norm'
       ,@psource_schema NVARCHAR(50)
       ,@pdest_schema NVARCHAR(50)
       ,@psource_table NVARCHAR(50)
       ,@pGroupName NVARCHAR(50)
       ,@pdest_Table NVARCHAR(50)
       ,@pCreateOrRebuild NVARCHAR(50);
		 
    
    
    IF @DropAndCreate = 1
        BEGIN 
            EXECUTE Metadata.RemoveMultipleMetaDataObject @SourceSchema = @SourceSchema, @DestinationTableCatalog = @pdest_db             
        END 
        
        
    DECLARE SourceTables CURSOR FAST_FORWARD READ_ONLY
    FOR
        SELECT  t.TABLE_CATALOG
               ,t.TABLE_SCHEMA
               ,t.TABLE_NAME
               ,GroupName = CASE WHEN RIGHT(t.TABLE_SCHEMA, 5) = '_Scd1'
                                 THEN 'Fact'
                                 ELSE 'Dimension'
                            END
               ,dest_schema = LTRIM(RTRIM(LEFT(t.TABLE_SCHEMA,
                                               LEN(t.TABLE_SCHEMA) - 5)))
               ,dest_Table = 'n_' + TABLE_NAME
               ,CreateOrRebuild = CASE WHEN dt.SourceTableName IS NULL
                                       THEN 'C'
                                       ELSE 'R'
                                  END
        FROM    DWH_1_Raw.INFORMATION_SCHEMA.TABLES t
        LEFT JOIN Metadata.DestinationTable dt ON t.TABLE_SCHEMA = dt.SourceSchemaName AND t.TABLE_CATALOG = dt.SourceTableCatalog AND t.TABLE_NAME = dt.SourceTableName
        WHERE   t.TABLE_TYPE = 'VIEW' AND t.TABLE_SCHEMA LIKE @SourceSchema + '%';
        
    OPEN SourceTables;
        
    FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
        @psource_table, @pGroupName, @pdest_schema, @pdest_Table,
        @pCreateOrRebuild;
                 

    WHILE @@FETCH_STATUS = 0
        BEGIN
        
            IF NOT EXISTS ( SELECT  *
                            FROM    DWH_2_Norm.sys.schemas
                            WHERE   name = @pdest_schema )
                BEGIN 
                        
                    EXEC('use '+ @pdest_db +'; exec sp_executesql N''create schema '+ @pdest_schema +' '' ')
				   
                END;

            IF @pCreateOrRebuild = 'R'
                BEGIN				       		  
                    EXECUTE Metadata.ReGenerateTable @_DestinationTableCatalog = @pdest_db,
                        @_LinkedServerName = N'localhost',
                        @_DestinationTableName = @pdest_Table,
                        @_DestinationSchemaName = @pdest_schema,
                        @UpdateSourceFields = 1, -- bit
                        @VersionComment = 'AutoRebuild' 				
                END 

            IF (@pCreateOrRebuild = 'C')
                BEGIN 
                    EXECUTE Metadata.CreateNormEntity @source_DB = @psource_DB,
                        @dest_db = @pdest_db, @source_schema = @psource_schema,
                        @dest_schema = @pdest_schema,
                        @source_table = @psource_table, @BIP = N'Test',
                        @GroupName = @pGroupName;
                END 
        
            FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
                @psource_table, @pGroupName, @pdest_schema, @pdest_Table,
                @pCreateOrRebuild;
        END;
        
    CLOSE SourceTables;
    DEALLOCATE SourceTables;
GO
PRINT N'Creating [Metadata].[CreateRawEntities]...';


GO





CREATE PROCEDURE [Metadata].[CreateRawEntities] @SourceSchema VARCHAR(50), @DropAndCreate BIT = 0 
AS
--EXEC [Metadata].[CreateRawEntities] @SourceSchema = 'Netsuite', @DropAndCreate = 1 -- varchar(50)
--EXECUTE Metadata.RemoveMultipleMetaDataObject @SourceSchema = 'Netsuite', @DestinationTableCatalog = 'DWH_1_Raw'

    DECLARE @psource_DB NVARCHAR(50)
       ,@pdest_db NVARCHAR(50) = 'DWH_1_Raw'
       ,@psource_schema NVARCHAR(50)
       ,@pdest_schema NVARCHAR(50)
       ,@psource_table NVARCHAR(50)
       ,@pGroupName NVARCHAR(50)
       ,@pdest_Table NVARCHAR(50)
       ,@pCreateOrRebuild NVARCHAR(50);
		 
        
    IF @DropAndCreate = 1
        BEGIN 
            EXECUTE Metadata.RemoveMultipleMetaDataObject @SourceSchema = @SourceSchema, @DestinationTableCatalog = @pdest_db             
        END 
	       
    DECLARE SourceTables CURSOR FAST_FORWARD READ_ONLY
    FOR
        SELECT  psource_DB		 = t.TABLE_CATALOG
               ,psource_schema	 = t.TABLE_SCHEMA
               ,psource_table		 = t.TABLE_NAME 
               ,pGroupName		 = CASE WHEN t.TABLE_SCHEMA LIKE '%[_]f' THEN 'Fact' ELSE 'Dimension' END
               ,pdest_schema		 = REPLACE(REPLACE(t.TABLE_SCHEMA, '_d', ''), '_f', '') +'_RawTyped'
               ,pdest_Table		 = CONCAT('r_', t.TABLE_NAME)
               ,pCreateOrRebuild	 = CASE WHEN dt.SourceTableName IS NULL THEN 'C' ELSE 'R' END
        FROM    DWH_1_Raw.INFORMATION_SCHEMA.TABLES t
        LEFT JOIN Metadata.DestinationTable dt ON t.TABLE_SCHEMA = dt.SourceSchemaName AND t.TABLE_CATALOG = dt.SourceTableCatalog AND t.TABLE_NAME = dt.SourceTableName
        WHERE   t.TABLE_TYPE = 'VIEW' AND t.TABLE_SCHEMA LIKE @SourceSchema + '%';
        
    OPEN SourceTables;
        
    FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
        @psource_table, @pGroupName, @pdest_schema, @pdest_Table, @pCreateOrRebuild;
                 

    WHILE @@FETCH_STATUS = 0
        BEGIN
        
            IF NOT EXISTS ( SELECT  *
                            FROM    DWH_1_Raw.sys.schemas
                            WHERE   name = @pdest_schema )
                BEGIN 
                        
                    EXEC('use '+ @pdest_db +'; exec sp_executesql N''create schema '+ @pdest_schema +' '' ')
				   
                END;

            IF @pCreateOrRebuild = 'R'
                BEGIN				       		  
				EXECUTE Metadata.ReGenerateTable @_DestinationTableCatalog = @pdest_db,
				    @_LinkedServerName = N'localhost', 
				    @_DestinationTableName = @pdest_Table,
				    @_DestinationSchemaName = @pdest_schema, 
				    @UpdateSourceFields = 1, -- bit
				    @VersionComment = 'AutoRebuild' 				
                END 

            IF @pCreateOrRebuild = 'C' 
                BEGIN 
                    EXECUTE Metadata.CreateNormEntity @source_DB = @psource_DB,
                        @dest_db = @pdest_db, 
				    @source_schema = @psource_schema,
                        @dest_schema = @pdest_schema,
                        @source_table = @psource_table, 
				    @BIP = N'Test',
                        @GroupName = @pGroupName;
                END 
        
            FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
                @psource_table, @pGroupName, @pdest_schema, @pdest_Table, @pCreateOrRebuild;
        END;
        
    CLOSE SourceTables;
    DEALLOCATE SourceTables;
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/


SELECT id = 1, SQLServer = N'bigint', SSIS = N'DT_I8', Biml = N'Int64', DataTypeGroup = N'Numeric'
INTO #DataTypeTranslation 
UNION ALL SELECT 2, N'binary', N'DT_BYTES', N'Binary', N'Binary'
UNION ALL SELECT 3, N'bit', N'DT_BOOL', N'Boolean', N'Boolean'
UNION ALL SELECT 4, N'char', N'DT_STR', N'AnsiStringFixedLength', N'Text'
UNION ALL SELECT 5, N'date', N'DT_DBDATE', N'Date', N'Date'
UNION ALL SELECT 6, N'datetime', N'DT_DBTIMESTAMP', N'DateTime', N'Date'
UNION ALL SELECT 7, N'datetime2', N'DT_DBTIMESTAMP2', N'DateTime2', N'Date'
UNION ALL SELECT 8, N'datetimeoffset', N'DT_DBTIMESTAMPOFFSET', N'DateTimeOffset', N'Date'
UNION ALL SELECT 9, N'decimal', N'DT_DECIMAL', N'Decimal', N'Numeric'
UNION ALL SELECT 10, N'float', N'DT_R8', N'Double', N'Numeric'
UNION ALL SELECT 11, N'image', N'DT_IMAGE', N'Binary', N'Binary'
UNION ALL SELECT 12, N'int', N'DT_I4', N'Int32', N'Numeric'
UNION ALL SELECT 13, N'money', N'DT_CY', N'Currency', N'Numeric'
UNION ALL SELECT 14, N'nchar', N'DT_WSTR', N'StringFixedLength', N'Text'
UNION ALL SELECT 15, N'ntext', N'DT_NTEXT', N'String', N'Text'
UNION ALL SELECT 16, N'numeric', N'DT_NUMERIC', N'Decimal', N'Numeric'
UNION ALL SELECT 17, N'nvarchar', N'DT_WSTR', N'String', N'Text'
UNION ALL SELECT 18, N'real', N'DT_R4', N'Single', N'Numeric'
UNION ALL SELECT 19, N'smalldatetime', N'DT_DBTIMESTAMP', N'DateTime', N'Date'
UNION ALL SELECT 20, N'smallint', N'DT_I2', N'Int16', N'Numeric'
UNION ALL SELECT 21, N'smallmoney', N'DT_CY', N'Currency', N'Numeric'
UNION ALL SELECT 22, N'sql_variant', N'DT_WSTR', N'Object', N'Object'
UNION ALL SELECT 23, N'text', N'DT_TEXT', N'AnsiString', N'Text'
UNION ALL SELECT 24, N'time', N'DT_DBTIME2', N'Time', N'Date'
UNION ALL SELECT 25, N'tinyint', N'DT_UI1', N'Byte', N'Numeric'
UNION ALL SELECT 26, N'uniqueidentifier', N'DT_GUID', N'Guid', N'Guid'
UNION ALL SELECT 27, N'varbinary', N'DT_BYTES', N'Binary', N'Binary'
UNION ALL SELECT 28, N'varchar', N'DT_STR', N'AnsiString', N'Text'
UNION ALL SELECT 29, N'xml', N'DT_WSTR', N'Xml', N'XML'


SET IDENTITY_INSERT Metadata.DataTypeTranslation ON

INSERT Metadata.DataTypeTranslation (Id, SQLServer, SSIS, Biml, DataTypeGroup)
SELECT dtt.id
       , dtt.SQLServer
       , dtt.SSIS
       , dtt.Biml
       , dtt.DataTypeGroup
FROM   #DataTypeTranslation dtt
WHERE  dtt.id NOT IN (SELECT Id FROM Metadata.DataTypeTranslation)

SET IDENTITY_INSERT Metadata.DataTypeTranslation OFF



SELECT 3 [Id], N'dwInfFK' [DerivedColumnType], N'HistoryRecId' [DerivedColumnName], N'-1' [OverrideValue], N'bigint' [DataType], N'Extended field in Stage. To be populated in DW for missing Foreign Key members' [Comment], NULL [ApplicableTable], NULL [MaxLength]
INTO #DerivedColumnOverride
UNION ALL SELECT 6, N'dwInfFK', N'SourceSystemKey', N'-1', N'int', NULL, NULL, NULL
UNION ALL SELECT 13, N'dwError', N'DateTimeError', N'GETUTCDATE()', N'datetime', NULL, NULL, NULL
UNION ALL SELECT 14, N'dwError', N'DWID', N'@[User::DWID]', N'int', NULL, NULL, NULL
UNION ALL SELECT 15, N'dwError', N'PackageName', N'@[System::PackageName]', N'nvarchar', NULL, NULL, 100
UNION ALL SELECT 16, N'dwError', N'SourceTableName', N'<<DynamicValue>>', N'nvarchar', NULL, NULL, 50
UNION ALL SELECT 17, N'dwError', N'RowData', N'<<DynamicValue>>', N'nvarchar', NULL, NULL, 4000
UNION ALL SELECT 18, N'dwInf', N'SysIsInferred', N'1', NULL, NULL, NULL, NULL
UNION ALL SELECT 19, N'dwInfFK', N'SysSrcGenerationDateTime', N'(DT_DBTIMESTAMP2, 0) ((DT_DBDATE)"1900-01-01")', N'datetime', NULL, NULL, NULL
UNION ALL SELECT 20, N'dwInfFK', N'SysValidFromDateTime', N'(DT_DBTIMESTAMP2,0)(SUBSTRING((DT_WSTR,100)GETUTCDATE(),1,19))', N'datetime', NULL, NULL, NULL
UNION ALL SELECT 21, N'dwInfFK', N'SysDatetimeInsertedUTC', N'(DT_DBTIMESTAMP2,0)(SUBSTRING((DT_WSTR,100)GETUTCDATE(),1,19))', N'datetime', NULL, NULL, NULL
UNION ALL SELECT 22, N'dwInfFK', N'SysModifiedUTC', N'(DT_DBTIMESTAMP2,0)(SUBSTRING((DT_WSTR,100)GETUTCDATE(),1,19))', N'datetime', NULL, NULL, NULL
--UNION ALL SELECT 24, N'dwInit', N'SysDateTimeDeletedUTC', N'ISNULL([SysDatetimeDeletedUTC])? [SysDatetimeDeletedUTC] : (DT_DBTIMESTAMP2,0)(SUBSTRING((DT_WSTR,100)GETUTCDATE(),1,19))', N'datetime', NULL, NULL, NULL
UNION ALL SELECT 24, N'dwInit', N'SysDateTimeDeletedUTC', N'[SysDatetimeDeletedUTC]', N'datetime', NULL, NULL, NULL



SET IDENTITY_INSERT [Metadata].[DerivedColumnOverride] ON 

INSERT INTO Metadata.DerivedColumnOverride
        (Id 
		, DerivedColumnType
        , DerivedColumnName
        , OverrideValue
        , DataType
        , Comment
        , ApplicableTable
        , MaxLength )
SELECT dco.Id
     , dco.DerivedColumnType
     , dco.DerivedColumnName
     , dco.OverrideValue
     , dco.DataType
     , dco.Comment
     , dco.ApplicableTable
     , dco.MaxLength 
FROM #DerivedColumnOverride dco
WHERE dco.Id NOT IN (SELECT dco2.Id FROM Metadata.DerivedColumnOverride dco2)

SET IDENTITY_INSERT [Metadata].[DerivedColumnOverride] OFF


SELECT N'All' AS GroupName
INTO #DestinationTableGroup
UNION SELECT N'Datamart objects'
UNION SELECT N'Dimension'
UNION SELECT N'Fact'

INSERT INTO Metadata.DestinationTableGroup
        ( GroupName )
SELECT dtg.GroupName
FROM #DestinationTableGroup dtg
WHERE dtg.GroupName NOT IN (SELECT dtg2.GroupName FROM Metadata.DestinationTableGroup dtg2)

SELECT Id = 1
       , StagingEnvironmentName = 'DWH_1_Raw'
       , NormEnvironmentName = 'DWH_2_Norm'
       , MartEnvironmentName = 'DWH_3_Fact'
       , DefaultTableCompressionType = 'PAGE'
       , DefaultSSISIncrementalLoad = 1
       , DefaultSSISConfigurationFrameWorkCatalog = N'DWH_0_Admin'
       , DefaultDtsConfigEnvironmentVariableName = N'J_dwautogen_SSISAdminConfig'
       , DefaultNormLayerIndexStorageLocation = N'Norm_Index'
       , DefaultNormLayerDataStorageLocation = N'Norm_Data'
       , DefaultMartLayerIndexStorageLocation = N'Fact_Index'
       , DefaultMartLayerDataStorageLocation = N'Fact_Data'
       , RawEnvironmentName = 'DWH_1_Raw'
       , DefaultRawLayerIndexStorageLocation = 'PRIMARY'
       , DefaultRawLayerDataStorageLocation = 'PRIMARY'
INTO #EnvironmentVariables


SET IDENTITY_INSERT [Metadata].[EnvironmentVariables] ON

INSERT INTO Metadata.EnvironmentVariables
        (id 
		, StagingEnvironmentName
        , NormEnvironmentName
        , MartEnvironmentName
        , DefaultTableCompressionType
        , DefaultSSISIncrementalLoad
        , DefaultSSISConfigurationFrameWorkCatalog
        , DefaultDtsConfigEnvironmentVariableName
        , DefaultNormLayerIndexStorageLocation
        , DefaultNormLayerDataStorageLocation
        , DefaultMartLayerIndexStorageLocation
        , DefaultMartLayerDataStorageLocation
        , RawEnvironmentName
        , DefaultRawLayerIndexStorageLocation
        , DefaultRawLayerDataStorageLocation )
SELECT ev.Id
     , ev.StagingEnvironmentName
     , ev.NormEnvironmentName
     , ev.MartEnvironmentName
     , ev.DefaultTableCompressionType
     , ev.DefaultSSISIncrementalLoad
     , ev.DefaultSSISConfigurationFrameWorkCatalog
     , ev.DefaultDtsConfigEnvironmentVariableName
     , ev.DefaultNormLayerIndexStorageLocation
     , ev.DefaultNormLayerDataStorageLocation
     , ev.DefaultMartLayerIndexStorageLocation
     , ev.DefaultMartLayerDataStorageLocation
     , ev.RawEnvironmentName
     , ev.DefaultRawLayerIndexStorageLocation
     , ev.DefaultRawLayerDataStorageLocation 
FROM #EnvironmentVariables ev
WHERE ev.Id NOT IN (SELECT ev2.Id FROM Metadata.EnvironmentVariables ev2)

SET IDENTITY_INSERT [Metadata].[EnvironmentVariables] OFF


SELECT	null as ID,
        null as [COLUMN_NAME] ,
        null as  [DATA_TYPE] ,
        null as  [CHARACTER_MAXIMUM_LENGTH] ,
        null as  [DATETIME_PRECISION] ,
        null as  [ORDINAL_POSITION] ,
        null as  [NUMERIC_PRECISION] ,
        null as  [NUMERIC_SCALE] ,
        null as  [IS_NULLABLE] ,
        null as  [IncludeInChecksum_src] ,
        null as  [TableColumnSpecification] ,
        null as  [IsIdentity] ,
        null as  [CreateColumnIndex] ,
        null as  [SourceTableCatalog] ,
        null as  [DestinationTableCatalog] ,
        null as  [DestinationSchemaName] ,
        null as  [ApplicableTable] ,
        null as  [SSISDataType] ,
        null as  [SSISDataTypeLength] ,
        null as  [SSISColumnSpecification] ,
        null as  [SetFieldOnInsert] ,
        null as  [SetFieldOnUpdate] ,
        null as  [SetFieldOnDelete] ,
        null as  [GroupName]
INTO #DestinationFieldExtended
UNION ALL SELECT 1, N'SysIsInferred', N'bit', NULL, NULL, 9700, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_2_Norm', N'-', NULL, N'Boolean', NULL, N'0', 1, 1, 0, 'Dimension' 
UNION ALL SELECT 2, N'SysExecutionLog_key', N'int', NULL, NULL, 1003, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_2_Norm', N'-', NULL, N'Int32', NULL, N'@[User::SysExecutionLog_key]', 1, 1, 1, 'All' 
UNION ALL SELECT 3, N'SysDatetimeReprocessedUTC', N'datetime2', NULL, 0, 1007, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, NULL, 0, 0, 0, 'All' 
UNION ALL SELECT 4, N'SysIsInferred', N'bit', NULL, NULL, 9700, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'Boolean', NULL, N'0', 1, 1, 0, 'Dimension' 
UNION ALL SELECT 5, N'SysExecutionLog_key', N'int', NULL, NULL, 1003, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'Int32', NULL, N'@[User::SysExecutionLog_key]', 1, 1, 1, 'All' 
UNION ALL SELECT 6, N'SysDatetimeInsertedUTC', N'datetime2', NULL, 0, 1004, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 1, 0, 0, 'All' 
UNION ALL SELECT 7, N'SysDatetimeUpdatedUTC', N'datetime2', NULL, 0, 1005, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 0, 1, 0, 'All' 
UNION ALL SELECT 8, N'SysDatetimeDeletedUTC', N'datetime2', NULL, 0, 1006, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 0, 0, 1, 'All' 
UNION ALL SELECT 9, N'SysModifiedUTC', N'datetime2', NULL, 0, 9500, NULL, NULL, 'NO', 0, NULL, 0, 1, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 1, 1, 1, 'All' 
UNION ALL SELECT 10, N'SysDatetimeInsertedUTC', N'datetime2', NULL, 0, 1004, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 1, 0, 0, 'All' 
UNION ALL SELECT 11, N'SysDatetimeUpdatedUTC', N'datetime2', NULL, 0, 1005, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 0, 1, 0, 'All' 
UNION ALL SELECT 12, N'SysDatetimeDeletedUTC', N'datetime2', NULL, 0, 1006, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 0, 0, 1, 'All' 
UNION ALL SELECT 13, N'SysModifiedUTC', N'datetime2', NULL, 0, 9500, NULL, NULL, 'NO', 0, NULL, 0, 1, N'DWH_2_Norm', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 1, 1, 1, 'All' 
UNION ALL SELECT 14, N'SysIsInferred', N'bit', NULL, NULL, 9700, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_1_Raw', N'-', NULL, N'Boolean', NULL, N'0', 1, 1, 0, 'Dimension' 
UNION ALL SELECT 15, N'SysExecutionLog_key', N'int', NULL, NULL, 1003, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_1_Raw', N'-', NULL, N'Int32', NULL, N'@[User::SysExecutionLog_key]', 1, 1, 1, 'All' 
UNION ALL SELECT 16, N'SysDatetimeInsertedUTC', N'datetime2', NULL, 0, 1004, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_1_Raw', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 1, 0, 0, 'All' 
UNION ALL SELECT 17, N'SysDatetimeUpdatedUTC', N'datetime2', NULL, 0, 1005, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_1_Raw', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 0, 1, 0, 'All' 
UNION ALL SELECT 18, N'SysDatetimeDeletedUTC', N'datetime2', NULL, 0, 1006, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_1_Raw', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 0, 0, 1, 'All' 
UNION ALL SELECT 19, N'SysModifiedUTC', N'datetime2', NULL, 0, 9500, NULL, NULL, 'NO', 0, NULL, 0, 1, N'DWH_1_Raw', N'DWH_1_Raw', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 1, 1, 1, 'All' 
UNION ALL SELECT 20, N'SysExecutionLog_key', N'int', NULL, NULL, 1003, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_3_Fact', N'-', NULL, N'Int32', NULL, N'@[User::SysExecutionLog_key]', 1, 1, 1, 'All' 
UNION ALL SELECT 21, N'SysDatetimeInsertedUTC', N'datetime2', NULL, 0, 1004, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_3_Fact', N'-', NULL, N'DateTime', NULL, N'@[User::SysDatetimeInsertedUTC]', 1, 0, 0, 'All' 
UNION ALL SELECT 22, N'SysDatetimeUpdatedUTC', N'datetime2', NULL, 0, 1005, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_3_Fact', N'-', NULL, N'DateTime', NULL, N'@[User::SysDatetimeUpdatedUTC]', 0, 1, 0, 'All' 
UNION ALL SELECT 23, N'SysModifiedUTC', N'datetime2', NULL, 0, 9500, NULL, NULL, 'NO', 0, NULL, 0, 1, N'DWH_2_Norm', N'DWH_3_Fact', N'-', NULL, N'DateTime', NULL, N'@[User::SysModifiedUTC]', 1, 1, 1, 'All' 



SET IDENTITY_INSERT [Metadata].[DestinationFieldExtended] ON  


INSERT INTO Metadata.DestinationFieldExtended
        ( ID
		, COLUMN_NAME
        , DATA_TYPE
        , CHARACTER_MAXIMUM_LENGTH
        , DATETIME_PRECISION
        , ORDINAL_POSITION
        , NUMERIC_PRECISION
        , NUMERIC_SCALE
        , IS_NULLABLE
        , IncludeInChecksum_src
        , TableColumnSpecification
        , IsIdentity
        , CreateColumnIndex
        , SourceTableCatalog
        , DestinationTableCatalog
        , DestinationSchemaName
        , ApplicableTable
        , SSISDataType
        , SSISDataTypeLength
        , SSISColumnSpecification
        , SetFieldOnInsert
        , SetFieldOnUpdate
        , SetFieldOnDelete
        , GroupName )
SELECT dfe.ID
     , dfe.COLUMN_NAME
     , dfe.DATA_TYPE
     , dfe.CHARACTER_MAXIMUM_LENGTH
     , dfe.DATETIME_PRECISION
     , dfe.ORDINAL_POSITION
     , dfe.NUMERIC_PRECISION
     , dfe.NUMERIC_SCALE
     , dfe.IS_NULLABLE
     , dfe.IncludeInChecksum_src
     , dfe.TableColumnSpecification
     , dfe.IsIdentity
     , dfe.CreateColumnIndex
     , dfe.SourceTableCatalog
     , dfe.DestinationTableCatalog
     , dfe.DestinationSchemaName
     , dfe.ApplicableTable
     , dfe.SSISDataType
     , dfe.SSISDataTypeLength
     , dfe.SSISColumnSpecification
     , dfe.SetFieldOnInsert
     , dfe.SetFieldOnUpdate
     , dfe.SetFieldOnDelete
     , dfe.GroupName 
FROM #DestinationFieldExtended dfe
WHERE dfe.ID NOT IN (SELECT ID FROM [Metadata].[DestinationFieldExtended])
AND dfe.ID IS NOT NULL

SET IDENTITY_INSERT [Metadata].[DestinationFieldExtended] OFF



GO

GO
PRINT N'Update complete.';


GO
