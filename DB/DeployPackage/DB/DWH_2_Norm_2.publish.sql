/*
Deployment script for DWH_2_Norm

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DWH_2_Norm"
:setvar DefaultFilePrefix "DWH_2_Norm"
:setvar DefaultDataPath "E:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "E:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/


/*
CREATE TABLE #temp(sqlStatement nvarchar(max), rowNo int)
INSERT INTO #temp
SELECT sqlStatement = 'TRUNCATE TABLE ' + t.TABLE_CATALOG + '.' + t.TABLE_SCHEMA + '.' + t.TABLE_NAME
       , rowNo = ROW_NUMBER() OVER (ORDER BY t.TABLE_NAME)
FROM   INFORMATION_SCHEMA.TABLES t
WHERE t.TABLE_TYPE = 'BASE TABLE'

DECLARE @LastRowNo int = 1, @sqlStatement NVARCHAR(max)

WHILE (@LastRowNo IS NOT NULL)
BEGIN 
	
	SET @sqlStatement = (SELECT TOP 1 t.sqlStatement FROM #temp t WHERE t.rowNo = @LastRowNo)

	PRINT @sqlStatement
	
	EXEC (@sqlStatement)

	set @LastRowNo= (select top 1 rowNo from #temp where rowNo > @LastRowNo order by rowNo)
END


*/
GO

GO
/*
The column [Norm].[n_CustomerCategory].[CustomerTypeCategory] is being dropped, data loss could occur.

The column [Norm].[n_CustomerCategory].[CustomerTypeCategoryDetail] is being dropped, data loss could occur.

The column [Norm].[n_CustomerCategory].[CustomerCategoryCode] on table [Norm].[n_CustomerCategory] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [Norm].[n_CustomerCategory])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Starting rebuilding table [Norm].[n_CustomerCategory]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Norm].[tmp_ms_xx_n_CustomerCategory] (
    [CustomerCategory_key]        INT            IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]         INT            NOT NULL,
    [SysDatetimeInsertedUTC]      DATETIME2 (0)  NOT NULL,
    [SysDatetimeUpdatedUTC]       DATETIME2 (0)  NULL,
    [SysDatetimeDeletedUTC]       DATETIME2 (0)  NULL,
    [SysDatetimeReprocessedUTC]   DATETIME2 (0)  NULL,
    [SysModifiedUTC]              DATETIME2 (0)  NOT NULL,
    [SysIsInferred]               BIT            NOT NULL,
    [SysValidFromDateTime]        DATETIME2 (0)  NOT NULL,
    [SysSrcGenerationDateTime]    DATETIME2 (0)  NULL,
    [CustomerCategory_bkey]       INT            NOT NULL,
    [CustomerCategoryCode]        NVARCHAR (250) NOT NULL,
    [CustomerCategory]            NVARCHAR (250) NULL,
    [SalesHierarchy]              NVARCHAR (100) NULL,
    [SugarEnum_BusinessType_bkey] NVARCHAR (100) NOT NULL,
    [SugarEnum_AreaType_bkey]     NVARCHAR (100) NOT NULL,
    [SugarEnum_OrderType_bkey]    NVARCHAR (100) NOT NULL,
    [OpportunityCustomerType]     NVARCHAR (100) NOT NULL,
    [SugarEnum_SubsidyArea_bkey]  NVARCHAR (100) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Norm_n_CustomerCategory1] PRIMARY KEY CLUSTERED ([CustomerCategory_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Norm].[n_CustomerCategory])
    BEGIN
        SET IDENTITY_INSERT [Norm].[tmp_ms_xx_n_CustomerCategory] ON;
        INSERT INTO [Norm].[tmp_ms_xx_n_CustomerCategory] ([CustomerCategory_bkey], [SysValidFromDateTime], [CustomerCategory_key], [SysExecutionLog_key], [SysDatetimeInsertedUTC], [SysDatetimeUpdatedUTC], [SysDatetimeDeletedUTC], [SysDatetimeReprocessedUTC], [SysModifiedUTC], [SysIsInferred], [SysSrcGenerationDateTime], [SugarEnum_BusinessType_bkey], [SugarEnum_AreaType_bkey], [SugarEnum_OrderType_bkey], [OpportunityCustomerType], [SugarEnum_SubsidyArea_bkey])
        SELECT   [CustomerCategory_bkey],
                 [SysValidFromDateTime],
                 [CustomerCategory_key],
                 [SysExecutionLog_key],
                 [SysDatetimeInsertedUTC],
                 [SysDatetimeUpdatedUTC],
                 [SysDatetimeDeletedUTC],
                 [SysDatetimeReprocessedUTC],
                 [SysModifiedUTC],
                 [SysIsInferred],
                 [SysSrcGenerationDateTime],
                 [SugarEnum_BusinessType_bkey],
                 [SugarEnum_AreaType_bkey],
                 [SugarEnum_OrderType_bkey],
                 [OpportunityCustomerType],
                 [SugarEnum_SubsidyArea_bkey]
        FROM     [Norm].[n_CustomerCategory]
        ORDER BY [CustomerCategory_bkey] ASC, [SysValidFromDateTime] ASC;
        SET IDENTITY_INSERT [Norm].[tmp_ms_xx_n_CustomerCategory] OFF;
    END

DROP TABLE [Norm].[n_CustomerCategory];

EXECUTE sp_rename N'[Norm].[tmp_ms_xx_n_CustomerCategory]', N'n_CustomerCategory';

EXECUTE sp_rename N'[Norm].[tmp_ms_xx_constraint_PK_Norm_n_CustomerCategory1]', N'PK_Norm_n_CustomerCategory', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [Norm].[n_CustomerCategory].[NCIDX_SysModifiedUTC_Norm_n_CustomerCategory]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_CustomerCategory]
    ON [Norm].[n_CustomerCategory]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_Planning]...';


GO
CREATE TABLE [Norm].[n_Planning] (
    [Planning_key]              INT            IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]       INT            NOT NULL,
    [SysDatetimeInsertedUTC]    DATETIME2 (0)  NOT NULL,
    [SysDatetimeUpdatedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeDeletedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeReprocessedUTC] DATETIME2 (0)  NULL,
    [SysModifiedUTC]            DATETIME2 (0)  NOT NULL,
    [SysIsInferred]             BIT            NOT NULL,
    [SysValidFromDateTime]      DATETIME2 (0)  NOT NULL,
    [SysSrcGenerationDateTime]  DATETIME2 (0)  NULL,
    [Planning_bkey]             INT            NOT NULL,
    [Scenario_bkey]             NVARCHAR (250) NULL,
    [Phase_bkey]                NVARCHAR (250) NULL,
    [CustomerCategory_bkey]     INT            NULL,
    [P01]                       NUMERIC (38)   NULL,
    [P02]                       NUMERIC (38)   NULL,
    [P03]                       NUMERIC (38)   NULL,
    [P04]                       NUMERIC (38)   NULL,
    [P05]                       NUMERIC (38)   NULL,
    [P06]                       NUMERIC (38)   NULL,
    [P07]                       NUMERIC (38)   NULL,
    [P08]                       NUMERIC (38)   NULL,
    [P09]                       NUMERIC (38)   NULL,
    [P10]                       NUMERIC (38)   NULL,
    [P11]                       NUMERIC (38)   NULL,
    [P12]                       NUMERIC (38)   NULL,
    CONSTRAINT [PK_Norm_n_Planning] PRIMARY KEY CLUSTERED ([Planning_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_Planning].[NCIDX_SysModifiedUTC_Norm_n_Planning]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_Planning]
    ON [Norm].[n_Planning]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Altering [Fact].[d_CustomerCategory]...';


GO
ALTER VIEW Fact.d_CustomerCategory
AS

SELECT	ncc.CustomerCategory_key
		, ncc.SysModifiedUTC
		, ncc.SysValidFromDateTime
		, ncc.SysSrcGenerationDateTime
		, ncc.SysDatetimeDeletedUTC
		, ncc.CustomerCategory_bkey
		, ncc.CustomerCategoryCode
		, ncc.CustomerCategory
		, ncc.SalesHierarchy
FROM	Norm.n_CustomerCategory ncc
GO
PRINT N'Altering [Norm].[vn_CustomerCategory]...';


GO
ALTER VIEW Norm.vn_CustomerCategory AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY CustomerCategory_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_CustomerCategory)
							SELECT  t1.CustomerCategory_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.CustomerCategory_bkey, t2.CustomerCategoryCode, t2.CustomerCategory, t2.SalesHierarchy, t2.SugarEnum_BusinessType_bkey, t2.SugarEnum_AreaType_bkey, t2.SugarEnum_OrderType_bkey, t2.OpportunityCustomerType, t2.SugarEnum_SubsidyArea_bkey, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.CustomerCategory_bkey = t1.CustomerCategory_bkey AND t2._isLast = 1
GO
PRINT N'Altering [Fact].[d_Opportunity]...';


GO
ALTER VIEW Fact.d_Opportunity
AS


WITH temp AS (
			SELECT	SugarEnum_OrderType_bkey = re.SugarEnum_bkey
			FROM	Norm.n_SugarEnum re
			WHERE	re.SugarEnum_bkey LIKE 'IP_BESTALLNING#BESTALLNINGSTYP_C%')
	, temp2 AS (SELECT		cc.CustomerCategory_key
							, cc.CustomerCategory_bkey
							, cc.CustomerCategory
							, cc.SalesHierarchy
							, SugarEnum_BusinessType_bkey = ISNULL(NULLIF(CAST(UPPER(LTRIM(RTRIM(ts1.SplitValue))) AS NVARCHAR(100)), ''), '%')
							, SugarEnum_AreaType_bkey = ISNULL(NULLIF(CAST(UPPER(LTRIM(RTRIM(cc.SugarEnum_AreaType_bkey))) AS NVARCHAR(100)), ''), '%')
							, SugarEnum_OrderType_bkey = ISNULL(NULLIF(COALESCE(t.SugarEnum_OrderType_bkey, t2.SugarEnum_OrderType_bkey, '%'), ''), '%')
							, SugarEnum_SubsidyArea_bkey = ISNULL(NULLIF(CAST(UPPER(LTRIM(RTRIM(ts2.SplitValue))) AS NVARCHAR(100)), ''), '%')
							, OpportunityCustomerType = ISNULL(NULLIF(CAST(UPPER(LTRIM(RTRIM(cc.OpportunityCustomerType))) AS NVARCHAR(100)), ''), '%')
				FROM		Norm.vn_CustomerCategory cc
				CROSS APPLY (SELECT * FROM	dbo.tvf_split(cc.SugarEnum_BusinessType_bkey, ',') ) ts1
				CROSS APPLY (SELECT * FROM	dbo.tvf_split(cc.SugarEnum_SubsidyArea_bkey, ',') ) ts2
				LEFT JOIN	temp t
							ON t.SugarEnum_OrderType_bkey	= REPLACE(cc.SugarEnum_OrderType_bkey, '=', '')
							AND cc.SugarEnum_OrderType_bkey LIKE ('=%')
				LEFT JOIN	temp t2
							ON t2.SugarEnum_OrderType_bkey	<> REPLACE(cc.SugarEnum_OrderType_bkey, '<>', '')
							AND cc.SugarEnum_OrderType_bkey LIKE ('<>%')
				WHERE		cc._isLast						= 1
							AND cc.CustomerCategory_bkey	<> -1)
SELECT		NO.Opportunity_key
			, NO.SysDatetimeDeletedUTC
			, NO.SysModifiedUTC
			, NO.SysIsInferred
			, NO.SysValidFromDateTime
			, NO.SysSrcGenerationDateTime
			, NO.Opportunity_bkey
			, NO.OpportunityName
			, Area_key = ISNULL(na.Area_key, -1)
			, Access_key = ISNULL(na3.Access_key, -1)
			, SalesOrder_key = ISNULL(vso.SalesOrder_key, -1)
			, SugarEnum_BusinessType_key = ISNULL(vse.SugarEnum_key, -1)
			, NO.AddressStreetAndNo
			, NO.AddressPostalCode
			, NO.AddressStreetName
			, NO.AddressStreetNo
			, NO.AddressCity
			, NO.AddressCountry
			, NO.Latitude
			, NO.Longitude
			, NO.Fastighetsbeteckningc
			, NO.AcquiredAccess
			, CustomerCategory_key = ISNULL(t2.CustomerCategory_key, -1)
FROM		Norm.n_Opportunity NO
LEFT JOIN	Norm.vn_Area na
			ON na.Area_bkey = NO.Area_bkey
			AND na._isLast = 1
LEFT JOIN	Norm.vn_Access na3
			ON na3.Access_bkey = NO.Access_bkey
			AND na3._isLast = 1
LEFT JOIN	Norm.vn_SugarEnum vse
			ON vse.SugarEnum_bkey = NO.SugarEnum_BusinessType_bkey
			AND vse._isLast = 1
OUTER APPLY (SELECT TOP 1 * FROM Norm.n_SalesOrder vso	WHERE vso.Opportunity_bkey = no.Opportunity_bkey ORDER BY vso.SysValidFromDateTime) vso
OUTER APPLY (	SELECT	TOP 1 *
				FROM	temp2 t2
				WHERE	NO.SugarEnum_BusinessType_bkey LIKE t2.SugarEnum_BusinessType_bkey
						AND na.SugarEnum_AreaType_bkey LIKE t2.SugarEnum_AreaType_bkey
						AND NO.CustomerType LIKE t2.OpportunityCustomerType
						AND na.SugarEnum_SubsidyArea_bkey LIKE t2.SugarEnum_SubsidyArea_bkey
						AND t2.CustomerCategory_bkey	<> -1
						AND ISNULL(vso.SugarEnum_OrderType_bkey, 'IP_BESTALLNING#BESTALLNINGSTYP_C#STANDARD') LIKE ISNULL(t2.SugarEnum_OrderType_bkey, '%')) t2
GO
PRINT N'Altering [Fact].[f_Penetration]...';


GO
ALTER VIEW Fact.f_Penetration
AS

-- When the transaction is deleted the values is set to zero
-- Suger doesn't produce a salesorder when a oppertunity is accuired even though the transactions is a activated customer.

SELECT  vo.SysSrcGenerationDateTime
        , vo.SysValidFromDateTime
        , vo.SysModifiedUTC
        , vo.SysDatetimeDeletedUTC
        , Calendar_key    = CAST(CONVERT(NVARCHAR(8), vo.SysSrcGenerationDateTime, 112) AS INT)
        , Penetration_key = CAST('Opp#' + vo.Opportunity_bkey AS NVARCHAR(250))
        , vo.Opportunity_key
        , na.Area_key
        , np.Project_key
        , SalesOrder_key  = -1
        , Customer_key    = -1
        , na2.Access_key
        , NoOfHP          = IIF(vo.AcquiredAccess = 'Yes', 0, 1) * IIF(vo.SysDatetimeDeletedUTC IS NULL, 1, 0)
        , NoOfHC          = IIF(vo.AcquiredAccess = 'Yes', 1, 0) * IIF(vo.SysDatetimeDeletedUTC IS NULL, 1, 0)
        , NoOfInstalled   = 0
FROM    Norm.vn_Opportunity vo
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Area na WHERE na.Area_bkey = vo.Area_bkey ORDER BY na.SysValidFromDateTime DESC) na
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Project np WHERE np.Project_bkey = na.Project_bkey ORDER BY np.SysValidFromDateTime DESC) np
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Access na2 WHERE na2.Access_bkey = vo.Access_bkey ORDER BY na2.SysValidFromDateTime DESC) na2
WHERE vo._isLast = 1 AND vo.Opportunity_key <> -1 AND vo.Opportunity_bkey NOT IN (SELECT vso.Opportunity_bkey FROM Norm.n_SalesOrder vso WHERE vso.Opportunity_bkey <> '-1' AND vso.SugarEnum_DeliveryStatus_bkey  NOT IN ('IP_BESTALLNING#STATUS_LEVERANS_C#ANGRAT', 'IP_BESTALLNING#STATUS_LEVERANS_C#ANNULLERAD', 'IP_BESTALLNING#STATUS_LEVERANS_C#EJVALIDERAD'))
UNION ALL
SELECT  nso.SysSrcGenerationDateTime
        , nso.SysValidFromDateTime
        , nso.SysModifiedUTC
        , nso.SysDatetimeDeletedUTC
        , Calendar_key    = CAST(CONVERT(NVARCHAR(8), nso.SysSrcGenerationDateTime, 112) AS INT)
        , Penetration_key = CAST('SO#' + nso.SalesOrder_bkey AS NVARCHAR(250))
        , no.Opportunity_key
        , na.Area_key
        , np.Project_key
        , nso.SalesOrder_key
        , Customer_key    = nso.SalesOrder_key
        , na2.Access_key
        , NoOfHP          = -1 * IIF(nso.SysDatetimeDeletedUTC IS NULL, 1, 0) * IIF(nso.SugarEnum_DeliveryStatus_bkey IN ('IP_BESTALLNING#STATUS_LEVERANS_C#ANGRAT', 'IP_BESTALLNING#STATUS_LEVERANS_C#ANNULLERAD', 'IP_BESTALLNING#STATUS_LEVERANS_C#EJVALIDERAD'), 0, 1)
        , NoOfHC          = IIF(nso.SysDatetimeDeletedUTC IS NULL, 1, 0) * IIF(nso.SugarEnum_DeliveryStatus_bkey IN ('IP_BESTALLNING#STATUS_LEVERANS_C#ANGRAT', 'IP_BESTALLNING#STATUS_LEVERANS_C#ANNULLERAD', 'IP_BESTALLNING#STATUS_LEVERANS_C#EJVALIDERAD'), 0, 1)
        , NoOfInstalled   = 0
FROM    Norm.vn_SalesOrder  nso
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Opportunity no WHERE no.Opportunity_bkey = nso.Opportunity_bkey ORDER BY no.SysValidFromDateTime DESC) no
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Area na WHERE na.Area_bkey = no.Area_bkey ORDER BY na.SysValidFromDateTime DESC) na
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Project np WHERE np.Project_bkey = na.Project_bkey ORDER BY np.SysValidFromDateTime DESC) np
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Access na2 WHERE na2.Access_bkey = no.Access_bkey ORDER BY na2.SysValidFromDateTime DESC) na2
WHERE    nso._isLast =1 AND  nso.SalesOrder_bkey <> '-1'
UNION ALL
SELECT  vo.SysSrcGenerationDateTime
        , na2.SysValidFromDateTime
        , na2.SysModifiedUTC
        , na2.SysDatetimeDeletedUTC
        , Calendar_key    = CAST(CONVERT(NVARCHAR(8), na2.Calenar_Installed_bkey, 112) AS INT)		
        , Penetration_key = CAST('Acc#' + CAST(na2.Access_bkey AS NVARCHAR(100)) AS NVARCHAR(250))
        , vo.Opportunity_key
        , va.Area_key
        , np2.Project_key
        , SalesOrder_key = ISNULL(vso.SalesOrder_key, -1)
		, Customer_key    = ISNULL(vso.SalesOrder_key, -1)
        , na2.Access_key
        , NoOfHP          = 0
        , NoOfHC          = 0
        , NoOfInstalled   = IIF(na2.SysDatetimeDeletedUTC IS NULL, 1, 0)
FROM    Norm.vn_Access na2
LEFT JOIN Norm.vn_Opportunity vo ON vo.Opportunity_bkey = na2.Opportunity_bkey AND vo._isLast = 1
LEFT JOIN Norm.vn_Area va ON va.Area_bkey = vo.Area_bkey AND va._isLast = 1
LEFT JOIN Norm.vn_Project np2 ON np2.Project_bkey = va.Project_bkey AND np2._isLast = 1
OUTER APPLY (SELECT TOP 1 * FROM Norm.n_SalesOrder nso2 WHERE vo.Opportunity_bkey = nso2.Opportunity_bkey AND nso2.Opportunity_bkey <> '-1' ORDER BY nso2.SysValidFromDateTime DESC) vso
WHERE na2.Calenar_Installed_bkey IS NOT NULL AND na2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_Planning]...';


GO
CREATE VIEW Norm.vn_Planning AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY Planning_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_Planning)
							SELECT  t1.Planning_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.Planning_bkey, t2.Scenario_bkey, t2.Phase_bkey, t2.CustomerCategory_bkey, t2.P01, t2.P02, t2.P03, t2.P04, t2.P05, t2.P06, t2.P07, t2.P08, t2.P09, t2.P10, t2.P11, t2.P12, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.Planning_bkey = t1.Planning_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Fact].[f_Planning]...';


GO
CREATE VIEW Fact.f_Planning
AS

SELECT	unpvt.SysDatetimeDeletedUTC
		, unpvt.SysModifiedUTC
		, unpvt.SysValidFromDateTime
		, Planning_key = CAST(unpvt.Planning_key AS NVARCHAR(100)) + '#' + unpvt.PlanningPeriod
		, Calendar_key = CAST(CONVERT(NVARCHAR(8), EOMONTH(CAST(LEFT(Scenario_bkey, 4) + RIGHT(PlanningPeriod, 2) + '01'AS DATE)), 112) AS INT)
		, vcc.CustomerCategory_key		
		, Scenario_bkey		
		, Phase_bkey		
		, PlanningPeriod
		, Amount		
FROM	(	SELECT	np.Planning_key
					, np.SysDatetimeDeletedUTC
					, np.SysModifiedUTC
					, np.SysValidFromDateTime
					, np.Planning_bkey
					, np.Scenario_bkey
					, np.Phase_bkey
					, np.CustomerCategory_bkey
					, np.P01
					, np.P02
					, np.P03
					, np.P04
					, np.P05
					, np.P06
					, np.P07
					, np.P08
					, np.P09
					, np.P10
					, np.P11
					, np.P12
			FROM	Norm.vn_Planning np
			WHERE	np.Planning_bkey <> '-1') p 
			UNPIVOT(Amount FOR PlanningPeriod IN(P01, P02, P03, P04, P05, P06, P07, P08, P09, P10, P11, P12))unpvt
INNER JOIN Norm.vn_CustomerCategory vcc ON vcc.CustomerCategory_bkey = unpvt.CustomerCategory_bkey AND vcc._isLast = 1
GO
PRINT N'Update complete.';


GO
