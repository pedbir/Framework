/*
Deployment script for DWH_1_Raw

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DropboxPath "C:\Users\pedram.birounvand\Dropbox (EQT AB)\DataWarehouse\DEV"
:setvar Environment "DEV"
:setvar DatabaseName "DWH_1_Raw"
:setvar DefaultFilePrefix "DWH_1_Raw"
:setvar DefaultDataPath "E:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "E:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY ON,
        DB_CHAINING ON 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [Audit]...';


GO
CREATE SCHEMA [Audit]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Logging]...';


GO
CREATE SCHEMA [Logging]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Audit].[DataError]...';


GO
CREATE TABLE [Audit].[DataError] (
    [DataError_key]       INT            IDENTITY (1, 1) NOT NULL,
    [DateTimeErrorUTC]    DATETIME       NOT NULL,
    [PackageName]         NVARCHAR (100) NOT NULL,
    [SysExecutionLog_key] INT            NOT NULL,
    [SourceTableName]     NVARCHAR (100) NOT NULL,
    [ErrorDescription]    NVARCHAR (255) NOT NULL,
    [RowData]             XML            NULL,
    [FlatFileData]        NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Audit_DataError] PRIMARY KEY CLUSTERED ([DataError_key] ASC)
);


GO
PRINT N'Creating [Logging].[PackageDestinationTable]...';


GO
CREATE TABLE [Logging].[PackageDestinationTable] (
    [PackageDestinationTableID] INT              IDENTITY (1, 1) NOT NULL,
    [PackageID]                 UNIQUEIDENTIFIER NULL,
    [PackageName]               VARCHAR (250)    NULL,
    [SourceTableCatalog]        VARCHAR (250)    NULL,
    [SourceSchemaName]          VARCHAR (250)    NULL,
    [SourceTableName]           VARCHAR (250)    NULL,
    [DestinationTableCatalog]   VARCHAR (250)    NOT NULL,
    [DestinationSchemaName]     VARCHAR (250)    NOT NULL,
    [DestinationTableName]      VARCHAR (250)    NOT NULL,
    [SsisIncrementalLoad]       BIT              NOT NULL,
    [SsisLoadType]              VARCHAR (20)     NOT NULL,
    [DateTimeCreatedUTC]        DATETIME         NULL,
    [DateTimeUpdatedUTC]        DATETIME         NULL
);


GO
PRINT N'Creating [Logging].[PackageDestinationTable].[CI_PackageDestinationTable_PackageName]...';


GO
CREATE CLUSTERED INDEX [CI_PackageDestinationTable_PackageName]
    ON [Logging].[PackageDestinationTable]([PackageName] ASC);


GO
PRINT N'Creating [Logging].[PackageDestinationTable].[IX_Loggning_PackageDestinationTable_PackageID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Loggning_PackageDestinationTable_PackageID]
    ON [Logging].[PackageDestinationTable]([PackageID] ASC)
    INCLUDE([DestinationTableCatalog], [DestinationSchemaName], [DestinationTableName]);


GO
PRINT N'Creating [Logging].[PackageFileExecution]...';


GO
CREATE TABLE [Logging].[PackageFileExecution] (
    [PackageFileExecutionID] INT              IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]    INT              NOT NULL,
    [SysFileName]            NVARCHAR (250)   NOT NULL,
    [ExecutionEnd]           DATETIME         NOT NULL,
    [PackageId]              UNIQUEIDENTIFIER NULL,
    [PackageVersionId]       UNIQUEIDENTIFIER NULL,
    [ExecutionID]            UNIQUEIDENTIFIER NOT NULL,
    [Status]                 NVARCHAR (15)    NULL,
    [RowsRead]               INT              NULL,
    [RowsInserted]           INT              NULL,
    [RowsUpdated]            INT              NULL,
    [RowsDeleted]            INT              NULL,
    [RowsIgnored]            INT              NULL,
    [RowsError]              INT              NULL
);


GO
PRINT N'Creating [Logging].[PackageFileExecution].[UCI_Logging_PackageFileExecution]...';


GO
CREATE UNIQUE CLUSTERED INDEX [UCI_Logging_PackageFileExecution]
    ON [Logging].[PackageFileExecution]([SysExecutionLog_key] DESC, [SysFileName] DESC, [ExecutionEnd] DESC);


GO
PRINT N'Creating [Logging].[PackageFileExecution].[IX_Logging_PackageFileExecution_ExecutionID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Logging_PackageFileExecution_ExecutionID]
    ON [Logging].[PackageFileExecution]([ExecutionID] ASC)
    INCLUDE([RowsRead], [RowsInserted], [RowsUpdated], [RowsDeleted], [RowsIgnored], [RowsError]);


GO
PRINT N'Creating [Logging].[PackageExecution]...';


GO
CREATE TABLE [Logging].[PackageExecution] (
    [ExecutionID]                 UNIQUEIDENTIFIER NOT NULL,
    [PackageVersionID]            UNIQUEIDENTIFIER NOT NULL,
    [ExecutionStart]              DATETIME         NOT NULL,
    [ExecutionEnd]                DATETIME         NULL,
    [MachineName]                 VARCHAR (50)     NOT NULL,
    [UserName]                    VARCHAR (50)     NOT NULL,
    [InteractiveMode]             BIT              NOT NULL,
    [ProductVersion]              VARCHAR (15)     NULL,
    [RowsRead]                    BIGINT           NULL,
    [RowsInserted]                BIGINT           NULL,
    [RowsUpdated]                 BIGINT           NULL,
    [RowsDeleted]                 BIGINT           NULL,
    [RowsIgnored]                 BIGINT           NULL,
    [RowsError]                   BIGINT           NULL,
    [Status]                      VARCHAR (15)     NOT NULL,
    [SysExecutionLog_key]         INT              IDENTITY (1, 1) NOT NULL,
    [SysBatchLogExecutionLog_key] INT              NULL,
    CONSTRAINT [PK_PackageExecution] PRIMARY KEY CLUSTERED ([ExecutionID] ASC)
);


GO
PRINT N'Creating [Logging].[PackageVersion]...';


GO
CREATE TABLE [Logging].[PackageVersion] (
    [VersionID]           UNIQUEIDENTIFIER NOT NULL,
    [PackageID]           UNIQUEIDENTIFIER NOT NULL,
    [VersionMajor]        SMALLINT         NOT NULL,
    [VersionMinor]        SMALLINT         NOT NULL,
    [VersionBuild]        INT              NOT NULL,
    [VersionComments]     VARCHAR (255)    NULL,
    [CreationDate]        DATE             NULL,
    [CreatorName]         VARCHAR (255)    NULL,
    [CreatorComputerName] VARCHAR (50)     NULL,
    [LocaleID]            INT              NOT NULL,
    CONSTRAINT [PK_PackageVersion] PRIMARY KEY CLUSTERED ([VersionID] ASC)
);


GO
PRINT N'Creating [Logging].[Package]...';


GO
CREATE TABLE [Logging].[Package] (
    [PackageID]          UNIQUEIDENTIFIER NOT NULL,
    [PackageName]        VARCHAR (150)    NOT NULL,
    [PackageDescription] VARCHAR (250)    NULL,
    CONSTRAINT [PK_Package] PRIMARY KEY CLUSTERED ([PackageID] ASC)
);


GO
PRINT N'Creating [Logging].[ExecutionEvent]...';


GO
CREATE TABLE [Logging].[ExecutionEvent] (
    [ExecutionID]      UNIQUEIDENTIFIER NOT NULL,
    [SourceID]         UNIQUEIDENTIFIER NOT NULL,
    [SourceName]       VARCHAR (150)    NULL,
    [EventType]        VARCHAR (15)     NOT NULL,
    [EventCode]        VARCHAR (15)     NULL,
    [EventDateTime]    DATETIME         NOT NULL,
    [EventDescription] VARCHAR (1000)   NULL
);


GO
PRINT N'Creating [dbo].[SSISConfigurations]...';


GO
CREATE TABLE [dbo].[SSISConfigurations] (
    [ssisConfigurationId] INT            IDENTITY (1, 1) NOT NULL,
    [ConfigurationFilter] VARCHAR (255)  NOT NULL,
    [ConfiguredValue]     NVARCHAR (255) NULL,
    [PackagePath]         NVARCHAR (255) NOT NULL,
    [ConfiguredValueType] NVARCHAR (20)  NOT NULL
);


GO
PRINT N'Creating [Logging].[DF_PackageLog_PackageExecutionStart]...';


GO
ALTER TABLE [Logging].[PackageExecution]
    ADD CONSTRAINT [DF_PackageLog_PackageExecutionStart] DEFAULT (getdate()) FOR [ExecutionStart];


GO
PRINT N'Creating [Logging].[DF_PackageLog_EventDateTime]...';


GO
ALTER TABLE [Logging].[ExecutionEvent]
    ADD CONSTRAINT [DF_PackageLog_EventDateTime] DEFAULT (getdate()) FOR [EventDateTime];


GO
PRINT N'Creating [Logging].[FK_PackageExecution_PackageVersion]...';


GO
ALTER TABLE [Logging].[PackageExecution] WITH NOCHECK
    ADD CONSTRAINT [FK_PackageExecution_PackageVersion] FOREIGN KEY ([PackageVersionID]) REFERENCES [Logging].[PackageVersion] ([VersionID]);


GO
PRINT N'Creating [Logging].[FK_PackageVersion_Package]...';


GO
ALTER TABLE [Logging].[PackageVersion] WITH NOCHECK
    ADD CONSTRAINT [FK_PackageVersion_Package] FOREIGN KEY ([PackageID]) REFERENCES [Logging].[Package] ([PackageID]);


GO
PRINT N'Creating [Logging].[FK_ExecutionEvent_Execution]...';


GO
ALTER TABLE [Logging].[ExecutionEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_ExecutionEvent_Execution] FOREIGN KEY ([ExecutionID]) REFERENCES [Logging].[PackageExecution] ([ExecutionID]);


GO
PRINT N'Creating [Logging].[CH_PackageLog_PackageExecutionEnd]...';


GO
ALTER TABLE [Logging].[PackageExecution] WITH NOCHECK
    ADD CONSTRAINT [CH_PackageLog_PackageExecutionEnd] CHECK ([ExecutionEnd]>=[ExecutionStart]);


GO
PRINT N'Creating [Logging].[PackageExecutionV]...';


GO


CREATE VIEW Logging.PackageExecutionV
AS
SELECT p.PackageID
       , p.PackageName
       , pv.VersionID
       , pe.ExecutionID
       , pe.ExecutionStart
       , pe.ExecutionEnd
       , Duration = CASE WHEN pe.ExecutionStart < '1900-01-01' THEN NULL ELSE DATEDIFF(SECOND, pe.ExecutionStart, pe.ExecutionEnd) END	   
       , pe.RowsRead
       , pe.RowsInserted
       , pe.RowsUpdated
       , pe.RowsDeleted
       , pe.RowsIgnored
       , pe.RowsError
       , pe.Status
       , pe.MachineName
       , pe.UserName
       , pe.SysExecutionLog_key
       , pe.SysBatchLogExecutionLog_key
       , SourceView = CASE WHEN  pdt.SourceTableCatalog = '' THEN NULL ELSE  pdt.SourceTableCatalog + CASE WHEN pdt.SsisLoadType = 'FlatFile' THEN '\' ELSE '.' END + pdt.SourceSchemaName + CASE WHEN pdt.SsisLoadType = 'FlatFile' THEN '\' ELSE '.' END + pdt.SourceTableName END
       , DestinationTable = CASE WHEN pdt.DestinationTableCatalog  = '' THEN NULL ELSE pdt.DestinationTableCatalog + '.' + pdt.DestinationSchemaName + '.' + pdt.DestinationTableName END	   
	   , SsisIncrementalLoad = CASE WHEN pdt.SsisIncrementalLoad = 1 THEN 'Y' ELSE 'N' END
FROM   Logging.PackageExecution pe
INNER JOIN Logging.PackageVersion pv
        ON pe.PackageVersionID = pv.VersionID
INNER JOIN Logging.Package p
        ON pv.PackageID        = p.PackageID
INNER JOIN Logging.PackageDestinationTable pdt
        ON pdt.PackageID       = pv.PackageID
GO
PRINT N'Creating [Audit].[LogDataError]...';


GO

CREATE PROCEDURE [Audit].[LogDataError]
	@DWID int,	
	@PackageName nvarchar(100), 	
	@SysExecutionLog_key int,
	@SourceTableName nvarchar(100),
	@ErrorDescription nvarchar(100) = '',
	@RowData xml = NULL
AS

	INSERT INTO Audit.DataError(DateTimeErrorUTC, PackageName, SysExecutionLog_key, SourceTableName, ErrorDescription, RowData)
	VALUES (GETUTCDATE(), @PackageName, @SysExecutionLog_key, @SourceTableName, @ErrorDescription, @RowData)
	
	RETURN
GO
PRINT N'Creating [Logging].[LogPackageFileExecutionEnd]...';


GO

CREATE PROC [Logging].[LogPackageFileExecutionEnd]
    @PackageID UNIQUEIDENTIFIER
    , @ExecutionID UNIQUEIDENTIFIER    
    , @RowsRead BIGINT
    , @RowsInserted BIGINT
    , @RowsUpdated BIGINT
    , @RowsDeleted BIGINT
    , @RowsIgnored BIGINT
    , @RowsError BIGINT
    , @SysFileName NVARCHAR(250)   
    , @SysExecutionLog_key INT
	, @PackageVersionId UNIQUEIDENTIFIER
AS
DECLARE @Status AS VARCHAR(30)

IF EXISTS (   SELECT TOP 1 *
              FROM   Logging.ExecutionEvent
              WHERE  EventType  = 'OnError'
                AND  ExecutionID = @ExecutionID)
BEGIN
    SET @Status = 'Failure'
END
ELSE
    SET @Status = 'Success'


	INSERT INTO Logging.PackageFileExecution (ExecutionID	                     
	                                  , ExecutionEnd
	                                  , SysFileName
	                                  , Status	                  
	                                  , RowsRead
	                                  , RowsInserted
	                                  , RowsUpdated
	                                  , RowsDeleted
	                                  , RowsIgnored
	                                  , RowsError
	                                  , SysExecutionLog_key
									  , PackageVersionId
									  , PackageId)
	VALUES (@ExecutionID 	        
	        , GETUTCDATE() 
	        , @SysFileName 
	        , @Status 	        
	        , @RowsRead 
	        , @RowsInserted 
	        , @RowsUpdated 
	        , @RowsDeleted 
	        , @RowsIgnored 
	        , @RowsError 
	        , @SysExecutionLog_key 
			, @PackageVersionId
			, @PackageID
	    )
GO
PRINT N'Creating [Logging].[LogPackageStart]...';


GO


/*
**	Logs the start of a SSIS package
*/
CREATE PROC [Logging].[LogPackageStart]
    @PackageID UNIQUEIDENTIFIER
    , @PackageName VARCHAR(150)
    , @PackageDesc VARCHAR(250) = NULL
    , @VersionID UNIQUEIDENTIFIER
    , @VersionMajor SMALLINT
    , @VersionMinor SMALLINT
    , @VersionBuild INT
    , @VersionComments VARCHAR(250) = NULL
    , @CreationDate DATE
    , @CreatorName VARCHAR(50)
    , @CreatorComputerName VARCHAR(30)
    , @LocaleID INT
    , @ExecutionID UNIQUEIDENTIFIER
    , @ExecutionStartTime DATETIME
    , @ExecutionMachineName VARCHAR(30)
    , @ExecutionUserName VARCHAR(50)
    , @ProductVersion VARCHAR(15)
    , @InteractiveMode BIT
    , @SysBatchLogExecutionLog_key INT
    , @SysExecutionLog_key INT OUTPUT
	, @SourceTableCatalog VARCHAR(128) = ''
    , @SourceSchemaName VARCHAR(128)  = ''
    , @SourceTableName VARCHAR(128)  = ''
    , @DestinationTableCatalog VARCHAR(128) = ''
    , @DestinationSchemaName VARCHAR(128)  = ''
    , @DestinationTableName VARCHAR(128)  = ''
    , @SsisIncrementalLoad BIT  = 0
    , @SsisLoadType VARCHAR(20)  = ''
AS

	SET NOCOUNT ON

	-- Check if package already exist in DB, otehrwise add it to Package table
	IF NOT EXISTS (SELECT TOP 1 * FROM Package WHERE PackageID = @PackageID)
		INSERT INTO [Logging].Package 
			(PackageID, 
			 PackageName, 
			 PackageDescription)
		VALUES (@PackageID, @PackageName, @PackageDesc)
	
	ELSE
	-- Update name and description of the package if they are different
		UPDATE [Logging].Package 
		SET PackageName = @PackageName, 
			PackageDescription = @PackageDesc
		WHERE PackageID = @PackageID AND
			(PackageName <> @PackageName OR PackageDescription <> @PackageDesc)	


	-- Check if version already exist in DB, otehrwise add it to PackageVersion table
	IF NOT EXISTS (SELECT TOP 1 * FROM PackageVersion WHERE VersionID = @VersionID)
		INSERT INTO [Logging].PackageVersion 
			(VersionID, PackageID, VersionMajor, 
			 VersionMinor, VersionBuild, VersionComments,
			 CreationDate, CreatorName, CreatorComputerName, LocaleID)
		VALUES (@VersionID, @PackageID, @VersionMajor, 
			@VersionMinor, @VersionBuild, @VersionComments,
			@CreationDate, @CreatorName, @CreatorComputerName, @LocaleID)
	
	-- Log destination metadata
	IF NOT EXISTS (SELECT TOP 1 * FROM Logging.PackageDestinationTable pdt WHERE pdt.PackageName = @PackageName)
		INSERT INTO Logging.PackageDestinationTable (PackageID, SourceTableCatalog, SourceSchemaName, SourceTableName, DestinationTableCatalog, DestinationSchemaName, DestinationTableName, SsisIncrementalLoad, SsisLoadType, DateTimeCreatedUTC, PackageName)
		VALUES ( @PackageID ,@SourceTableCatalog ,@SourceSchemaName ,@SourceTableName ,@DestinationTableCatalog ,@DestinationSchemaName ,@DestinationTableName ,@SsisIncrementalLoad ,@SsisLoadType, GETUTCDATE(), @PackageName)
	ELSE
		UPDATE Logging.PackageDestinationTable
		SET    SourceTableCatalog = @SourceTableCatalog
			   , SourceSchemaName = @SourceSchemaName
			   , SourceTableName = @SourceTableName
			   , DestinationTableCatalog = @DestinationTableCatalog
			   , DestinationSchemaName = @DestinationSchemaName
			   , DestinationTableName = @DestinationTableName
			   , SsisIncrementalLoad = @SsisIncrementalLoad
			   , SsisLoadType = @SsisLoadType
			   , PackageID = @PackageID
			   , DateTimeUpdatedUTC = GETUTCDATE()
		WHERE  PackageName                = @PackageName
		  AND  (   SourceTableCatalog      <> @SourceTableCatalog
			  OR   SourceSchemaName        <> @SourceSchemaName
			  OR   SourceTableName         <> @SourceTableName
			  OR   DestinationTableCatalog <> @DestinationTableCatalog
			  OR   DestinationSchemaName   <> @DestinationSchemaName
			  OR   DestinationTableName    <> @DestinationTableName
			  OR   SsisIncrementalLoad     <> @SsisIncrementalLoad
			  OR   SsisLoadType            <> @SsisLoadType
			  OR   PackageID               <> @PackageID)


		-- Log the actual execution of this package
		INSERT INTO [Logging].[PackageExecution]
			   (ExecutionID
			   ,PackageVersionID
			   ,ExecutionStart
			   ,MachineName
			   ,UserName
			   ,ProductVersion
			   ,InteractiveMode
			   ,[Status]
			   ,SysBatchLogExecutionLog_key)
		 VALUES
			   (@ExecutionID
			   ,@VersionID
			   ,GETUTCDATE()
			   ,@ExecutionMachineName
			   ,@ExecutionUserName
			   ,@ProductVersion
			   ,@InteractiveMode
			   ,'In progress'
			   ,@SysBatchLogExecutionLog_key)

SET @SysExecutionLog_key = @@IDENTITY
RETURN @SysExecutionLog_key
GO
PRINT N'Creating [Logging].[LogPackageEnd]...';


GO


/*
**	Logs the end of a SSIS package execution
*/
CREATE PROC [Logging].[LogPackageEnd]
	@PackageID uniqueidentifier,
	@ExecutionID uniqueidentifier,
	@ExecutionEndTime datetime = NULL,
	@RowsRead bigint,
    @RowsInserted bigint,
    @RowsUpdated bigint,
    @RowsDeleted bigint,
    @RowsIgnored bigint,
    @RowsError bigint
AS
	
	DECLARE @Status as varchar(30)
	
	IF @ExecutionEndTime IS NULL
		SET @ExecutionEndTime = CURRENT_TIMESTAMP


	IF EXISTS (SELECT TOP 1 * FROM [Logging].ExecutionEvent
				WHERE EventType = 'OnError' AND
				ExecutionID = @ExecutionID)
	BEGIN
		SET @Status = 'Failure'
	END
	ELSE
		SET @Status = 'Success'

	IF EXISTS (SELECT TOP 1 * FROM [Logging].PackageFileExecution pfe WHERE pfe.ExecutionID = @ExecutionID)
		SELECT   @RowsDeleted = SUM(pfe.RowsDeleted)
				 , @RowsError = SUM(pfe.RowsError)
				 , @RowsIgnored = SUM(pfe.RowsIgnored)
				 , @RowsInserted = SUM(pfe.RowsInserted)
				 , @RowsRead = SUM(pfe.RowsRead)
				 , @RowsUpdated = SUM(pfe.RowsUpdated)
		FROM     Logging.PackageFileExecution pfe
		WHERE    pfe.ExecutionID = @ExecutionID
		GROUP BY pfe.ExecutionID


	UPDATE [Logging].PackageExecution
	SET ExecutionEnd = GETUTCDATE(), 
		[Status] = @Status,
		RowsRead = @RowsRead, 
		RowsInserted = @RowsInserted, 
		RowsUpdated = @RowsUpdated, 
		RowsDeleted = @RowsDeleted, 
		RowsIgnored = @RowsIgnored, 
		RowsError = @RowsError
	WHERE ExecutionID = @ExecutionID
GO
PRINT N'Creating [Logging].[LogExecutionEvent]...';


GO


/*
**	Logs an SSIS package execution event
*/
create PROC [Logging].[LogExecutionEvent]
	--@PackageID uniqueidentifier,
	@ExecutionID uniqueidentifier,
	@EventDateTime datetime,
	@EventType varchar(15),
	@EventCode varchar(15),
	@EventDescription varchar(1000),
	@SourceID uniqueidentifier,
	@SourceName varchar(150)
AS

	INSERT INTO [Logging].[ExecutionEvent]
           ([ExecutionID]
           ,[EventDateTime]
           ,[EventType]
           ,[EventCode]
           ,[EventDescription]
           ,[SourceID]
           ,[SourceName])
     VALUES
           (@ExecutionID
           ,@EventDateTime
           ,@EventType
           ,@EventCode
           ,@EventDescription
           ,@SourceID
           ,@SourceName)
GO
PRINT N'Creating [dbo].[GetPackageLastExecutedTime]...';


GO

-- =============================================
-- Author:			Pedram Birounvand
-- Create date:		2017-08-25
-- Modified date:	
--
-- Description: 
--		Returns a datetime for last successful execution for a package. 
--		When the destination table is empty, return datetime 1900-01-01 so that all transactions are extracted.

--		Example:	EXECUTE [DWH_0_Admin].[dbo].[GetPackageLastExecutedTime] @PackageGUID = '6F76B0D6-BD0B-4A14-BC56-962A24D2E4CD', @MinutesAdd = -10

-- =============================================
CREATE PROC [dbo].[GetPackageLastExecutedTime] 
	@PackageGUID nvarchar(50),
	@MinutesAdd int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @DestinationTableFullPath NVARCHAR(100) = 
		(
		SELECT '[' + pdt.DestinationTableCatalog + '].[' + pdt.DestinationSchemaName + '].[' + pdt.DestinationTableName + ']'		
		FROM Logging.PackageDestinationTable pdt
		WHERE pdt.PackageID = @PackageGUID
		AND LEN(pdt.DestinationTableCatalog) > 0 AND LEN(pdt.DestinationTableName) > 0 AND LEN(pdt.DestinationSchemaName) > 0
		)
	
	
	IF @DestinationTableFullPath IS NULL
		SELECT CAST('1900-01-01' AS DATETIME)
	ELSE
		DECLARE @SQL NVARCHAR(max) = '
			IF NOT EXISTS (SELECT TOP 1 * FROM '+@DestinationTableFullPath+')
				SELECT PackageLastExecuted =  CAST(''1900-01-01'' as Datetime)
			ELSE
				SELECT
					PackageLastExecuted = ISNULL(DATEADD(MINUTE, '+CAST(@MinutesAdd AS NVARCHAR(100))+', MAX(ExecutionStart)), ''1899-12-31'') 
				FROM [Logging].[PackageExecutionV] 
				WHERE 
					PackageID = '''+@PackageGUID+''' AND
					[Status] = ''Success'' AND 
					RowsRead > 0'
		PRINT @SQL
		EXEC (@SQL)


END
GO
PRINT N'Creating [dbo].[LoadBatchLogInsert]...';


GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[LoadBatchLogInsert]
@SysBatchLogExecutionLog_key int output,
@LoadGroupPackageID uniqueidentifier, 
@LoadGroupExecutionID uniqueidentifier,
@LoadGroupPackageName nvarchar(100),
@MainID int



AS

INSERT INTO Logging.LoadBatchLog
(
	LoadGroupPackageID, 
	LoadGroupPackageName, 
	LoadGroupExecutionID, 
	MainID,
	StartTime
	
)
values
(
	@LoadGroupPackageID, 
	@LoadGroupPackageName, 
	@LoadGroupExecutionID,
	@MainID , 
	GetDate() 
	
)

SET @SysBatchLogExecutionLog_key = @@IDENTITY
RETURN @SysBatchLogExecutionLog_key
GO
PRINT N'Creating [dbo].[LoadBatchLogUpdate]...';


GO


CREATE PROCEDURE [dbo].[LoadBatchLogUpdate]
	@SysExecutionLog_key int	
AS
declare @status nvarchar(20)

UPDATE 
	Logging.LoadBatchLog
SET
	EndTime = GetDate(),
	Duration = DateDiff(s, StartTime, GetDate())
WHERE SysExecutionLog_key = @SysExecutionLog_key
GO
PRINT N'Creating [dbo].[RunDwJob]...';


GO

CREATE PROC RunDwJob @job_name NVARCHAR(100)
AS
set XACT_ABORT on 
set NOCOUNT ON

-- EXEC RunDwJob 'Test'

DECLARE @ActiveJobs NVARCHAR(100) = (SELECT STUFF((   SELECT    ', ' + sj.name
                                                      FROM      msdb..sysjobactivity aj
                                                      JOIN      msdb..sysjobs        sj
                                                        ON sj.job_id = aj.job_id
                                                      WHERE     aj.stop_execution_date IS NULL -- job hasn't stopped running
                                                        AND     aj.start_execution_date IS NOT NULL -- job is currently running   
                                                        AND     NOT EXISTS ( -- make sure this is the most recent run
                                                                               SELECT   1
                                                                               FROM     msdb..sysjobactivity new
                                                                               WHERE    new.job_id            = aj.job_id
                                                                                 AND    new.start_execution_date > aj.start_execution_date)
                                                      FOR XML PATH(''))
                                                  , 1
                                                  , 1
                                                  , ''))


IF LEN(ISNULL(@ActiveJobs, '')) > 0
BEGIN
	SELECT ISNULL(@ActiveJobs, '') + ' is in progress. Please wait until all jobs has completed before you trigger a new load.' AS response
	RETURN
END

IF @job_name <> ''
	EXEC msdb.dbo.sp_start_job  @job_name


SELECT ' Loading of ' + @job_name + ' in Progress...' AS response
GO
PRINT N'Creating [Logging].[PackageExecution].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'En exekvering av ett paket med en viss version.', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageExecution';


GO
PRINT N'Creating [Logging].[PackageExecution].[ExecutionID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Primärnyckel', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageExecution', @level2type = N'COLUMN', @level2name = N'ExecutionID';


GO
PRINT N'Creating [Logging].[PackageExecution].[PackageVersionID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Främmande nyckel till PackageVersion ', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageExecution', @level2type = N'COLUMN', @level2name = N'PackageVersionID';


GO
PRINT N'Creating [Logging].[PackageExecution].[ExecutionStart].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Tidpunkt för start på exekveringen', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageExecution', @level2type = N'COLUMN', @level2name = N'ExecutionStart';


GO
PRINT N'Creating [Logging].[PackageExecution].[ExecutionEnd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Tidpunkt för slut på exekveringen', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageExecution', @level2type = N'COLUMN', @level2name = N'ExecutionEnd';


GO
PRINT N'Creating [Logging].[PackageExecution].[MachineName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namn på den maskin där paketet körde', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageExecution', @level2type = N'COLUMN', @level2name = N'MachineName';


GO
PRINT N'Creating [Logging].[PackageExecution].[UserName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Användarnamn på den användare som startade körningen', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageExecution', @level2type = N'COLUMN', @level2name = N'UserName';


GO
PRINT N'Creating [Logging].[PackageExecution].[InteractiveMode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Om paketet kördes i BIDS eller ej', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageExecution', @level2type = N'COLUMN', @level2name = N'InteractiveMode';


GO
PRINT N'Creating [Logging].[PackageExecution].[ProductVersion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Version på den servermjukvara körningen gjordes', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageExecution', @level2type = N'COLUMN', @level2name = N'ProductVersion';


GO
PRINT N'Creating [Logging].[PackageExecution].[Status].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Status på körning (Failure, Succeeded, In Progress)', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageExecution', @level2type = N'COLUMN', @level2name = N'Status';


GO
PRINT N'Creating [Logging].[PackageVersion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'En unik version för ett visst paket', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageVersion';


GO
PRINT N'Creating [Logging].[PackageVersion].[VersionID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Primärnyckel', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageVersion', @level2type = N'COLUMN', @level2name = N'VersionID';


GO
PRINT N'Creating [Logging].[PackageVersion].[PackageID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Främmande nyckel till Package ', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageVersion', @level2type = N'COLUMN', @level2name = N'PackageID';


GO
PRINT N'Creating [Logging].[PackageVersion].[VersionMajor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Versionsnummer major', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageVersion', @level2type = N'COLUMN', @level2name = N'VersionMajor';


GO
PRINT N'Creating [Logging].[PackageVersion].[VersionMinor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Versionsnummer minor', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageVersion', @level2type = N'COLUMN', @level2name = N'VersionMinor';


GO
PRINT N'Creating [Logging].[PackageVersion].[VersionBuild].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Versionsnummer för kompilering', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageVersion', @level2type = N'COLUMN', @level2name = N'VersionBuild';


GO
PRINT N'Creating [Logging].[PackageVersion].[VersionComments].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Kommentarer rörande versionen', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'PackageVersion', @level2type = N'COLUMN', @level2name = N'VersionComments';


GO
PRINT N'Creating [Logging].[Package].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Ett SSIS-paket', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'Package';


GO
PRINT N'Creating [Logging].[Package].[PackageID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Primärnyckel', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'Package', @level2type = N'COLUMN', @level2name = N'PackageID';


GO
PRINT N'Creating [Logging].[Package].[PackageName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namn på paketet', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'Package', @level2type = N'COLUMN', @level2name = N'PackageName';


GO
PRINT N'Creating [Logging].[Package].[PackageDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Beskrivning av paketet', @level0type = N'SCHEMA', @level0name = N'Logging', @level1type = N'TABLE', @level1name = N'Package', @level2type = N'COLUMN', @level2name = N'PackageDescription';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
-- Test

IF 'Local' = '$(Environment)'
BEGIN
PRINT '***** Creating Test Data for UTV Enviroment *****';


/*
SELECT 'UNION SELECT '
	  ,'''' + [ConfigurationFilter]+ ''','
      ,'''' + [ConfiguredValue]+ ''','
      ,'''' + [PackagePath]+ ''','
      ,'''' + [ConfiguredValueType]+ ''''
  FROM [dbo].[SSISConfigurations]
*/


TRUNCATE TABLE dbo.SSISConfigurations

INSERT INTO dbo.SSISConfigurations(ConfigurationFilter, ConfiguredValue, PackagePath, ConfiguredValueType)
SELECT 	'DWH_3_Fact',	'Data Source=Localhost;Initial Catalog=DWH_3_Fact;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_3_Fact].Properties[ConnectionString]',	'String'
UNION SELECT 	'DWH_2_Norm',	'Data Source=Localhost;Initial Catalog=DWH_2_Norm;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_2_Norm].Properties[ConnectionString]',	'String'
UNION SELECT 	'DWH_1_Raw',	'Data Source=Localhost;Initial Catalog=DWH_1_Raw;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_1_Raw].Properties[ConnectionString]',	'String'
UNION SELECT 	'SSAS_Server',	'Data Source=localhost;PROVIDER=MSOLAP;Impersonation Level=Impersonate;',	'\Package.Connections[SSAS_Server].Properties[ConnectionString]',	'String'
UNION SELECT 	'DWH_0_MDM',	'Data Source=Localhost;Initial Catalog=DWH_0_MDM;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_0_MDM].Properties[ConnectionString]',	'String'
UNION SELECT 	'Talentsoft_SourceFolderPath',	'$(DropboxPath)\Input\Talentsoft\Data',	'\Package.Variables[User::Talentsoft_SourceFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Talentsoft_ArchiveFolderPath',	'$(DropboxPath)\Input\Talentsoft\Archive',	'\Package.Variables[User::Talentsoft_ArchiveFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Talentsoft_ErrorFolderPath',	'$(DropboxPath)\Input\Talentsoft\Error',	'\Package.Variables[User::Talentsoft_ErrorFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Manual_SourceFolderPath',	'$(DropboxPath)\Input\Manual\Data',	'\Package.Variables[User::Manual_SourceFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Manual_ArchiveFolderPath',	'$(DropboxPath)\Input\Manual\Archive',	'\Package.Variables[User::Manual_ArchiveFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Manual_ErrorFolderPath',	'$(DropboxPath)\Input\Manual\Error',	'\Package.Variables[User::Manual_ErrorFolderPath].Properties[Value]',	'String'
UNION SELECT 	'MoveFileWhenComplete',	'true',	'\Package.Variables[User::MoveFileWhenComplete].Properties[Value]',	'Boolean'
UNION SELECT 	'iLevel_SourceFolderPath',	'$(DropboxPath)\Input\iLevel\Data',	'\Package.Variables[User::iLevel_SourceFolderPath].Properties[Value]',	'String'
UNION SELECT 	'iLevel_ArchiveFolderPath',	'$(DropboxPath)\Input\iLevel\Archive',	'\Package.Variables[User::iLevel_ArchiveFolderPath].Properties[Value]',	'String'
UNION SELECT 	'iLevel_ErrorFolderPath',	'$(DropboxPath)\Input\iLevel\Error',	'\Package.Variables[User::iLevel_ErrorFolderPath].Properties[Value]',	'String'
UNION SELECT 	'iLevel_NoOfPeriods',	'60',	'\Package.Variables[User::iLevel_NoOfPeriods].Properties[Value]',	'String'
UNION SELECT 	'iLevel_ExecFilePath',	'$(DropboxPath)\Input\iLevel\Exec\iLevelIntegration.exe',	'\Package.Variables[User::iLevel_ExecFilePath].Properties[Value]',	'String'





END

IF 'DEV' = '$(Environment)'
BEGIN
PRINT '***** Creating Test Data for UTV Enviroment *****';


/*
SELECT 'UNION SELECT '
	  ,'''' + [ConfigurationFilter]+ ''','
      ,'''' + [ConfiguredValue]+ ''','
      ,'''' + [PackagePath]+ ''','
      ,'''' + [ConfiguredValueType]+ ''''
  FROM [dbo].[SSISConfigurations]
*/



TRUNCATE TABLE dbo.SSISConfigurations

INSERT INTO dbo.SSISConfigurations(ConfigurationFilter, ConfiguredValue, PackagePath, ConfiguredValueType)
SELECT 			'DWH_3_Fact',	'Data Source=Ipo-dw-dev-2;Initial Catalog=DWH_3_Fact;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_3_Fact].Properties[ConnectionString]',	'String'
UNION SELECT 	'DWH_2_Norm',	'Data Source=Ipo-dw-dev-2;Initial Catalog=DWH_2_Norm;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_2_Norm].Properties[ConnectionString]',	'String'
UNION SELECT 	'DWH_1_Raw',	'Data Source=Ipo-dw-dev-2;Initial Catalog=DWH_1_Raw;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_1_Raw].Properties[ConnectionString]',	'String'
UNION SELECT	'SSAS_Server',	'Data Source=Ipo-dw-dev-2;PROVIDER=MSOLAP;Impersonation Level=Impersonate;',	'\Package.Connections[SSAS_Server].Properties[ConnectionString]',	'String'
UNION SELECT 	'DWH_0_MDM',	'Data Source=Ipo-dw-dev-2;Initial Catalog=DWH_0_MDM;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_0_MDM].Properties[ConnectionString]',	'String'
UNION SELECT 	'Manual_SourceFolderPath',	'$(DropboxPath)\Input\Manual\Data',	'\Package.Variables[User::Manual_SourceFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Manual_ArchiveFolderPath',	'$(DropboxPath)\Input\Manual\Archive',	'\Package.Variables[User::Manual_ArchiveFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Manual_ErrorFolderPath',	'$(DropboxPath)\Input\Manual\Error',	'\Package.Variables[User::Manual_ErrorFolderPath].Properties[Value]',	'String'
UNION SELECT 	'MoveFileWhenComplete',	'true',	'\Package.Variables[User::MoveFileWhenComplete].Properties[Value]',	'Boolean'

END

IF 'UAT' = '$(Environment)'
BEGIN
PRINT '***** Creating Test Data for TEST Enviroment *****';



/*
SELECT 'UNION SELECT '
	  ,'''' + [ConfigurationFilter]+ ''','
      ,'''' + [ConfiguredValue]+ ''','
      ,'''' + [PackagePath]+ ''','
      ,'''' + [ConfiguredValueType]+ ''''
  FROM [dbo].[SSISConfigurations]
*/


TRUNCATE TABLE dbo.SSISConfigurations

INSERT INTO dbo.SSISConfigurations(ConfigurationFilter, ConfiguredValue, PackagePath, ConfiguredValueType)
SELECT 			'DWH_3_Fact',	'Data Source=eqtdwuatsrv01;Initial Catalog=DWH_3_Fact;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_3_Fact].Properties[ConnectionString]',	'String'
UNION SELECT 	'DWH_2_Norm',	'Data Source=eqtdwuatsrv01;Initial Catalog=DWH_2_Norm;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_2_Norm].Properties[ConnectionString]',	'String'
UNION SELECT 	'DWH_1_Raw',	'Data Source=eqtdwuatsrv01;Initial Catalog=DWH_1_Raw;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_1_Raw].Properties[ConnectionString]',	'String'
UNION SELECT	'SSAS_Server',	'Data Source=eqtdwuatsrv01;PROVIDER=MSOLAP;Impersonation Level=Impersonate;',	'\Package.Connections[SSAS_Server].Properties[ConnectionString]',	'String'
UNION SELECT 	'DWH_0_MDM',	'Data Source=eqtdwuatsrv01;Initial Catalog=DWH_0_MDM;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_0_MDM].Properties[ConnectionString]',	'String'
UNION SELECT 	'Talentsoft_SourceFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\UAT\Input\Talentsoft\Data',	'\Package.Variables[User::Talentsoft_SourceFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Talentsoft_ArchiveFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\UAT\Input\Talentsoft\Archive',	'\Package.Variables[User::Talentsoft_ArchiveFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Talentsoft_ErrorFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\UAT\Input\Talentsoft\Error',	'\Package.Variables[User::Talentsoft_ErrorFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Manual_SourceFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\UAT\Input\Manual\Data',	'\Package.Variables[User::Manual_SourceFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Manual_ArchiveFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\UAT\Input\Manual\Archive',	'\Package.Variables[User::Manual_ArchiveFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Manual_ErrorFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\UAT\Input\Manual\Error',	'\Package.Variables[User::Manual_ErrorFolderPath].Properties[Value]',	'String'
UNION SELECT 	'MoveFileWhenComplete',	'true',	'\Package.Variables[User::MoveFileWhenComplete].Properties[Value]',	'Boolean'
UNION SELECT 	'iLevel_SourceFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\UAT\Input\iLevel\Data',	'\Package.Variables[User::iLevel_SourceFolderPath].Properties[Value]',	'String'
UNION SELECT 	'iLevel_ArchiveFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\UAT\Input\iLevel\Archive',	'\Package.Variables[User::iLevel_ArchiveFolderPath].Properties[Value]',	'String'
UNION SELECT 	'iLevel_ErrorFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\UAT\Input\iLevel\Error',	'\Package.Variables[User::iLevel_ErrorFolderPath].Properties[Value]',	'String'
UNION SELECT 	'iLevel_NoOfPeriods',	'3',	'\Package.Variables[User::iLevel_NoOfPeriods].Properties[Value]',	'String'
UNION SELECT 	'iLevel_ExecFilePath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\UAT\Input\iLevel\Exec\iLevelIntegration.exe',	'\Package.Variables[User::iLevel_ExecFilePath].Properties[Value]',	'String'

END


IF 'PROD' = '$(Environment)'
BEGIN
PRINT '***** Creating Test Data for QA Enviroment *****';

TRUNCATE TABLE dbo.SSISConfigurations

INSERT INTO dbo.SSISConfigurations(ConfigurationFilter, ConfiguredValue, PackagePath, ConfiguredValueType)
SELECT 			'DWH_3_Fact',	'Data Source=eqtdwprdsrv01;Initial Catalog=DWH_3_Fact;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_3_Fact].Properties[ConnectionString]',	'String'
UNION SELECT 	'DWH_2_Norm',	'Data Source=eqtdwprdsrv01;Initial Catalog=DWH_2_Norm;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_2_Norm].Properties[ConnectionString]',	'String'
UNION SELECT 	'DWH_1_Raw',	'Data Source=eqtdwprdsrv01;Initial Catalog=DWH_1_Raw;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_1_Raw].Properties[ConnectionString]',	'String'
UNION SELECT	'SSAS_Server',	'Data Source=eqtdwprdsrv02;PROVIDER=MSOLAP;Impersonation Level=Impersonate;',	'\Package.Connections[SSAS_Server].Properties[ConnectionString]',	'String'
UNION SELECT 	'DWH_0_MDM',	'Data Source=eqtdwprdsrv01;Initial Catalog=DWH_0_MDM;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;',	'\Package.Connections[DWH_0_MDM].Properties[ConnectionString]',	'String'
UNION SELECT 	'Talentsoft_SourceFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\PROD\Input\Talentsoft\Data',	'\Package.Variables[User::Talentsoft_SourceFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Talentsoft_ArchiveFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\PROD\Input\Talentsoft\Archive',	'\Package.Variables[User::Talentsoft_ArchiveFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Talentsoft_ErrorFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\PROD\Input\Talentsoft\Error',	'\Package.Variables[User::Talentsoft_ErrorFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Manual_SourceFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\PROD\Input\Manual\Data',	'\Package.Variables[User::Manual_SourceFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Manual_ArchiveFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\PROD\Input\Manual\Archive',	'\Package.Variables[User::Manual_ArchiveFolderPath].Properties[Value]',	'String'
UNION SELECT 	'Manual_ErrorFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\PROD\Input\Manual\Error',	'\Package.Variables[User::Manual_ErrorFolderPath].Properties[Value]',	'String'
UNION SELECT 	'MoveFileWhenComplete',	'true',	'\Package.Variables[User::MoveFileWhenComplete].Properties[Value]',	'Boolean'
UNION SELECT 	'iLevel_SourceFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\PROD\Input\iLevel\Data',	'\Package.Variables[User::iLevel_SourceFolderPath].Properties[Value]',	'String'
UNION SELECT 	'iLevel_ArchiveFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\PROD\Input\iLevel\Archive',	'\Package.Variables[User::iLevel_ArchiveFolderPath].Properties[Value]',	'String'
UNION SELECT 	'iLevel_ErrorFolderPath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\PROD\Input\iLevel\Error',	'\Package.Variables[User::iLevel_ErrorFolderPath].Properties[Value]',	'String'
UNION SELECT 	'iLevel_NoOfPeriods',	'3',	'\Package.Variables[User::iLevel_NoOfPeriods].Properties[Value]',	'String'
UNION SELECT 	'iLevel_ExecFilePath',	'E:\Dropbox\Dropbox (EQT AB)\DataWarehouse\PROD\Input\iLevel\Exec\iLevelIntegration.exe',	'\Package.Variables[User::iLevel_ExecFilePath].Properties[Value]',	'String'

END


GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [Logging].[PackageExecution] WITH CHECK CHECK CONSTRAINT [FK_PackageExecution_PackageVersion];

ALTER TABLE [Logging].[PackageVersion] WITH CHECK CHECK CONSTRAINT [FK_PackageVersion_Package];

ALTER TABLE [Logging].[ExecutionEvent] WITH CHECK CHECK CONSTRAINT [FK_ExecutionEvent_Execution];

ALTER TABLE [Logging].[PackageExecution] WITH CHECK CHECK CONSTRAINT [CH_PackageLog_PackageExecutionEnd];


GO
PRINT N'Update complete.';


GO
