/*
Deployment script for DWH_2_Norm

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DWH_2_Norm"
:setvar DefaultFilePrefix "DWH_2_Norm"
:setvar DefaultDataPath "E:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "E:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Finnish_Swedish_CI_AS
GO
PRINT N'Creating [Norm_Index]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [Norm_Index];


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [Norm_Index_253A7325], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Norm_Index_253A7325.mdf') TO FILEGROUP [Norm_Index];


GO
PRINT N'Creating [Norm_Data]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [Norm_Data];


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [Norm_Data_CE48A3E], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Norm_Data_CE48A3E.mdf') TO FILEGROUP [Norm_Data];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/


/*
CREATE TABLE #temp(sqlStatement nvarchar(max), rowNo int)
INSERT INTO #temp
SELECT sqlStatement = 'TRUNCATE TABLE ' + t.TABLE_CATALOG + '.' + t.TABLE_SCHEMA + '.' + t.TABLE_NAME
       , rowNo = ROW_NUMBER() OVER (ORDER BY t.TABLE_NAME)
FROM   INFORMATION_SCHEMA.TABLES t
WHERE t.TABLE_TYPE = 'BASE TABLE'

DECLARE @LastRowNo int = 1, @sqlStatement NVARCHAR(max)

WHILE (@LastRowNo IS NOT NULL)
BEGIN 
	
	SET @sqlStatement = (SELECT TOP 1 t.sqlStatement FROM #temp t WHERE t.rowNo = @LastRowNo)

	PRINT @sqlStatement
	
	EXEC (@sqlStatement)

	set @LastRowNo= (select top 1 rowNo from #temp where rowNo > @LastRowNo order by rowNo)
END


*/
GO

GO
PRINT N'Creating [Fact]...';


GO
CREATE SCHEMA [Fact]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [FactBudget]...';


GO
CREATE SCHEMA [FactBudget]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Norm]...';


GO
CREATE SCHEMA [Norm]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [NormBudget]...';


GO
CREATE SCHEMA [NormBudget]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [NormBudget_Scd1]...';


GO
CREATE SCHEMA [NormBudget_Scd1]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Stage]...';


GO
CREATE SCHEMA [Stage]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Norm].[n_Calendar]...';


GO
CREATE TABLE [Norm].[n_Calendar] (
    [Calendar_key]              INT           IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]       INT           NOT NULL,
    [SysDatetimeInsertedUTC]    DATETIME2 (0) NOT NULL,
    [SysDatetimeUpdatedUTC]     DATETIME2 (0) NULL,
    [SysDatetimeDeletedUTC]     DATETIME2 (0) NULL,
    [SysDatetimeReprocessedUTC] DATETIME2 (0) NULL,
    [SysModifiedUTC]            DATETIME2 (0) NOT NULL,
    [SysIsInferred]             BIT           NOT NULL,
    [SysValidFromDateTime]      DATETIME2 (0) NOT NULL,
    [SysSrcGenerationDateTime]  DATETIME2 (0) NULL,
    [Calendar_bkey]             DATETIME      NOT NULL,
    [CalendarDate]              DATETIME      NULL,
    CONSTRAINT [PK_Norm_n_Calendar] PRIMARY KEY CLUSTERED ([Calendar_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_Calendar].[NCIDX_SysModifiedUTC_Norm_n_Calendar]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_Calendar]
    ON [Norm].[n_Calendar]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_Employee]...';


GO
CREATE TABLE [Norm].[n_Employee] (
    [Employee_key]              INT            IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]       INT            NOT NULL,
    [SysDatetimeInsertedUTC]    DATETIME2 (0)  NOT NULL,
    [SysDatetimeUpdatedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeDeletedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeReprocessedUTC] DATETIME2 (0)  NULL,
    [SysModifiedUTC]            DATETIME2 (0)  NOT NULL,
    [SysIsInferred]             BIT            NOT NULL,
    [SysValidFromDateTime]      DATETIME2 (0)  NOT NULL,
    [SysSrcGenerationDateTime]  DATETIME2 (0)  NULL,
    [Employee_bkey]             NVARCHAR (100) NOT NULL,
    [EmployeeName]              NVARCHAR (150) NULL,
    [Title]                     NVARCHAR (50)  NULL,
    [Department]                NVARCHAR (50)  NULL,
    [EmployeeStatus]            NVARCHAR (100) NULL,
    CONSTRAINT [PK_Norm_n_Employee] PRIMARY KEY CLUSTERED ([Employee_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_Employee].[NCIDX_SysModifiedUTC_Norm_n_Employee]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_Employee]
    ON [Norm].[n_Employee]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_Geography]...';


GO
CREATE TABLE [Norm].[n_Geography] (
    [Geography_key]             INT            IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]       INT            NOT NULL,
    [SysDatetimeInsertedUTC]    DATETIME2 (0)  NOT NULL,
    [SysDatetimeUpdatedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeDeletedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeReprocessedUTC] DATETIME2 (0)  NULL,
    [SysModifiedUTC]            DATETIME2 (0)  NOT NULL,
    [SysIsInferred]             BIT            NOT NULL,
    [SysValidFromDateTime]      DATETIME2 (0)  NOT NULL,
    [SysSrcGenerationDateTime]  DATETIME2 (0)  NULL,
    [Geography_bkey]            NVARCHAR (100) NOT NULL,
    [GeographyName]             NVARCHAR (255) NULL,
    [MunicipalityCode]          NVARCHAR (100) NULL,
    [MunicipalityNamn]          NVARCHAR (250) NULL,
    [StateCode]                 NVARCHAR (100) NULL,
    [StateNamn]                 NVARCHAR (250) NULL,
    [RegionCode]                NVARCHAR (100) NULL,
    [RegionName]                NVARCHAR (250) NULL,
    CONSTRAINT [PK_Norm_n_Geography] PRIMARY KEY CLUSTERED ([Geography_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_Geography].[NCIDX_SysModifiedUTC_Norm_n_Geography]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_Geography]
    ON [Norm].[n_Geography]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_Project]...';


GO
CREATE TABLE [Norm].[n_Project] (
    [Project_key]               INT            IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]       INT            NOT NULL,
    [SysDatetimeInsertedUTC]    DATETIME2 (0)  NOT NULL,
    [SysDatetimeUpdatedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeDeletedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeReprocessedUTC] DATETIME2 (0)  NULL,
    [SysModifiedUTC]            DATETIME2 (0)  NOT NULL,
    [SysIsInferred]             BIT            NOT NULL,
    [SysValidFromDateTime]      DATETIME2 (0)  NOT NULL,
    [SysSrcGenerationDateTime]  DATETIME2 (0)  NULL,
    [Project_bkey]              NVARCHAR (100) NOT NULL,
    [ProjectName]               NVARCHAR (250) NULL,
    [ProgramID]                 NVARCHAR (100) NULL,
    [Category1ID]               NVARCHAR (100) NULL,
    [Category2ID]               NVARCHAR (100) NULL,
    [PlanFinish]                DATETIME       NULL,
    [CloseDate]                 DATETIME       NULL,
    [NumOfHP]                   INT            NULL,
    [NumOfHC]                   INT            NULL,
    CONSTRAINT [PK_Norm_n_Project] PRIMARY KEY CLUSTERED ([Project_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_Project].[NCIDX_SysModifiedUTC_Norm_n_Project]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_Project]
    ON [Norm].[n_Project]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_ServiceProvider]...';


GO
CREATE TABLE [Norm].[n_ServiceProvider] (
    [ServiceProvider_key]       INT           IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]       INT           NOT NULL,
    [SysDatetimeInsertedUTC]    DATETIME2 (0) NOT NULL,
    [SysDatetimeUpdatedUTC]     DATETIME2 (0) NULL,
    [SysDatetimeDeletedUTC]     DATETIME2 (0) NULL,
    [SysDatetimeReprocessedUTC] DATETIME2 (0) NULL,
    [SysModifiedUTC]            DATETIME2 (0) NOT NULL,
    [SysIsInferred]             BIT           NOT NULL,
    [SysValidFromDateTime]      DATETIME2 (0) NOT NULL,
    [SysSrcGenerationDateTime]  DATETIME2 (0) NULL,
    [ServiceProvider_bkey]      INT           NOT NULL,
    [ServiceProvider]           NVARCHAR (50) NULL,
    CONSTRAINT [PK_Norm_n_ServiceProvider] PRIMARY KEY CLUSTERED ([ServiceProvider_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_ServiceProvider].[NCIDX_SysModifiedUTC_Norm_n_ServiceProvider]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_ServiceProvider]
    ON [Norm].[n_ServiceProvider]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_AccessCategory]...';


GO
CREATE TABLE [Norm].[n_AccessCategory] (
    [AccessCategory_key]        INT            IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]       INT            NOT NULL,
    [SysDatetimeInsertedUTC]    DATETIME2 (0)  NOT NULL,
    [SysDatetimeUpdatedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeDeletedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeReprocessedUTC] DATETIME2 (0)  NULL,
    [SysModifiedUTC]            DATETIME2 (0)  NOT NULL,
    [SysIsInferred]             BIT            NOT NULL,
    [SysValidFromDateTime]      DATETIME2 (0)  NOT NULL,
    [SysSrcGenerationDateTime]  DATETIME2 (0)  NULL,
    [AccessCategory_bkey]       INT            NOT NULL,
    [AccessCategory]            NVARCHAR (100) NULL,
    CONSTRAINT [PK_Norm_n_AccessCategory] PRIMARY KEY CLUSTERED ([AccessCategory_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_AccessCategory].[NCIDX_SysModifiedUTC_Norm_n_AccessCategory]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_AccessCategory]
    ON [Norm].[n_AccessCategory]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_Area]...';


GO
CREATE TABLE [Norm].[n_Area] (
    [Area_key]                                 INT            IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]                      INT            NOT NULL,
    [SysDatetimeInsertedUTC]                   DATETIME2 (0)  NOT NULL,
    [SysDatetimeUpdatedUTC]                    DATETIME2 (0)  NULL,
    [SysDatetimeDeletedUTC]                    DATETIME2 (0)  NULL,
    [SysDatetimeReprocessedUTC]                DATETIME2 (0)  NULL,
    [SysModifiedUTC]                           DATETIME2 (0)  NOT NULL,
    [SysIsInferred]                            BIT            NOT NULL,
    [SysValidFromDateTime]                     DATETIME2 (0)  NOT NULL,
    [SysSrcGenerationDateTime]                 DATETIME2 (0)  NULL,
    [Area_bkey]                                NVARCHAR (100) NOT NULL,
    [AreaName]                                 NVARCHAR (255) NULL,
    [Geography_bkey]                           NVARCHAR (100) NULL,
    [Project_bkey]                             NVARCHAR (100) NULL,
    [Employee_MetroNetworkManager_bkey]        NVARCHAR (100) NULL,
    [Employee_RegionConstructionManager_bkey]  NVARCHAR (100) NULL,
    [Employee_DeliveryStreamLeader_bkey]       NVARCHAR (100) NULL,
    [Employee_ConstructionManager_bkey]        NVARCHAR (100) NULL,
    [SugarEnum_ConstructionStatus_bkey]        NVARCHAR (130) NULL,
    [SugarEnum_SalesStatus_bkey]               NVARCHAR (131) NULL,
    [SugarEnum_SourcingStatus_bkey]            NVARCHAR (131) NULL,
    [SugarEnum_IikStatus_bkey]                 NVARCHAR (122) NULL,
    [SugarEnum_AreaType_bkey]                  NVARCHAR (123) NULL,
    [SugarEnum_Contractor_bkey]                NVARCHAR (127) NULL,
    [SugarEnum_SalesOrganisation_bkey]         NVARCHAR (138) NULL,
    [SugarEnum_ConstructionOrganisation_bkey]  NVARCHAR (138) NULL,
    [SugarEnum_SubsidyArea_bkey]               NVARCHAR (126) NULL,
    [SugarEnum_ProjectDesign_bkey]             NVARCHAR (128) NULL,
    [SugarEnum_CountyAdvisoryBoardStatus_bkey] NVARCHAR (136) NULL,
    [InitialSalesStart]                        DATE           NULL,
    [AfterMarketSalesStart]                    DATE           NULL,
    [StrategicNetworkPlanningComplete]         DATE           NULL,
    [LeasedUplinkExpected]                     DATE           NULL,
    [LeasedUplinkDeployed]                     DATE           NULL,
    [TRVPermissionNeeded]                      NVARCHAR (100) NULL,
    [SumOfTRVNeeded]                           INT            NULL,
    [SumOfTRVSubmitted]                        INT            NULL,
    [SumOfTRVApproved]                         INT            NULL,
    [ExpectedApprovalOfTRV]                    DATE           NULL,
    [AllTRVApplicationsSubmitted]              DATE           NULL,
    [AllTRVApplicationsApproved]               DATE           NULL,
    [CommentOnTRV]                             NVARCHAR (255) NULL,
    [MunicipalLandPermit]                      DATE           NULL,
    [BuildingPermitApproved]                   DATE           NULL,
    [AllBuildingPermitsSubmitted]              DATE           NULL,
    [CommentOnBuildingPermit]                  NVARCHAR (255) NULL,
    [PlannedInstallationStart]                 DATE           NULL,
    [PlannedInstallationComplete]              DATE           NULL,
    [PlannedConstructionStart]                 DATE           NULL,
    [FinalDocumentationComplete]               DATE           NULL,
    CONSTRAINT [PK_Norm_n_Area] PRIMARY KEY CLUSTERED ([Area_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_Area].[NCIDX_SysModifiedUTC_Norm_n_Area]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_Area]
    ON [Norm].[n_Area]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_SubscriptionProduct]...';


GO
CREATE TABLE [Norm].[n_SubscriptionProduct] (
    [SubscriptionProduct_key]   INT           IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]       INT           NOT NULL,
    [SysDatetimeInsertedUTC]    DATETIME2 (0) NOT NULL,
    [SysDatetimeUpdatedUTC]     DATETIME2 (0) NULL,
    [SysDatetimeDeletedUTC]     DATETIME2 (0) NULL,
    [SysDatetimeReprocessedUTC] DATETIME2 (0) NULL,
    [SysModifiedUTC]            DATETIME2 (0) NOT NULL,
    [SysIsInferred]             BIT           NOT NULL,
    [SysValidFromDateTime]      DATETIME2 (0) NOT NULL,
    [SysSrcGenerationDateTime]  DATETIME2 (0) NULL,
    [SubscriptionProduct_bkey]  NVARCHAR (50) NOT NULL,
    [SubscriptionProduct]       NVARCHAR (50) NOT NULL,
    [SubscriptionProductType]   NVARCHAR (50) NOT NULL,
    [MonthlyPrice]              MONEY         NOT NULL,
    [StartPrice]                MONEY         NOT NULL,
    [Billable]                  NVARCHAR (5)  NULL,
    CONSTRAINT [PK_Norm_n_SubscriptionProduct] PRIMARY KEY CLUSTERED ([SubscriptionProduct_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_SubscriptionProduct].[NCIDX_SysModifiedUTC_Norm_n_SubscriptionProduct]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_SubscriptionProduct]
    ON [Norm].[n_SubscriptionProduct]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_Subscription]...';


GO
CREATE TABLE [Norm].[n_Subscription] (
    [Subscription_key]           INT           IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]        INT           NOT NULL,
    [SysDatetimeInsertedUTC]     DATETIME2 (0) NOT NULL,
    [SysDatetimeUpdatedUTC]      DATETIME2 (0) NULL,
    [SysDatetimeDeletedUTC]      DATETIME2 (0) NULL,
    [SysDatetimeReprocessedUTC]  DATETIME2 (0) NULL,
    [SysModifiedUTC]             DATETIME2 (0) NOT NULL,
    [SysIsInferred]              BIT           NOT NULL,
    [SysValidFromDateTime]       DATETIME2 (0) NOT NULL,
    [SysSrcGenerationDateTime]   DATETIME2 (0) NULL,
    [Subscription_bkey]          INT           NOT NULL,
    [SubscriptionProduct_bkey]   NVARCHAR (50) NOT NULL,
    [ServiceProvider_bkey]       INT           NULL,
    [Access_bkey]                INT           NULL,
    [Calendar_Subscription_bkey] DATETIME      NULL,
    [Calendar_Purchase_bkey]     DATETIME      NULL,
    [ResoposibleSalesEntity]     NVARCHAR (50) NULL,
    [IsClosed]                   BIT           NULL,
    CONSTRAINT [PK_Norm_n_Subscription] PRIMARY KEY CLUSTERED ([Subscription_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_Subscription].[NCIDX_SysModifiedUTC_Norm_n_Subscription]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_Subscription]
    ON [Norm].[n_Subscription]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_Access]...';


GO
CREATE TABLE [Norm].[n_Access] (
    [Access_key]                INT            IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]       INT            NOT NULL,
    [SysDatetimeInsertedUTC]    DATETIME2 (0)  NOT NULL,
    [SysDatetimeUpdatedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeDeletedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeReprocessedUTC] DATETIME2 (0)  NULL,
    [SysModifiedUTC]            DATETIME2 (0)  NOT NULL,
    [SysIsInferred]             BIT            NOT NULL,
    [SysValidFromDateTime]      DATETIME2 (0)  NOT NULL,
    [SysSrcGenerationDateTime]  DATETIME2 (0)  NULL,
    [Access_bkey]               INT            NOT NULL,
    [Calenar_Installed_bkey]    DATETIME       NULL,
    [Opportunity_bkey]          NVARCHAR (100) NULL,
    [AccessCategory_Lvl1_bkey]  INT            NOT NULL,
    [AccessCategory_Lvl2_bkey]  INT            NOT NULL,
    [AccessCategory_Lvl3_bkey]  INT            NOT NULL,
    [AccessCategory_Lvl4_bkey]  INT            NOT NULL,
    [AccessCategory_Lvl5_bkey]  INT            NOT NULL,
    CONSTRAINT [PK_Norm_n_Access] PRIMARY KEY CLUSTERED ([Access_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_Access].[NCIDX_SysModifiedUTC_Norm_n_Access]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_Access]
    ON [Norm].[n_Access]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_SugarEnum]...';


GO
CREATE TABLE [Norm].[n_SugarEnum] (
    [SugarEnum_key]             INT            IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]       INT            NOT NULL,
    [SysDatetimeInsertedUTC]    DATETIME2 (0)  NOT NULL,
    [SysDatetimeUpdatedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeDeletedUTC]     DATETIME2 (0)  NULL,
    [SysDatetimeReprocessedUTC] DATETIME2 (0)  NULL,
    [SysModifiedUTC]            DATETIME2 (0)  NOT NULL,
    [SysIsInferred]             BIT            NOT NULL,
    [SysValidFromDateTime]      DATETIME2 (0)  NOT NULL,
    [SysSrcGenerationDateTime]  DATETIME2 (0)  NULL,
    [SugarEnum_bkey]            NVARCHAR (250) NOT NULL,
    [FieldValue]                NVARCHAR (250) NULL,
    CONSTRAINT [PK_Norm_n_SugarEnum] PRIMARY KEY CLUSTERED ([SugarEnum_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_SugarEnum].[NCIDX_SysModifiedUTC_Norm_n_SugarEnum]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_SugarEnum]
    ON [Norm].[n_SugarEnum]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_SalesOrder]...';


GO
CREATE TABLE [Norm].[n_SalesOrder] (
    [SalesOrder_key]                  INT            IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]             INT            NOT NULL,
    [SysDatetimeInsertedUTC]          DATETIME2 (0)  NOT NULL,
    [SysDatetimeUpdatedUTC]           DATETIME2 (0)  NULL,
    [SysDatetimeDeletedUTC]           DATETIME2 (0)  NULL,
    [SysDatetimeReprocessedUTC]       DATETIME2 (0)  NULL,
    [SysModifiedUTC]                  DATETIME2 (0)  NOT NULL,
    [SysIsInferred]                   BIT            NOT NULL,
    [SysValidFromDateTime]            DATETIME2 (0)  NOT NULL,
    [SysSrcGenerationDateTime]        DATETIME2 (0)  NULL,
    [SalesOrder_bkey]                 NVARCHAR (100) NOT NULL,
    [SugarEnum_DeliveryStatus_bkey]   NVARCHAR (133) NULL,
    [SugarEnum_OrderType_bkey]        NVARCHAR (133) NULL,
    [SugarEnum_ConnectionType_bkey]   NVARCHAR (132) NULL,
    [SugarEnum_OrderSource_bkey]      NVARCHAR (135) NULL,
    [Opportunity_bkey]                NVARCHAR (100) NOT NULL,
    [PlannedInstallationDate]         DATETIME2 (7)  NULL,
    [ProductBundleYN]                 NVARCHAR (100) NULL,
    [ProductBundleName]               NVARCHAR (255) NOT NULL,
    [Campaign6MonthInternet]          NVARCHAR (20)  NULL,
    [ConnectionFeeSEK]                MONEY          NOT NULL,
    [RotDeductionSEK]                 MONEY          NOT NULL,
    [RutDeductionSEK]                 MONEY          NOT NULL,
    [DiscountSEK]                     MONEY          NOT NULL,
    [ExtraFeeSEK]                     MONEY          NOT NULL,
    [ProductBundlePriceAdjustmentSEK] MONEY          NULL,
    [TotalRevenueSEK]                 MONEY          NULL,
    [FirstName]                       NVARCHAR (255) NULL,
    [Surname]                         NVARCHAR (255) NULL,
    [Email]                           NVARCHAR (255) NULL,
    [MobilePhoneNo]                   NVARCHAR (255) NULL,
    [PersonalIdentityNumber]          NVARCHAR (255) NULL,
    [OrganizationNumber]              NVARCHAR (255) NOT NULL,
    [Age]                             INT            NULL,
    [Gender]                          VARCHAR (7)    NULL,
    CONSTRAINT [PK_Norm_n_SalesOrder] PRIMARY KEY CLUSTERED ([SalesOrder_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_SalesOrder].[NCIDX_SysModifiedUTC_Norm_n_SalesOrder]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_SalesOrder]
    ON [Norm].[n_SalesOrder]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_SalesOrder].[IX_SugarEnum_DeliveryStatus_bkey]...';


GO
CREATE NONCLUSTERED INDEX [IX_SugarEnum_DeliveryStatus_bkey]
    ON [Norm].[n_SalesOrder]([SugarEnum_DeliveryStatus_bkey] ASC)
    ON [Norm_Data];


GO
PRINT N'Creating [Norm].[n_SalesOrder].[IX_Oppertunity]...';


GO
CREATE NONCLUSTERED INDEX [IX_Oppertunity]
    ON [Norm].[n_SalesOrder]([Opportunity_bkey] ASC, [SysValidFromDateTime] ASC)
    ON [Norm_Data];


GO
PRINT N'Creating [Norm].[n_Opportunity]...';


GO
CREATE TABLE [Norm].[n_Opportunity] (
    [Opportunity_key]             INT             IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]         INT             NOT NULL,
    [SysDatetimeInsertedUTC]      DATETIME2 (0)   NOT NULL,
    [SysDatetimeUpdatedUTC]       DATETIME2 (0)   NULL,
    [SysDatetimeDeletedUTC]       DATETIME2 (0)   NULL,
    [SysDatetimeReprocessedUTC]   DATETIME2 (0)   NULL,
    [SysModifiedUTC]              DATETIME2 (0)   NOT NULL,
    [SysIsInferred]               BIT             NOT NULL,
    [SysValidFromDateTime]        DATETIME2 (0)   NOT NULL,
    [SysSrcGenerationDateTime]    DATETIME2 (0)   NULL,
    [Opportunity_bkey]            NVARCHAR (100)  NOT NULL,
    [Area_bkey]                   NVARCHAR (100)  NULL,
    [Access_bkey]                 INT             NOT NULL,
    [AddressMaster_bkey]          INT             NOT NULL,
    [OpportunityName]             NVARCHAR (255)  NULL,
    [SugarEnum_BusinessType_bkey] NVARCHAR (250)  NULL,
    [CustomerType]                NVARCHAR (150)  NULL,
    [AddressStreetAndNo]          NVARCHAR (255)  NULL,
    [AddressPostalCode]           NVARCHAR (20)   NULL,
    [AddressStreetName]           NVARCHAR (255)  NULL,
    [AddressStreetNo]             NVARCHAR (10)   NULL,
    [AddressCity]                 NVARCHAR (255)  NULL,
    [AddressCountry]              NVARCHAR (100)  NULL,
    [Latitude]                    DECIMAL (10, 6) NULL,
    [Longitude]                   DECIMAL (10, 6) NULL,
    [Fastighetsbeteckningc]       NVARCHAR (255)  NULL,
    [AcquiredAccess]              VARCHAR (7)     NOT NULL,
    CONSTRAINT [PK_Norm_n_Opportunity] PRIMARY KEY CLUSTERED ([Opportunity_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_Opportunity].[NCIDX_SysModifiedUTC_Norm_n_Opportunity]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_Opportunity]
    ON [Norm].[n_Opportunity]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [Norm].[n_CustomerCategory]...';


GO
CREATE TABLE [Norm].[n_CustomerCategory] (
    [CustomerCategory_key]        INT            IDENTITY (1, 1) NOT NULL,
    [SysExecutionLog_key]         INT            NOT NULL,
    [SysDatetimeInsertedUTC]      DATETIME2 (0)  NOT NULL,
    [SysDatetimeUpdatedUTC]       DATETIME2 (0)  NULL,
    [SysDatetimeDeletedUTC]       DATETIME2 (0)  NULL,
    [SysDatetimeReprocessedUTC]   DATETIME2 (0)  NULL,
    [SysModifiedUTC]              DATETIME2 (0)  NOT NULL,
    [SysIsInferred]               BIT            NOT NULL,
    [SysValidFromDateTime]        DATETIME2 (0)  NOT NULL,
    [SysSrcGenerationDateTime]    DATETIME2 (0)  NULL,
    [CustomerCategory_bkey]       INT            NOT NULL,
    [CustomerTypeCategory]        NVARCHAR (100) NULL,
    [CustomerTypeCategoryDetail]  NVARCHAR (100) NULL,
    [SugarEnum_BusinessType_bkey] NVARCHAR (100) NOT NULL,
    [SugarEnum_AreaType_bkey]     NVARCHAR (100) NOT NULL,
    [SugarEnum_OrderType_bkey]    NVARCHAR (100) NOT NULL,
    [OpportunityCustomerType]     NVARCHAR (100) NOT NULL,
    [SugarEnum_SubsidyArea_bkey]  NVARCHAR (100) NOT NULL,
    CONSTRAINT [PK_Norm_n_CustomerCategory] PRIMARY KEY CLUSTERED ([CustomerCategory_bkey] ASC, [SysValidFromDateTime] ASC) WITH (DATA_COMPRESSION = PAGE) ON [Norm_Data]
);


GO
PRINT N'Creating [Norm].[n_CustomerCategory].[NCIDX_SysModifiedUTC_Norm_n_CustomerCategory]...';


GO
CREATE NONCLUSTERED INDEX [NCIDX_SysModifiedUTC_Norm_n_CustomerCategory]
    ON [Norm].[n_CustomerCategory]([SysModifiedUTC] ASC) WITH (DATA_COMPRESSION = PAGE)
    ON [Norm_Index];


GO
PRINT N'Creating [dbo].[fn_Calendar]...';


GO


CREATE FUNCTION [dbo].[fn_Calendar] 
(	@p_StartDate DateTime,
	@p_EndDate DateTime 

)
RETURNS TABLE 
AS
RETURN 
(
	


With Base As 
( 
      Select 1 as n 
      Union All 
      Select n+1 From Base Where n < Ceiling(SQRT(Datediff(day,@p_StartDate,@p_EndDate) + 1)) 
), 
Expand As 
( 
      Select 1 as C 
      From Base as B1, Base as B2 
), 
Nums As 
( 
      Select Row_Number() OVER(ORDER BY C) As n 
      From Expand 
) , 
CalcDate AS
(
	select Dateadd(day,n-1,@p_StartDate) as Datum_nk
	from Nums
	Where n<=Datediff(day,@p_StartDate,@p_EndDate) + 1
)
 
--Main Query to generate Calendar table 
SELECT
	Datum_nk as [Calendar_bkey]  
	,datepart(yyyy,Datum_nk) as CalendarYear
	,cast(datepart(yyyy,Datum_nk) as varchar(4)) + '-' + RIGHT(convert(varchar(6), Datum_nk, 112), 2) as YearMonth
	,cast(datepart(yyyy,Datum_nk) as varchar(4)) + '-W' + cast(datepart(wk,Datum_nk) as varchar(2)) as YearWeek
	,cast(datepart(yyyy,Datum_nk) as varchar(4)) + '-Q' + cast(datepart(qq, Datum_nk) as varchar(2)) as [YearQuarter]
	,datepart(qq, Datum_nk) as CalendarQuarter
	,datepart(mm,Datum_nk) as MonthofYear
	,cast(UPPER(LEFT(DATENAME(m,Datum_nk),1)) + SUBSTRING(DATENAME(m,Datum_nk),2,LEN(Datum_nk)) as varchar(10)) as [MonthName]
	,datepart(wk,Datum_nk) as [WeekOfYear]
	,datepart(dw,Datum_nk) as DayofWeek
	,CAST(UPPER(LEFT(DATENAME(dw,Datum_nk),1)) + SUBSTRING(DATENAME(dw,Datum_nk),2,LEN(Datum_nk)) as char(10))  as [DayName]
	,datepart(day,Datum_nk) as DayofMonth
From CalcDate  
 
 
 
)
GO
PRINT N'Creating [dbo].[tvf_split]...';


GO
CREATE FUNCTION dbo.tvf_split
(
    @Text VARCHAR(MAX),
    @Separator CHAR(1)
)
RETURNS @Values TABLE (SplitValue NVARCHAR(100))
AS
BEGIN

    DECLARE @X XML

    SELECT @X = CONVERT(XML, ' <root> <s>' + REPLACE(@Text, @Separator, '</s> <s>') + '</s>   </root> ')

    INSERT @Values
    (
        SplitValue
    )
    SELECT Value = T.c.value('.', 'varchar(100)')
    FROM @X.nodes('/root/s')T(c)


    RETURN
END
GO
PRINT N'Creating [Fact].[f_Subscription]...';


GO

CREATE VIEW [Fact].[f_Subscription]
AS

SELECT  ns.SysSrcGenerationDateTime
        , ns.SysValidFromDateTime
        , ns.SysModifiedUTC
        , ns.SysDatetimeDeletedUTC
        , ns.Subscription_key
        , nsp.SubscriptionProduct_key
        , na.Access_key
        , nsp2.ServiceProvider_key
        , Calendar_key   = CAST(CONVERT(NVARCHAR(8), ns.Calendar_Subscription_bkey, 112) AS INT)
        , NoOfActivation = IIF(ns.IsClosed = 1, -1, 1)
FROM    Norm.n_Subscription ns
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Access na WHERE na.Access_bkey = ns.Access_bkey ORDER BY na.SysValidFromDateTime DESC) na 
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_SubscriptionProduct nsp WHERE nsp.SubscriptionProduct_bkey = ns.SubscriptionProduct_bkey ORDER BY nsp.SysValidFromDateTime DESC) nsp
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_ServiceProvider nsp2 WHERE nsp2.ServiceProvider_bkey = ns.ServiceProvider_bkey ORDER BY nsp2.SysValidFromDateTime DESC) nsp2
WHERE ns.Calendar_Subscription_bkey IS NOT NULL AND ns.Subscription_bkey <> '-1'
GO
PRINT N'Creating [Fact].[d_SugarEnum]...';


GO
CREATE VIEW Fact.d_SugarEnum
AS

SELECT nse.SugarEnum_key
     , nse.SysDatetimeDeletedUTC
     , nse.SysModifiedUTC
     , nse.SysIsInferred
     , nse.SysValidFromDateTime
     , nse.SysSrcGenerationDateTime
     , nse.SugarEnum_bkey
     , nse.FieldValue 
FROM Norm.n_SugarEnum nse
GO
PRINT N'Creating [Fact].[d_SalesOrder]...';


GO
CREATE VIEW Fact.d_SalesOrder
AS

SELECT  nso.SalesOrder_key
        , nso.SysDatetimeDeletedUTC
        , nso.SysModifiedUTC
        , nso.SysIsInferred
        , nso.SysValidFromDateTime
        , nso.SysSrcGenerationDateTime
        , nso.SalesOrder_bkey
        , no.Opportunity_key
        , SugarEnum_DeliveryStatus_key = SugarEnum_DeliveryStatus_bkey.SugarEnum_key
        , SugarEnum_OrderType_key      = SugarEnum_OrderType_bkey.SugarEnum_key
        , SugarEnum_ConnectionType_key = SugarEnum_ConnectionType_bkey.SugarEnum_key
        , SugarEnum_OrderSource_key    = SugarEnum_OrderSource_bkey.SugarEnum_key
        , nso.PlannedInstallationDate
        , nso.ProductBundleYN
        , nso.ProductBundleName
        , nso.Campaign6MonthInternet
        , nso.ConnectionFeeSEK
        , nso.RotDeductionSEK
        , nso.RutDeductionSEK
        , nso.DiscountSEK
        , nso.ExtraFeeSEK
        , nso.ProductBundlePriceAdjustmentSEK
        , nso.TotalRevenueSEK
FROM    Norm.n_SalesOrder nso
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Opportunity no WHERE no.Opportunity_bkey = nso.Opportunity_bkey ORDER BY no.SysValidFromDateTime DESC) no
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = SugarEnum_DeliveryStatus_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_DeliveryStatus_bkey
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = SugarEnum_OrderType_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_OrderType_bkey
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = SugarEnum_ConnectionType_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_ConnectionType_bkey
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = SugarEnum_OrderSource_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_OrderSource_bkey
GO
PRINT N'Creating [Fact].[d_Project]...';


GO
CREATE VIEW Fact.d_Project
AS

SELECT  np.Project_key
        , np.SysDatetimeDeletedUTC
        , np.SysModifiedUTC
        , np.SysIsInferred
        , np.SysValidFromDateTime
        , np.SysSrcGenerationDateTime
        , np.Project_bkey
        , ProjectName = ISNULL(np.ProjectName, 'Unknown')
        , ProgramID   = ISNULL(np.ProgramID, 'N/A')
        , Category1ID = ISNULL(np.Category1ID, 'N/A')
        , Category2ID = ISNULL(np.Category2ID, 'N/A')
        , np.PlanFinish
        , np.CloseDate
FROM    Norm.n_Project np
GO
PRINT N'Creating [Fact].[d_Geography]...';


GO
CREATE VIEW Fact.d_Geography
AS

SELECT ng.Geography_key
     , ng.SysDatetimeDeletedUTC
     , ng.SysModifiedUTC
     , ng.SysIsInferred
     , ng.SysValidFromDateTime
     , ng.SysSrcGenerationDateTime
     , ng.Geography_bkey
     , ng.GeographyName
     , ng.MunicipalityCode
     , ng.MunicipalityNamn
     , ng.StateCode
     , ng.StateNamn
     , ng.RegionCode
     , ng.RegionName 
FROM Norm.n_Geography ng
GO
PRINT N'Creating [Fact].[d_Customer]...';


GO
CREATE VIEW Fact.d_Customer
AS

SELECT  nso.SysSrcGenerationDateTime
        , nso.SysValidFromDateTime
        , nso.SysModifiedUTC
        , nso.SysDatetimeDeletedUTC
        , Customer_key = nso.SalesOrder_key
        , CustomerName = nso.FirstName + ' ' + nso.Surname
        , nso.Email
        , nso.MobilePhoneNo
        , nso.PersonalIdentityNumber
        , nso.OrganizationNumber
        , nso.Age
        , nso.Gender
FROM    Norm.n_SalesOrder nso
GO
PRINT N'Creating [Fact].[d_Calendar]...';


GO

CREATE VIEW Fact.d_Calendar
AS
SELECT  nc.SysSrcGenerationDateTime
        , nc.SysValidFromDateTime
        , nc.SysModifiedUTC
        , nc.SysDatetimeDeletedUTC
        , Calendar_key    = CAST(CONVERT(NVARCHAR(8), nc.Calendar_bkey, 112) AS INT)
        , nc.Calendar_bkey
        , CalendarYear    = DATEPART(yyyy, nc.Calendar_bkey)
        , YearMonth       = CAST(DATEPART(yyyy, nc.Calendar_bkey) AS VARCHAR(4)) + '-' + RIGHT(CONVERT(VARCHAR(6), nc.Calendar_bkey, 112), 2)
        , YearWeek        = CAST(DATEPART(yyyy, nc.Calendar_bkey) AS VARCHAR(4)) + '-W' + CAST(DATEPART(wk, nc.Calendar_bkey) AS VARCHAR(2))
        , YearQuarter     = CAST(DATEPART(yyyy, nc.Calendar_bkey) AS VARCHAR(4)) + '-Q' + CAST(DATEPART(qq, nc.Calendar_bkey) AS VARCHAR(2))
        , CalendarQuarter = DATEPART(qq, nc.Calendar_bkey)
        , MonthofYear     = DATEPART(mm, nc.Calendar_bkey)
        , MonthName       = CAST(UPPER(LEFT(DATENAME(m, nc.Calendar_bkey), 1)) + SUBSTRING(DATENAME(m, nc.Calendar_bkey), 2, LEN(nc.Calendar_bkey)) AS VARCHAR(10))
        , WeekOfYear      = DATEPART(wk, nc.Calendar_bkey)
        , DayofWeek       = DATEPART(dw, nc.Calendar_bkey)
        , DayName         = CAST(UPPER(LEFT(DATENAME(dw, nc.Calendar_bkey), 1)) + SUBSTRING(DATENAME(dw, nc.Calendar_bkey), 2, LEN(nc.Calendar_bkey)) AS CHAR(10))
        , DayofMonth      = DATEPART(DAY, nc.Calendar_bkey)
FROM    Norm.n_Calendar nc
WHERE nc.Calendar_key <> -1
GO
PRINT N'Creating [Fact].[d_Area]...';


GO
CREATE VIEW Fact.d_Area
AS

SELECT  na.Area_key
        , na.SysDatetimeDeletedUTC
        , na.SysModifiedUTC
        , na.SysIsInferred
        , na.SysValidFromDateTime
        , na.SysSrcGenerationDateTime
        , na.Area_bkey
        , na.AreaName
        , ng.Geography_key
        , np.Project_key
        , Employee_MetroNetworkManager_key        = Employee_MetroNetworkManager_bkey.Employee_key
        , Employee_RegionConstructionManager_key  = Employee_RegionConstructionManager_bkey.Employee_key
        , Employee_DeliveryStreamLeader_key       = Employee_DeliveryStreamLeader_bkey.Employee_key
        , Employee_ConstructionManager_key        = Employee_ConstructionManager_bkey.Employee_key
        , SugarEnum_ConstructionStatus_key        = SugarEnum_ConstructionStatus_bkey.SugarEnum_key
        , SugarEnum_SalesStatus_key               = SugarEnum_SalesStatus_bkey.SugarEnum_key
        , SugarEnum_SourcingStatus_key            = SugarEnum_SourcingStatus_bkey.SugarEnum_key
        , SugarEnum_IikStatus_key                 = SugarEnum_IikStatus_bkey.SugarEnum_key
        , SugarEnum_AreaType_key                  = SugarEnum_AreaType_bkey.SugarEnum_key
        , SugarEnum_Contractor_key                = SugarEnum_Contractor_bkey.SugarEnum_key
        , SugarEnum_SalesOrganisation_key         = SugarEnum_SalesOrganisation_bkey.SugarEnum_key
        , SugarEnum_ConstructionOrganisation_key  = SugarEnum_ConstructionOrganisation_bkey.SugarEnum_key
        , SugarEnum_SubsidyArea_key               = SugarEnum_SubsidyArea_bkey.SugarEnum_key
        , SugarEnum_ProjectDesign_key             = SugarEnum_ProjectDesign_bkey.SugarEnum_key
        , SugarEnum_CountyAdvisoryBoardStatus_key = SugarEnum_CountyAdvisoryBoardStatus_bkey.SugarEnum_key
        , na.InitialSalesStart
        , na.AfterMarketSalesStart
        , na.StrategicNetworkPlanningComplete
        , na.LeasedUplinkExpected
        , na.LeasedUplinkDeployed
        , na.TRVPermissionNeeded
        , na.SumOfTRVNeeded
        , na.SumOfTRVSubmitted
        , na.SumOfTRVApproved
        , na.ExpectedApprovalOfTRV
        , na.AllTRVApplicationsSubmitted
        , na.AllTRVApplicationsApproved
        , na.CommentOnTRV
        , na.MunicipalLandPermit
        , na.BuildingPermitApproved
        , na.AllBuildingPermitsSubmitted
        , na.CommentOnBuildingPermit
        , na.PlannedInstallationStart
        , na.PlannedInstallationComplete
        , na.PlannedConstructionStart
        , na.FinalDocumentationComplete
FROM    Norm.n_Area na
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Geography ng WHERE ng.Geography_bkey = na.Geography_bkey ORDER BY ng.SysValidFromDateTime DESC) ng
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Project np WHERE np.Project_bkey = na.Project_bkey ORDER BY np.SysValidFromDateTime DESC) np
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Employee ne WHERE ne.Employee_bkey = na.Employee_MetroNetworkManager_bkey ORDER BY ne.SysValidFromDateTime DESC) Employee_MetroNetworkManager_bkey
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Employee ne WHERE ne.Employee_bkey = na.Employee_RegionConstructionManager_bkey ORDER BY ne.SysValidFromDateTime DESC) Employee_RegionConstructionManager_bkey
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Employee ne WHERE ne.Employee_bkey = na.Employee_DeliveryStreamLeader_bkey ORDER BY ne.SysValidFromDateTime DESC) Employee_DeliveryStreamLeader_bkey
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Employee ne WHERE ne.Employee_bkey = na.Employee_ConstructionManager_bkey ORDER BY ne.SysValidFromDateTime DESC) Employee_ConstructionManager_bkey
CROSS APPLY (SELECT TOp 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = na.SugarEnum_ConstructionStatus_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_ConstructionStatus_bkey
CROSS APPLY (SELECT TOp 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = na.SugarEnum_SalesStatus_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_SalesStatus_bkey
CROSS APPLY (SELECT TOp 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = na.SugarEnum_SourcingStatus_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_SourcingStatus_bkey
CROSS APPLY (SELECT TOp 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = na.SugarEnum_IikStatus_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_IikStatus_bkey
CROSS APPLY (SELECT TOp 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = na.SugarEnum_AreaType_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_AreaType_bkey
CROSS APPLY (SELECT TOp 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = na.SugarEnum_Contractor_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_Contractor_bkey
CROSS APPLY (SELECT TOp 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = na.SugarEnum_SalesOrganisation_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_SalesOrganisation_bkey
CROSS APPLY (SELECT TOp 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = na.SugarEnum_ConstructionOrganisation_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_ConstructionOrganisation_bkey
CROSS APPLY (SELECT TOp 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = na.SugarEnum_SubsidyArea_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_SubsidyArea_bkey
CROSS APPLY (SELECT TOp 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = na.SugarEnum_ProjectDesign_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_ProjectDesign_bkey
CROSS APPLY (SELECT TOp 1 * FROM Norm.n_SugarEnum nse WHERE nse.SugarEnum_bkey = na.SugarEnum_CountyAdvisoryBoardStatus_bkey ORDER BY nse.SysValidFromDateTime DESC) SugarEnum_CountyAdvisoryBoardStatus_bkey
GO
PRINT N'Creating [Fact].[d_CustomerCategory]...';


GO
CREATE VIEW Fact.d_CustomerCategory
AS

SELECT ncc.CustomerCategory_key
		 , ncc.SysModifiedUTC
		 , ncc.SysValidFromDateTime
		 , ncc.SysSrcGenerationDateTime
		 , ncc.SysDatetimeDeletedUTC
		 , ncc.CustomerCategory_bkey
		 , ncc.CustomerTypeCategory
		 , ncc.CustomerTypeCategoryDetail
FROM Norm.n_CustomerCategory ncc
GO
PRINT N'Creating [Norm].[vn_SugarEnum]...';


GO
CREATE VIEW Norm.vn_SugarEnum AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY SugarEnum_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_SugarEnum)
							SELECT  t1.SugarEnum_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.SugarEnum_bkey, t2.FieldValue, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.SugarEnum_bkey = t1.SugarEnum_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_SubscriptionProduct]...';


GO
CREATE VIEW Norm.vn_SubscriptionProduct AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY SubscriptionProduct_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_SubscriptionProduct)
							SELECT  t1.SubscriptionProduct_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.SubscriptionProduct_bkey, t2.SubscriptionProduct, t2.SubscriptionProductType, t2.MonthlyPrice, t2.StartPrice, t2.Billable, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.SubscriptionProduct_bkey = t1.SubscriptionProduct_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_Subscription]...';


GO
CREATE VIEW Norm.vn_Subscription AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY Subscription_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_Subscription)
							SELECT  t1.Subscription_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.Subscription_bkey, t2.SubscriptionProduct_bkey, t2.ServiceProvider_bkey, t2.Access_bkey, t2.Calendar_Subscription_bkey, t2.Calendar_Purchase_bkey, t2.ResoposibleSalesEntity, t2.IsClosed, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.Subscription_bkey = t1.Subscription_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_ServiceProvider]...';


GO
CREATE VIEW Norm.vn_ServiceProvider AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY ServiceProvider_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_ServiceProvider)
							SELECT  t1.ServiceProvider_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.ServiceProvider_bkey, t2.ServiceProvider, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.ServiceProvider_bkey = t1.ServiceProvider_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_SalesOrder]...';


GO
CREATE VIEW Norm.vn_SalesOrder AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY SalesOrder_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_SalesOrder)
							SELECT  t1.SalesOrder_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.SalesOrder_bkey, t2.SugarEnum_DeliveryStatus_bkey, t2.SugarEnum_OrderType_bkey, t2.SugarEnum_ConnectionType_bkey, t2.SugarEnum_OrderSource_bkey, t2.Opportunity_bkey, t2.PlannedInstallationDate, t2.ProductBundleYN, t2.ProductBundleName, t2.Campaign6MonthInternet, t2.ConnectionFeeSEK, t2.RotDeductionSEK, t2.RutDeductionSEK, t2.DiscountSEK, t2.ExtraFeeSEK, t2.ProductBundlePriceAdjustmentSEK, t2.TotalRevenueSEK, t2.FirstName, t2.Surname, t2.Email, t2.MobilePhoneNo, t2.PersonalIdentityNumber, t2.OrganizationNumber, t2.Age, t2.Gender, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.SalesOrder_bkey = t1.SalesOrder_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_Project]...';


GO
CREATE VIEW Norm.vn_Project AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY Project_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_Project)
							SELECT  t1.Project_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.Project_bkey, t2.ProjectName, t2.ProgramID, t2.Category1ID, t2.Category2ID, t2.PlanFinish, t2.CloseDate, t2.NumOfHP, t2.NumOfHC, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.Project_bkey = t1.Project_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_Opportunity]...';


GO
CREATE VIEW Norm.vn_Opportunity AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY Opportunity_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_Opportunity)
							SELECT  t1.Opportunity_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.Opportunity_bkey, t2.Area_bkey, t2.Access_bkey, t2.AddressMaster_bkey, t2.OpportunityName, t2.SugarEnum_BusinessType_bkey, t2.CustomerType, t2.AddressStreetAndNo, t2.AddressPostalCode, t2.AddressStreetName, t2.AddressStreetNo, t2.AddressCity, t2.AddressCountry, t2.Latitude, t2.Longitude, t2.Fastighetsbeteckningc, t2.AcquiredAccess, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.Opportunity_bkey = t1.Opportunity_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_Geography]...';


GO
CREATE VIEW Norm.vn_Geography AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY Geography_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_Geography)
							SELECT  t1.Geography_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.Geography_bkey, t2.GeographyName, t2.MunicipalityCode, t2.MunicipalityNamn, t2.StateCode, t2.StateNamn, t2.RegionCode, t2.RegionName, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.Geography_bkey = t1.Geography_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_Employee]...';


GO
CREATE VIEW Norm.vn_Employee AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY Employee_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_Employee)
							SELECT  t1.Employee_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.Employee_bkey, t2.EmployeeName, t2.Title, t2.Department, t2.EmployeeStatus, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.Employee_bkey = t1.Employee_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_CustomerCategory]...';


GO
CREATE VIEW Norm.vn_CustomerCategory AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY CustomerCategory_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_CustomerCategory)
							SELECT  t1.CustomerCategory_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.CustomerCategory_bkey, t2.CustomerTypeCategory, t2.CustomerTypeCategoryDetail, t2.SugarEnum_BusinessType_bkey, t2.SugarEnum_AreaType_bkey, t2.SugarEnum_OrderType_bkey, t2.OpportunityCustomerType, t2.SugarEnum_SubsidyArea_bkey, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.CustomerCategory_bkey = t1.CustomerCategory_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_Calendar]...';


GO
CREATE VIEW Norm.vn_Calendar AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY Calendar_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_Calendar)
							SELECT  t1.Calendar_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.Calendar_bkey, t2.CalendarDate, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.Calendar_bkey = t1.Calendar_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_Area]...';


GO
CREATE VIEW Norm.vn_Area AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY Area_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_Area)
							SELECT  t1.Area_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.Area_bkey, t2.AreaName, t2.Geography_bkey, t2.Project_bkey, t2.Employee_MetroNetworkManager_bkey, t2.Employee_RegionConstructionManager_bkey, t2.Employee_DeliveryStreamLeader_bkey, t2.Employee_ConstructionManager_bkey, t2.SugarEnum_ConstructionStatus_bkey, t2.SugarEnum_SalesStatus_bkey, t2.SugarEnum_SourcingStatus_bkey, t2.SugarEnum_IikStatus_bkey, t2.SugarEnum_AreaType_bkey, t2.SugarEnum_Contractor_bkey, t2.SugarEnum_SalesOrganisation_bkey, t2.SugarEnum_ConstructionOrganisation_bkey, t2.SugarEnum_SubsidyArea_bkey, t2.SugarEnum_ProjectDesign_bkey, t2.SugarEnum_CountyAdvisoryBoardStatus_bkey, t2.InitialSalesStart, t2.AfterMarketSalesStart, t2.StrategicNetworkPlanningComplete, t2.LeasedUplinkExpected, t2.LeasedUplinkDeployed, t2.TRVPermissionNeeded, t2.SumOfTRVNeeded, t2.SumOfTRVSubmitted, t2.SumOfTRVApproved, t2.ExpectedApprovalOfTRV, t2.AllTRVApplicationsSubmitted, t2.AllTRVApplicationsApproved, t2.CommentOnTRV, t2.MunicipalLandPermit, t2.BuildingPermitApproved, t2.AllBuildingPermitsSubmitted, t2.CommentOnBuildingPermit, t2.PlannedInstallationStart, t2.PlannedInstallationComplete, t2.PlannedConstructionStart, t2.FinalDocumentationComplete, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.Area_bkey = t1.Area_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_AccessCategory]...';


GO
CREATE VIEW Norm.vn_AccessCategory AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY AccessCategory_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_AccessCategory)
							SELECT  t1.AccessCategory_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.AccessCategory_bkey, t2.AccessCategory, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.AccessCategory_bkey = t1.AccessCategory_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Norm].[vn_Access]...';


GO
CREATE VIEW Norm.vn_Access AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY Access_bkey ORDER BY SysValidFromDateTime) FROM   Norm.n_Access)
							SELECT  t1.Access_key, t2.SysExecutionLog_key, t2.SysDatetimeInsertedUTC, t2.SysDatetimeUpdatedUTC, t2.SysDatetimeDeletedUTC, t2.SysDatetimeReprocessedUTC, t2.SysModifiedUTC, t2.SysIsInferred, t2.SysValidFromDateTime, t2.SysSrcGenerationDateTime, t2.Access_bkey, t2.Calenar_Installed_bkey, t2.Opportunity_bkey, t2.AccessCategory_Lvl1_bkey, t2.AccessCategory_Lvl2_bkey, t2.AccessCategory_Lvl3_bkey, t2.AccessCategory_Lvl4_bkey, t2.AccessCategory_Lvl5_bkey, t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.Access_bkey = t1.Access_bkey AND t2._isLast = 1
GO
PRINT N'Creating [Fact].[f_Penetration]...';


GO


CREATE VIEW [Fact].[f_Penetration]
AS

-- When the transaction is deleted the values is set to zero
-- Suger doesn't produce a salesorder when a oppertunity is accuired even though the transactions is a activated customer.

SELECT  vo.SysSrcGenerationDateTime
        , vo.SysValidFromDateTime
        , vo.SysModifiedUTC
        , vo.SysDatetimeDeletedUTC
        , Calendar_key    = CAST(CONVERT(NVARCHAR(8), vo.SysSrcGenerationDateTime, 112) AS INT)
        , Penetration_key = CAST('Opp#' + vo.Opportunity_bkey AS NVARCHAR(250))
        , vo.Opportunity_key
        , na.Area_key
        , np.Project_key
        , SalesOrder_key  = -1
        , Customer_key    = -1
        , na2.Access_key
        , NoOfHP          = IIF(vo.AcquiredAccess = 'Yes', 0, 1) * IIF(vo.SysDatetimeDeletedUTC IS NULL, 1, 0)
        , NoOfHC          = IIF(vo.AcquiredAccess = 'Yes', 1, 0) * IIF(vo.SysDatetimeDeletedUTC IS NULL, 1, 0)
        , NoOfInstalled   = 0
FROM    Norm.vn_Opportunity vo
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Area na WHERE na.Area_bkey = vo.Area_bkey ORDER BY na.SysValidFromDateTime DESC) na
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Project np WHERE np.Project_bkey = na.Project_bkey ORDER BY np.SysValidFromDateTime DESC) np
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Access na2 WHERE na2.Access_bkey = vo.Access_bkey ORDER BY na2.SysValidFromDateTime DESC) na2
WHERE vo._isLast = 1 AND vo.Opportunity_key <> -1 AND vo.Opportunity_bkey NOT IN (SELECT vso.Opportunity_bkey FROM Norm.n_SalesOrder vso WHERE vso.Opportunity_bkey <> '-1' AND vso.SugarEnum_DeliveryStatus_bkey  NOT IN ('IP_BESTALLNING#STATUS_LEVERANS_C#ANGRAT', 'IP_BESTALLNING#STATUS_LEVERANS_C#ANNULLERAD', 'IP_BESTALLNING#STATUS_LEVERANS_C#EJVALIDERAD'))
UNION ALL
SELECT  nso.SysSrcGenerationDateTime
        , nso.SysValidFromDateTime
        , nso.SysModifiedUTC
        , nso.SysDatetimeDeletedUTC
        , Calendar_key    = CAST(CONVERT(NVARCHAR(8), nso.SysSrcGenerationDateTime, 112) AS INT)
        , Penetration_key = CAST('SO#' + nso.SalesOrder_bkey AS NVARCHAR(250))
        , no.Opportunity_key
        , na.Area_key
        , np.Project_key
        , nso.SalesOrder_key
        , Customer_key    = nso.SalesOrder_key
        , na2.Access_key
        , NoOfHP          = -1 * IIF(nso.SysDatetimeDeletedUTC IS NULL, 1, 0) * IIF(nso.SugarEnum_DeliveryStatus_bkey IN ('IP_BESTALLNING#STATUS_LEVERANS_C#ANGRAT', 'IP_BESTALLNING#STATUS_LEVERANS_C#ANNULLERAD', 'IP_BESTALLNING#STATUS_LEVERANS_C#EJVALIDERAD'), 0, 1)
        , NoOfHC          = IIF(nso.SysDatetimeDeletedUTC IS NULL, 1, 0) * IIF(nso.SugarEnum_DeliveryStatus_bkey IN ('IP_BESTALLNING#STATUS_LEVERANS_C#ANGRAT', 'IP_BESTALLNING#STATUS_LEVERANS_C#ANNULLERAD', 'IP_BESTALLNING#STATUS_LEVERANS_C#EJVALIDERAD'), 0, 1)
        , NoOfInstalled   = 0
FROM    Norm.vn_SalesOrder  nso
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Opportunity no WHERE no.Opportunity_bkey = nso.Opportunity_bkey ORDER BY no.SysValidFromDateTime DESC) no
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Area na WHERE na.Area_bkey = no.Area_bkey ORDER BY na.SysValidFromDateTime DESC) na
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Project np WHERE np.Project_bkey = na.Project_bkey ORDER BY np.SysValidFromDateTime DESC) np
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Access na2 WHERE na2.Access_bkey = no.Access_bkey ORDER BY na2.SysValidFromDateTime DESC) na2
WHERE    nso._isLast =1 AND  nso.SalesOrder_bkey <> '-1'
UNION ALL
SELECT  vo.SysSrcGenerationDateTime
        , na2.SysValidFromDateTime
        , na2.SysModifiedUTC
        , na2.SysDatetimeDeletedUTC
        , Calendar_key    = CAST(CONVERT(NVARCHAR(8), na2.Calenar_Installed_bkey, 112) AS INT)
        , Penetration_key = CAST('Acc#' + vo.Opportunity_bkey AS NVARCHAR(250))
        , vo.Opportunity_key
        , na.Area_key
        , np.Project_key
        , nso.SalesOrder_key
		, Customer_key    = nso.SalesOrder_key
        , na2.Access_key
        , NoOfHP          = 0
        , NoOfHC          = 0
        , NoOfInstalled   = IIF(na2.SysDatetimeDeletedUTC IS NULL, 1, 0)
FROM    Norm.vn_Opportunity vo
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Access na2 WHERE na2.Access_bkey = vo.Access_bkey ORDER BY na2.SysValidFromDateTime DESC) na2
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Area na WHERE na.Area_bkey = vo.Area_bkey ORDER BY na.SysValidFromDateTime DESC) na
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_Project np WHERE np.Project_bkey = na.Project_bkey ORDER BY np.SysValidFromDateTime DESC) np
CROSS APPLY (SELECT TOP 1 * FROM Norm.n_SalesOrder nso WHERE nso.Opportunity_bkey = vo.Opportunity_bkey ORDER BY nso.SysValidFromDateTime DESC) nso
WHERE na2.Calenar_Installed_bkey IS NOT NULL AND vo.Access_bkey <> -1 AND vo._isLast = 1
GO
PRINT N'Creating [Fact].[d_Opportunity]...';


GO
CREATE VIEW Fact.d_Opportunity
AS


WITH temp AS (
			SELECT	SugarEnum_OrderType_bkey = re.SugarEnum_bkey
			FROM	Norm.n_SugarEnum re
			WHERE	re.SugarEnum_bkey LIKE 'IP_BESTALLNING#BESTALLNINGSTYP_C%')
	, temp2 AS (SELECT		cc.CustomerCategory_key
							, cc.CustomerCategory_bkey
							, cc.CustomerTypeCategory
							, cc.CustomerTypeCategoryDetail
							, SugarEnum_BusinessType_bkey = ISNULL(NULLIF(CAST(UPPER(LTRIM(RTRIM(ts1.SplitValue))) AS NVARCHAR(100)), ''), '%')
							, SugarEnum_AreaType_bkey = ISNULL(NULLIF(CAST(UPPER(LTRIM(RTRIM(cc.SugarEnum_AreaType_bkey))) AS NVARCHAR(100)), ''), '%')
							, SugarEnum_OrderType_bkey = ISNULL(NULLIF(COALESCE(t.SugarEnum_OrderType_bkey, t2.SugarEnum_OrderType_bkey, '%'), ''), '%')
							, SugarEnum_SubsidyArea_bkey = ISNULL(NULLIF(CAST(UPPER(LTRIM(RTRIM(ts2.SplitValue))) AS NVARCHAR(100)), ''), '%')
							, OpportunityCustomerType = ISNULL(NULLIF(CAST(UPPER(LTRIM(RTRIM(cc.OpportunityCustomerType))) AS NVARCHAR(100)), ''), '%')
				FROM		Norm.vn_CustomerCategory cc
				CROSS APPLY (SELECT * FROM	dbo.tvf_split(cc.SugarEnum_BusinessType_bkey, ',') ) ts1
				CROSS APPLY (SELECT * FROM	dbo.tvf_split(cc.SugarEnum_SubsidyArea_bkey, ',') ) ts2
				LEFT JOIN	temp t
							ON t.SugarEnum_OrderType_bkey	= REPLACE(cc.SugarEnum_OrderType_bkey, '=', '')
							AND cc.SugarEnum_OrderType_bkey LIKE ('=%')
				LEFT JOIN	temp t2
							ON t2.SugarEnum_OrderType_bkey	<> REPLACE(cc.SugarEnum_OrderType_bkey, '<>', '')
							AND cc.SugarEnum_OrderType_bkey LIKE ('<>%')
				WHERE		cc._isLast						= 1
							AND cc.CustomerCategory_bkey	<> -1)
SELECT		NO.Opportunity_key
			, NO.SysDatetimeDeletedUTC
			, NO.SysModifiedUTC
			, NO.SysIsInferred
			, NO.SysValidFromDateTime
			, NO.SysSrcGenerationDateTime
			, NO.Opportunity_bkey
			, NO.OpportunityName
			, Area_key = ISNULL(na.Area_key, -1)
			, Access_key = ISNULL(na3.Access_key, -1)
			, SalesOrder_key = ISNULL(vso.SalesOrder_key, -1)
			, SugarEnum_BusinessType_key = ISNULL(vse.SugarEnum_key, -1)
			, NO.AddressStreetAndNo
			, NO.AddressPostalCode
			, NO.AddressStreetName
			, NO.AddressStreetNo
			, NO.AddressCity
			, NO.AddressCountry
			, NO.Latitude
			, NO.Longitude
			, NO.Fastighetsbeteckningc
			, NO.AcquiredAccess
			, CustomerCategory_key = ISNULL(t2.CustomerCategory_key, -1)
FROM		Norm.n_Opportunity NO
LEFT JOIN	Norm.vn_Area na
			ON na.Area_bkey = NO.Area_bkey
			AND na._isLast = 1
LEFT JOIN	Norm.vn_Access na3
			ON na3.Access_bkey = NO.Access_bkey
			AND na3._isLast = 1
LEFT JOIN	Norm.vn_SugarEnum vse
			ON vse.SugarEnum_bkey = NO.SugarEnum_BusinessType_bkey
			AND vse._isLast = 1
OUTER APPLY (SELECT TOP 1 * FROM Norm.n_SalesOrder vso	WHERE vso.Opportunity_bkey = no.Opportunity_bkey ORDER BY vso.SysValidFromDateTime) vso
OUTER APPLY (	SELECT	TOP 1 *
				FROM	temp2 t2
				WHERE	NO.SugarEnum_BusinessType_bkey LIKE t2.SugarEnum_BusinessType_bkey
						AND na.SugarEnum_AreaType_bkey LIKE t2.SugarEnum_AreaType_bkey
						AND NO.CustomerType LIKE t2.OpportunityCustomerType
						AND na.SugarEnum_SubsidyArea_bkey LIKE t2.SugarEnum_SubsidyArea_bkey
						AND t2.CustomerCategory_bkey	<> -1
						AND ISNULL(vso.SugarEnum_OrderType_bkey, 'IP_BESTALLNING#BESTALLNINGSTYP_C#STANDARD') LIKE ISNULL(t2.SugarEnum_OrderType_bkey, '%')) t2
GO
PRINT N'Creating [dbo].[CreateNormIsLastView]...';


GO
CREATE PROCEDURE [dbo].[CreateNormIsLastView]
AS


/* declare variables */
DECLARE @sqldrop NVARCHAR(max), @sqlcreate NVARCHAR(max)

DECLARE sqlCreateView CURSOR FAST_FORWARD READ_ONLY FOR 
SELECT  sqldrop     = 'IF EXISTS (SELECT * from sys.objects WHERE object_id = OBJECT_ID(N''' + t._viewFullName + ''') AND type IN (N''V'')) DROP VIEW ' + t._viewFullName
        , sqlCreate = CASE WHEN t._type = 'Fact' THEN 'CREATE VIEW ' + t._viewFullName + ' AS
							SELECT * 
							FROM (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY ' + t._bkey + ' ORDER BY SysValidFromDateTime) FROM   ' + t._tableFullName + ') t 
							WHERE t._isLast = 1'
                           WHEN t._type = 'Dim' THEN 'CREATE VIEW ' + t._viewFullName + ' AS
							WITH temp AS (SELECT *, _isLast = LEAD(0,1,1) OVER (PARTITION BY ' + t._bkey + ' ORDER BY SysValidFromDateTime) FROM   ' + t._tableFullName + ')
							SELECT '                 + t._column + ', t1._isLast
							FROM temp t1 
							INNER JOIN temp t2 ON t2.' + t._bkey + ' = t1.' + t._bkey + ' AND t2._isLast = 1' ELSE 'ERROR' END
FROM    (   SELECT  _bkey            = REPLACE(t.TABLE_NAME, 'n_', '') + '_bkey'
                    , _key           = REPLACE(t.TABLE_NAME, 'n_', '') + '_key'
                    , _tableName     = t.TABLE_NAME
                    , _viewName      = 'v' + t.TABLE_NAME
                    , _schema        = t.TABLE_SCHEMA
                    , _tableFullName = t.TABLE_SCHEMA + '.' + t.TABLE_NAME
                    , _viewFullName  = t.TABLE_SCHEMA + '.' + 'v' + t.TABLE_NAME
                    , _column        = STUFF((   SELECT     CASE WHEN c.COLUMN_NAME = REPLACE(t.TABLE_NAME, 'n_', '') + '_key' THEN ', t1.' ELSE ', t2.' END + c.COLUMN_NAME
                                                 FROM       INFORMATION_SCHEMA.COLUMNS c
                                                 WHERE      c.TABLE_NAME = t.TABLE_NAME
                                                   AND      c.TABLE_SCHEMA    = t.TABLE_SCHEMA
                                                   AND      c.TABLE_CATALOG   = t.TABLE_CATALOG
                                                 ORDER BY   c.ORDINAL_POSITION
                                                 FOR XML PATH(''))
                                             , 1
                                             , 1
                                             , '')
                    , _type          = CASE WHEN EXISTS (   SELECT      *
                                                            FROM        INFORMATION_SCHEMA.COLUMNS c
                                                            WHERE       c.TABLE_NAME = t.TABLE_NAME
                                                              AND       c.TABLE_SCHEMA     = t.TABLE_SCHEMA
                                                              AND       c.TABLE_CATALOG    = t.TABLE_CATALOG
                                                              AND       c.COLUMN_NAME      = REPLACE(t.TABLE_NAME, 'n_', '') + '_key') THEN 'Dim' ELSE 'Fact' END
            FROM    DWH_2_Norm.INFORMATION_SCHEMA.TABLES t
            WHERE   t.TABLE_TYPE = 'BASE TABLE') t


OPEN sqlCreateView

FETCH NEXT FROM sqlCreateView INTO @sqldrop, @sqlcreate

WHILE @@FETCH_STATUS = 0
BEGIN
    
	PRINT @sqldrop
	EXEC(@sqldrop)

	PRINT @sqlcreate
	EXEC(@sqlcreate)
    FETCH NEXT FROM sqlCreateView INTO @sqldrop, @sqlcreate
END

CLOSE sqlCreateView
DEALLOCATE sqlCreateView
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
