/*
Deployment script for DevelopmentFrameworkConfig

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DWH_2_Norm "DWH_2_Norm"
:setvar DWH_3_Fact "DWH_3_Fact"
:setvar DatabaseName "DevelopmentFrameworkConfig"
:setvar DefaultFilePrefix "DevelopmentFrameworkConfig"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Finnish_Swedish_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
PRINT N'Creating [Deployment]...';


GO
CREATE SCHEMA [Deployment]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Error]...';


GO
CREATE SCHEMA [Error]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Logging]...';


GO
CREATE SCHEMA [Logging]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Maintenance]...';


GO
CREATE SCHEMA [Maintenance]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Metadata]...';


GO
CREATE SCHEMA [Metadata]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [ssis]...';


GO
CREATE SCHEMA [ssis]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Metadata].[DestinationTableLog]...';


GO
CREATE TABLE [Metadata].[DestinationTableLog] (
    [DestinationTableLogID]   INT           IDENTITY (1, 1) NOT NULL,
    [SourceTableCatalog]      VARCHAR (128) NULL,
    [SourceSchemaName]        VARCHAR (128) NULL,
    [SourceTableName]         VARCHAR (128) NULL,
    [DestinationTableCatalog] VARCHAR (128) NOT NULL,
    [DestinationSchemaName]   VARCHAR (128) NOT NULL,
    [DestinationTableName]    VARCHAR (128) NOT NULL,
    [VersionComment]          VARCHAR (128) NOT NULL,
    [UserNameInserted]        VARCHAR (128) NULL,
    [DateTimeInsertedUTC]     DATETIME      NULL
);


GO
PRINT N'Creating [Metadata].[DataTypeTranslation]...';


GO
CREATE TABLE [Metadata].[DataTypeTranslation] (
    [Id]            INT          IDENTITY (1, 1) NOT NULL,
    [SQLServer]     VARCHAR (50) NULL,
    [SSIS]          VARCHAR (50) NULL,
    [Biml]          VARCHAR (50) NULL,
    [DataTypeGroup] VARCHAR (50) NULL,
    CONSTRAINT [PK_DataTypeTranslation] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride]...';


GO
CREATE TABLE [Metadata].[DerivedColumnOverride] (
    [Id]                INT            IDENTITY (1, 1) NOT NULL,
    [DerivedColumnType] VARCHAR (50)   NOT NULL,
    [DerivedColumnName] VARCHAR (50)   NOT NULL,
    [OverrideValue]     NVARCHAR (255) NOT NULL,
    [DataType]          NVARCHAR (50)  NULL,
    [Comment]           TEXT           NULL,
    [ApplicableTable]   NVARCHAR (255) NULL,
    [MaxLength]         SMALLINT       NULL,
    CONSTRAINT [PK_DerivedColumnOverride] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Metadata].[DestinationTable]...';


GO
CREATE TABLE [Metadata].[DestinationTable] (
    [SourceTableCatalog]                VARCHAR (128)    NULL,
    [SourceSchemaName]                  VARCHAR (128)    NULL,
    [SourceTableName]                   VARCHAR (128)    NULL,
    [SourceFile]                        VARCHAR (128)    NULL,
    [DestinationTableCatalog]           VARCHAR (128)    NOT NULL,
    [DestinationSchemaName]             VARCHAR (128)    NOT NULL,
    [DestinationTableName]              VARCHAR (128)    NOT NULL,
    [StageTableCatalog]                 VARCHAR (128)    NULL,
    [StageSchemaName]                   VARCHAR (128)    NULL,
    [StageTableName]                    VARCHAR (128)    NULL,
    [CompressionType]                   VARCHAR (50)     NOT NULL,
    [SSISPackageName]                   VARCHAR (128)    NOT NULL,
    [SSISPackageGUID]                   UNIQUEIDENTIFIER NOT NULL,
    [SSISIncrementalLoad]               BIT              NOT NULL,
    [CreateTable]                       TINYINT          NOT NULL,
    [CreateStageTable]                  BIT              NOT NULL,
    [CreateChecksumColumns]             BIT              NOT NULL,
    [CreateChecksumIndexes]             BIT              NOT NULL,
    [CreateSSISPackage]                 TINYINT          NOT NULL,
    [UseSSISLoggingFrameWork]           TINYINT          NOT NULL,
    [SSISConfigurationFrameWorkCatalog] NVARCHAR (50)    NOT NULL,
    [DtsConfigEnvironmentVariableName]  NVARCHAR (50)    NOT NULL,
    [CDCInstanceName]                   VARCHAR (128)    NULL,
    [SourceSelectClause]                VARCHAR (1000)   NULL,
    [SourceFilterCondition]             VARCHAR (500)    NULL,
    [DestinationDeleteCondition]        VARCHAR (255)    NULL,
    [GroupName]                         VARCHAR (20)     NOT NULL,
    [DestinationTableID]                INT              IDENTITY (1, 1) NOT NULL,
    [SourceServer]                      VARCHAR (128)    NULL,
    [UserNameInserted]                  VARCHAR (128)    NULL,
    [DateTimeInsertedUTC]               DATETIME         NULL,
    [UserNameUpdated]                   VARCHAR (128)    NULL,
    [DateTimeUpdatedUTC]                DATETIME         NULL,
    [StageFilterCondition]              VARCHAR (500)    NULL,
    [IsPartitioned]                     BIT              NULL,
    [PartitionFunctionName]             NVARCHAR (128)   NULL,
    [PartitionSchemeName]               NVARCHAR (128)   NULL,
    [PartitionKeyColumnName]            NVARCHAR (128)   NULL,
    [PartitionETLStrategy]              NVARCHAR (128)   NULL,
    [SourceMaxRecursion]                INT              NULL,
    [IsMigrationPackage]                BIT              NOT NULL,
    [ETLLookupCacheMode]                NVARCHAR (10)    NOT NULL,
    [RequireTransaction]                BIT              NOT NULL,
    [EmptyTargetTable]                  BIT              NOT NULL,
    [ETLLookupCacheFilter]              NVARCHAR (1000)  NULL,
    [IsInProduction]                    BIT              NOT NULL,
    [FactScdType]                       TINYINT          NULL,
    CONSTRAINT [PK_Metadata_DestinationTable] PRIMARY KEY CLUSTERED ([SSISPackageName] ASC)
);


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended]...';


GO
CREATE TABLE [Metadata].[DestinationFieldExtended] (
    [ID]                       INT             IDENTITY (1, 1) NOT NULL,
    [COLUMN_NAME]              NVARCHAR (128)  NOT NULL,
    [DATA_TYPE]                NVARCHAR (128)  NOT NULL,
    [CHARACTER_MAXIMUM_LENGTH] INT             NULL,
    [DATETIME_PRECISION]       INT             NULL,
    [ORDINAL_POSITION]         INT             NULL,
    [NUMERIC_PRECISION]        TINYINT         NULL,
    [NUMERIC_SCALE]            INT             NULL,
    [IS_NULLABLE]              VARCHAR (3)     NOT NULL,
    [IncludeInChecksum_src]    BIT             NOT NULL,
    [TableColumnSpecification] NVARCHAR (1000) NULL,
    [IsIdentity]               BIT             NOT NULL,
    [CreateColumnIndex]        BIT             NULL,
    [SourceTableCatalog]       NVARCHAR (128)  NULL,
    [DestinationTableCatalog]  NVARCHAR (128)  NOT NULL,
    [DestinationSchemaName]    NVARCHAR (128)  NOT NULL,
    [ApplicableTable]          NVARCHAR (128)  NULL,
    [SSISDataType]             NVARCHAR (128)  NULL,
    [SSISDataTypeLength]       INT             NULL,
    [SSISColumnSpecification]  NVARCHAR (255)  NULL,
    [SetFieldOnInsert]         BIT             NOT NULL,
    [SetFieldOnUpdate]         BIT             NOT NULL,
    [SetFieldOnDelete]         BIT             NOT NULL,
    [GroupName]                VARCHAR (20)    NULL,
    CONSTRAINT [UQ_DestinationFieldExtended] UNIQUE NONCLUSTERED ([DestinationTableCatalog] ASC, [SourceTableCatalog] ASC, [DestinationSchemaName] ASC, [ApplicableTable] ASC, [COLUMN_NAME] ASC)
);


GO
PRINT N'Creating [Metadata].[DestinationTableGroup]...';


GO
CREATE TABLE [Metadata].[DestinationTableGroup] (
    [GroupName] VARCHAR (20) NOT NULL,
    CONSTRAINT [UQ_DestinationTableGroup] UNIQUE NONCLUSTERED ([GroupName] ASC)
);


GO
PRINT N'Creating [Metadata].[SourceField]...';


GO
CREATE TABLE [Metadata].[SourceField] (
    [TABLE_CATALOG]            VARCHAR (128)   NOT NULL,
    [TABLE_SCHEMA]             VARCHAR (128)   NOT NULL,
    [TABLE_NAME]               VARCHAR (128)   NOT NULL,
    [COLUMN_NAME]              VARCHAR (128)   NOT NULL,
    [ORDINAL_POSITION]         INT             NULL,
    [COLUMN_DEFAULT]           NVARCHAR (4000) NULL,
    [IS_NULLABLE]              VARCHAR (3)     NULL,
    [DATA_TYPE]                NVARCHAR (128)  NULL,
    [CHARACTER_MAXIMUM_LENGTH] INT             NULL,
    [CHARACTER_OCTET_LENGTH]   INT             NULL,
    [NUMERIC_PRECISION]        TINYINT         NULL,
    [NUMERIC_PRECISION_RADIX]  SMALLINT        NULL,
    [NUMERIC_SCALE]            INT             NULL,
    [DATETIME_PRECISION]       SMALLINT        NULL,
    [CHARACTER_SET_CATALOG]    NVARCHAR (128)  NULL,
    [CHARACTER_SET_SCHEMA]     NVARCHAR (128)  NULL,
    [CHARACTER_SET_NAME]       NVARCHAR (128)  NULL,
    [COLLATION_CATALOG]        NVARCHAR (128)  NULL,
    [COLLATION_SCHEMA]         NVARCHAR (128)  NULL,
    [COLLATION_NAME]           NVARCHAR (128)  NULL,
    [DOMAIN_CATALOG]           NVARCHAR (128)  NULL,
    [DOMAIN_SCHEMA]            NVARCHAR (128)  NULL,
    [DOMAIN_NAME]              NVARCHAR (128)  NULL,
    [DestinationTableCatalog]  NVARCHAR (128)  NOT NULL,
    [TABLE_SERVER]             VARCHAR (128)   NULL,
    [SourceFieldID]            INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [UQ_SourceField] UNIQUE CLUSTERED ([TABLE_CATALOG] ASC, [TABLE_SCHEMA] ASC, [TABLE_NAME] ASC, [COLUMN_NAME] ASC, [DestinationTableCatalog] ASC, [TABLE_SERVER] ASC)
);


GO
PRINT N'Creating [Metadata].[SourceFile]...';


GO
CREATE TABLE [Metadata].[SourceFile] (
    [SourceTableCatalog]        VARCHAR (128) NOT NULL,
    [SourceSchemaName]          VARCHAR (128) NOT NULL,
    [SourceTableName]           VARCHAR (128) NOT NULL,
    [ColumnNamesInFirstDataRow] BIT           NOT NULL,
    [HeaderRowsToSkip]          SMALLINT      NOT NULL,
    [DataRowsToSkip]            SMALLINT      NOT NULL,
    [FlatFileType]              VARCHAR (20)  NOT NULL,
    [HeaderRowDelimiter]        VARCHAR (5)   NOT NULL,
    [RowDelimiter]              VARCHAR (5)   NOT NULL,
    [ColumnDelimiter]           VARCHAR (5)   NULL,
    [TextQualifier]             VARCHAR (5)   NULL,
    [IsUnicode]                 BIT           NOT NULL,
    CONSTRAINT [PK_SourceFile] PRIMARY KEY CLUSTERED ([SourceTableCatalog] ASC, [SourceSchemaName] ASC, [SourceTableName] ASC)
);


GO
PRINT N'Creating [Metadata].[TableKeyDefinition]...';


GO
CREATE TABLE [Metadata].[TableKeyDefinition] (
    [TableCatalog]            VARCHAR (128)  NOT NULL,
    [SchemaName]              VARCHAR (128)  NOT NULL,
    [TableName]               VARCHAR (128)  NOT NULL,
    [TableKeyName]            VARCHAR (128)  NULL,
    [COLUMN_NAME]             VARCHAR (128)  NOT NULL,
    [DATA_TYPE]               VARCHAR (128)  NOT NULL,
    [KeyType]                 VARCHAR (50)   NOT NULL,
    [KeyColumnOrder]          SMALLINT       NOT NULL,
    [IncludedColumn]          BIT            NOT NULL,
    [TableKeyDefinitionRowID] INT            IDENTITY (1, 1) NOT NULL,
    [IndexStorageLocation]    NVARCHAR (128) NOT NULL,
    [FilterPredicate]         NVARCHAR (128) NULL,
    [IsAscendingOrder]        BIT            NOT NULL,
    [IndexIsUnique]           BIT            NOT NULL,
    [IndexFillFactor]         SMALLINT       NULL,
    CONSTRAINT [UQ_TableKeyDefinition] UNIQUE NONCLUSTERED ([TableCatalog] ASC, [SchemaName] ASC, [TableName] ASC, [TableKeyName] ASC, [COLUMN_NAME] ASC)
);


GO
PRINT N'Creating [Metadata].[EnvironmentVariables]...';


GO
CREATE TABLE [Metadata].[EnvironmentVariables] (
    [Id]                                       INT            IDENTITY (1, 1) NOT NULL,
    [StagingEnvironmentName]                   VARCHAR (50)   NULL,
    [NormEnvironmentName]                      VARCHAR (50)   NULL,
    [MartEnvironmentName]                      VARCHAR (50)   NULL,
    [DefaultTableCompressionType]              VARCHAR (50)   NOT NULL,
    [DefaultSSISIncrementalLoad]               BIT            NOT NULL,
    [DefaultSSISConfigurationFrameWorkCatalog] NVARCHAR (50)  NOT NULL,
    [DefaultDtsConfigEnvironmentVariableName]  NVARCHAR (50)  NOT NULL,
    [DefaultNormLayerIndexStorageLocation]     NVARCHAR (128) NOT NULL,
    [DefaultNormLayerDataStorageLocation]      NVARCHAR (128) NOT NULL,
    [DefaultMartLayerIndexStorageLocation]     NVARCHAR (128) NOT NULL,
    [DefaultMartLayerDataStorageLocation]      NVARCHAR (128) NOT NULL,
    [RawEnvironmentName]                       VARCHAR (50)   NULL,
    [DefaultRawLayerIndexStorageLocation]      VARCHAR (50)   NOT NULL,
    [DefaultRawLayerDataStorageLocation]       VARCHAR (50)   NOT NULL,
    CONSTRAINT [PK_EnvironmentVariables] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_CompressionType]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_CompressionType] DEFAULT (N'NONE') FOR [CompressionType];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_SSISPackageGUID]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_SSISPackageGUID] DEFAULT (newid()) FOR [SSISPackageGUID];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_SSISIncrementalLoad]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_SSISIncrementalLoad] DEFAULT ((0)) FOR [SSISIncrementalLoad];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_CreateStageTable]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_CreateStageTable] DEFAULT ((0)) FOR [CreateStageTable];


GO
PRINT N'Creating [Metadata].[DF_TablesForDestinations_CreateChecksumColumns]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_TablesForDestinations_CreateChecksumColumns] DEFAULT ((1)) FOR [CreateChecksumColumns];


GO
PRINT N'Creating [Metadata].[DF_TablesForDestinations_CreateIndexesForChecksumColumns]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_TablesForDestinations_CreateIndexesForChecksumColumns] DEFAULT ((1)) FOR [CreateChecksumIndexes];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_CreateSSISPackage]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_CreateSSISPackage] DEFAULT ((1)) FOR [CreateSSISPackage];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_ActivateLoggingFrameWork]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_ActivateLoggingFrameWork] DEFAULT ((1)) FOR [UseSSISLoggingFrameWork];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_SSISConfigurationFrameWorkCatalog]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_SSISConfigurationFrameWorkCatalog] DEFAULT ('DWH_0_Admin') FOR [SSISConfigurationFrameWorkCatalog];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_DtsConfigEnvironmentVariableName]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_DtsConfigEnvironmentVariableName] DEFAULT ('J_dwautogen_SSISAdminConfig') FOR [DtsConfigEnvironmentVariableName];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_GroupName]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_GroupName] DEFAULT ('All') FOR [GroupName];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_UserName]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_UserName] DEFAULT (suser_sname()) FOR [UserNameInserted];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_DateTimeInsertedUTC]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_DateTimeInsertedUTC] DEFAULT (getutcdate()) FOR [DateTimeInsertedUTC];


GO
PRINT N'Creating unnamed constraint on [Metadata].[DestinationTable]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD DEFAULT ((0)) FOR [IsPartitioned];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_IsMigrationPackage]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_IsMigrationPackage] DEFAULT ((0)) FOR [IsMigrationPackage];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_ETLLookupCacheMode]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_ETLLookupCacheMode] DEFAULT (N'Full') FOR [ETLLookupCacheMode];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_UseTransactionOnDestination]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_UseTransactionOnDestination] DEFAULT ((0)) FOR [RequireTransaction];


GO
PRINT N'Creating [Metadata].[DF_DestinationTable_EmptyTargetTable]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_DestinationTable_EmptyTargetTable] DEFAULT ((0)) FOR [EmptyTargetTable];


GO
PRINT N'Creating [Metadata].[DF_IsInProduction]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [DF_IsInProduction] DEFAULT ((0)) FOR [IsInProduction];


GO
PRINT N'Creating [Metadata].[DF_FieldsExtendedForDestinations_IS_NULLABLE]...';


GO
ALTER TABLE [Metadata].[DestinationFieldExtended]
    ADD CONSTRAINT [DF_FieldsExtendedForDestinations_IS_NULLABLE] DEFAULT ('NO') FOR [IS_NULLABLE];


GO
PRINT N'Creating [Metadata].[DF_DestinationFieldExtended_IncludeInChecksum_src]...';


GO
ALTER TABLE [Metadata].[DestinationFieldExtended]
    ADD CONSTRAINT [DF_DestinationFieldExtended_IncludeInChecksum_src] DEFAULT ((0)) FOR [IncludeInChecksum_src];


GO
PRINT N'Creating [Metadata].[DF_DestinationFieldExtended_IsIdentity]...';


GO
ALTER TABLE [Metadata].[DestinationFieldExtended]
    ADD CONSTRAINT [DF_DestinationFieldExtended_IsIdentity] DEFAULT ((0)) FOR [IsIdentity];


GO
PRINT N'Creating [Metadata].[DF_DestinationFieldExtended_DestinationSchemaName]...';


GO
ALTER TABLE [Metadata].[DestinationFieldExtended]
    ADD CONSTRAINT [DF_DestinationFieldExtended_DestinationSchemaName] DEFAULT ('-') FOR [DestinationSchemaName];


GO
PRINT N'Creating [Metadata].[DF_DestinationFieldExtended_SetFieldAtInsert]...';


GO
ALTER TABLE [Metadata].[DestinationFieldExtended]
    ADD CONSTRAINT [DF_DestinationFieldExtended_SetFieldAtInsert] DEFAULT ((1)) FOR [SetFieldOnInsert];


GO
PRINT N'Creating [Metadata].[DF_DestinationFieldExtended_GroupName]...';


GO
ALTER TABLE [Metadata].[DestinationFieldExtended]
    ADD CONSTRAINT [DF_DestinationFieldExtended_GroupName] DEFAULT ('All') FOR [GroupName];


GO
PRINT N'Creating [Metadata].[DF_TableKeyDefinition_ColumnOrderInTableKeyDefinition]...';


GO
ALTER TABLE [Metadata].[TableKeyDefinition]
    ADD CONSTRAINT [DF_TableKeyDefinition_ColumnOrderInTableKeyDefinition] DEFAULT ((1)) FOR [KeyColumnOrder];


GO
PRINT N'Creating [Metadata].[DF_TableKeyDefinition_IncludedColumn]...';


GO
ALTER TABLE [Metadata].[TableKeyDefinition]
    ADD CONSTRAINT [DF_TableKeyDefinition_IncludedColumn] DEFAULT ((0)) FOR [IncludedColumn];


GO
PRINT N'Creating unnamed constraint on [Metadata].[TableKeyDefinition]...';


GO
ALTER TABLE [Metadata].[TableKeyDefinition]
    ADD DEFAULT ('Norm_Index') FOR [IndexStorageLocation];


GO
PRINT N'Creating unnamed constraint on [Metadata].[TableKeyDefinition]...';


GO
ALTER TABLE [Metadata].[TableKeyDefinition]
    ADD DEFAULT ((1)) FOR [IsAscendingOrder];


GO
PRINT N'Creating [Metadata].[DF_TableKeyDefinition_IndexIsUnique]...';


GO
ALTER TABLE [Metadata].[TableKeyDefinition]
    ADD CONSTRAINT [DF_TableKeyDefinition_IndexIsUnique] DEFAULT ((0)) FOR [IndexIsUnique];


GO
PRINT N'Creating [Metadata].[DF_EnvironmentVariables_DefaultTableCompressionType]...';


GO
ALTER TABLE [Metadata].[EnvironmentVariables]
    ADD CONSTRAINT [DF_EnvironmentVariables_DefaultTableCompressionType] DEFAULT ('PAGE') FOR [DefaultTableCompressionType];


GO
PRINT N'Creating [Metadata].[DF_EnvironmentVariables_DefaultSSISIncrementalLoad]...';


GO
ALTER TABLE [Metadata].[EnvironmentVariables]
    ADD CONSTRAINT [DF_EnvironmentVariables_DefaultSSISIncrementalLoad] DEFAULT ((1)) FOR [DefaultSSISIncrementalLoad];


GO
PRINT N'Creating [Metadata].[DF_EnvironmentVariables_DefaultSSISConfigurationFrameWorkCatalog]...';


GO
ALTER TABLE [Metadata].[EnvironmentVariables]
    ADD CONSTRAINT [DF_EnvironmentVariables_DefaultSSISConfigurationFrameWorkCatalog] DEFAULT (N'DWH_0_Admin') FOR [DefaultSSISConfigurationFrameWorkCatalog];


GO
PRINT N'Creating [Metadata].[DF_EnvironmentVariables_DefaultDtsConfigEnvironmentVariableName]...';


GO
ALTER TABLE [Metadata].[EnvironmentVariables]
    ADD CONSTRAINT [DF_EnvironmentVariables_DefaultDtsConfigEnvironmentVariableName] DEFAULT (N'J.dwautogen_SSISAdminConfig') FOR [DefaultDtsConfigEnvironmentVariableName];


GO
PRINT N'Creating [Metadata].[DF_EnvironmentVariables_DefaultNormLayerIndexStorageLocation]...';


GO
ALTER TABLE [Metadata].[EnvironmentVariables]
    ADD CONSTRAINT [DF_EnvironmentVariables_DefaultNormLayerIndexStorageLocation] DEFAULT (N'Norm_Index') FOR [DefaultNormLayerIndexStorageLocation];


GO
PRINT N'Creating [Metadata].[DF_EnvironmentVariables_DefaultNormLayerDataStorageLocation]...';


GO
ALTER TABLE [Metadata].[EnvironmentVariables]
    ADD CONSTRAINT [DF_EnvironmentVariables_DefaultNormLayerDataStorageLocation] DEFAULT (N'Norm_Data') FOR [DefaultNormLayerDataStorageLocation];


GO
PRINT N'Creating [Metadata].[DF_EnvironmentVariables_DefaultMartLayerIndexStorageLocation]...';


GO
ALTER TABLE [Metadata].[EnvironmentVariables]
    ADD CONSTRAINT [DF_EnvironmentVariables_DefaultMartLayerIndexStorageLocation] DEFAULT (N'Fact_Index') FOR [DefaultMartLayerIndexStorageLocation];


GO
PRINT N'Creating [Metadata].[DF_EnvironmentVariables_DefaultMartLayerDataStorageLocation]...';


GO
ALTER TABLE [Metadata].[EnvironmentVariables]
    ADD CONSTRAINT [DF_EnvironmentVariables_DefaultMartLayerDataStorageLocation] DEFAULT (N'Fact_Data') FOR [DefaultMartLayerDataStorageLocation];


GO
PRINT N'Creating unnamed constraint on [Metadata].[EnvironmentVariables]...';


GO
ALTER TABLE [Metadata].[EnvironmentVariables]
    ADD DEFAULT ('PRIMARY') FOR [DefaultRawLayerIndexStorageLocation];


GO
PRINT N'Creating unnamed constraint on [Metadata].[EnvironmentVariables]...';


GO
ALTER TABLE [Metadata].[EnvironmentVariables]
    ADD DEFAULT ('PRIMARY') FOR [DefaultRawLayerDataStorageLocation];


GO
PRINT N'Creating [Metadata].[FK_DestinationTable_DestinationTableGroup]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [FK_DestinationTable_DestinationTableGroup] FOREIGN KEY ([GroupName]) REFERENCES [Metadata].[DestinationTableGroup] ([GroupName]);


GO
PRINT N'Creating [Metadata].[CK_DestinationTable_CompressionType]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [CK_DestinationTable_CompressionType] CHECK ([CompressionType]='ROW' OR [CompressionType]='PAGE' OR [CompressionType]='NONE');


GO
PRINT N'Creating [Metadata].[CK_DestinationTable_TargetNotLikeSource]...';


GO
ALTER TABLE [Metadata].[DestinationTable]
    ADD CONSTRAINT [CK_DestinationTable_TargetNotLikeSource] CHECK ([SourceTableCatalog]<>[DestinationTableCatalog] OR [SourceSchemaName]<>[DestinationSchemaName] OR [SourceTableName]<>[DestinationSchemaName]);


GO
PRINT N'Creating [Metadata].[CK_SourceField_Catalogs]...';


GO
ALTER TABLE [Metadata].[SourceField]
    ADD CONSTRAINT [CK_SourceField_Catalogs] CHECK ([TABLE_CATALOG]<>[DestinationTableCatalog]);


GO
ALTER TABLE [Metadata].[SourceField] NOCHECK CONSTRAINT [CK_SourceField_Catalogs];


GO
PRINT N'Creating [Metadata].[CK_SourceFile_FlatFileType]...';


GO
ALTER TABLE [Metadata].[SourceFile]
    ADD CONSTRAINT [CK_SourceFile_FlatFileType] CHECK ([FlatFileType]='Delimited' OR [FlatFileType]='FixedWidth' OR [FlatFileType]='RaggedRight');


GO
PRINT N'Creating [Metadata].[CK_TableKeyDefinition_KeyType]...';


GO
ALTER TABLE [Metadata].[TableKeyDefinition]
    ADD CONSTRAINT [CK_TableKeyDefinition_KeyType] CHECK ([KeyType]='FK' OR [KeyType]='UK' OR [KeyType]='PK' OR [KeyType]='CIX' OR [KeyType]='NCIX');


GO
PRINT N'Creating [Metadata].[GetIndexMaintenanceString]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [Metadata].[GetIndexMaintenanceString] (
	@DestinationTableCatalog NVARCHAR(128)
	,@DestinationSchemaName NVARCHAR(128)
	,@DestinationTableName NVARCHAR(128)
	)
RETURNS NVARCHAR(max)
AS
BEGIN
	DECLARE @CRLF NVARCHAR(10) = NCHAR(13)
		,@TAB NVARCHAR(1) = NCHAR(9)
		,@IndexStatement NVARCHAR(max) = ''

	SET @IndexStatement = @TAB + '-- Index maintenance statement' + @CRLF
	SET @IndexStatement = @IndexStatement + @TAB + 'ALTER INDEX ALL ON [' + @DestinationSchemaName + '].[' + @DestinationTableName + '] REBUILD PARTITION = ALL' + @CRLF + @CRLF

	RETURN @IndexStatement
END
GO
PRINT N'Creating [Metadata].[GetLogEndPatternString]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [Metadata].[GetLogEndPatternString] (@SSISPackageGUID NVARCHAR(128))
RETURNS NVARCHAR(max)
AS
BEGIN
	DECLARE @CRLF NVARCHAR(10) = NCHAR(13)
		,@CreateProcedureStringLogEnd NVARCHAR(max)

	SET @CreateProcedureStringLogEnd = '        -- Create end log ' + @CRLF
	SET @CreateProcedureStringLogEnd = @CreateProcedureStringLogEnd + '	set @_ExecutionEndTime = getdate()' + @CRLF + @CRLF
	SET @CreateProcedureStringLogEnd = @CreateProcedureStringLogEnd + '	EXECUTE DWH_0_Admin.Logging.LogPackageEnd ' + @CRLF
	SET @CreateProcedureStringLogEnd = @CreateProcedureStringLogEnd + '		@PackageID = ''' + @SSISPackageGUID + '''' + @CRLF
	SET @CreateProcedureStringLogEnd = @CreateProcedureStringLogEnd + '       , @ExecutionID = @_ExecutionID' + @CRLF
	SET @CreateProcedureStringLogEnd = @CreateProcedureStringLogEnd + '       , @ExecutionEndTime = @_ExecutionEndTime' + @CRLF
	SET @CreateProcedureStringLogEnd = @CreateProcedureStringLogEnd + '       , @RowsRead = @ReadCount' + @CRLF
	SET @CreateProcedureStringLogEnd = @CreateProcedureStringLogEnd + '       , @RowsInserted = @InsertCount' + @CRLF
	SET @CreateProcedureStringLogEnd = @CreateProcedureStringLogEnd + '       , @RowsUpdated = @UpdateCount' + @CRLF
	SET @CreateProcedureStringLogEnd = @CreateProcedureStringLogEnd + '       , @RowsDeleted = @DeleteCount' + @CRLF
	SET @CreateProcedureStringLogEnd = @CreateProcedureStringLogEnd + '       , @RowsIgnored = @IgnoreCount' + @CRLF
	SET @CreateProcedureStringLogEnd = @CreateProcedureStringLogEnd + '       , @RowsError = @ErrorCount' + @CRLF

	RETURN @CreateProcedureStringLogEnd
END
GO
PRINT N'Creating [Metadata].[GetPackageVariablesString]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [Metadata].[GetPackageVariablesString] ()
RETURNS NVARCHAR(max)
AS
BEGIN
	DECLARE @CRLF NVARCHAR(10) = NCHAR(13)
		,@CreatePackageVariablesString NVARCHAR(max)

	SET @CreatePackageVariablesString = '         -- Declare package variables ' + @CRLF
	SET @CreatePackageVariablesString = @CreatePackageVariablesString + '	DECLARE @ReadCount int = 0' + @CRLF
	SET @CreatePackageVariablesString = @CreatePackageVariablesString + '	, @InsertCount int = 0' + @CRLF
	SET @CreatePackageVariablesString = @CreatePackageVariablesString + ' , @UpdateCount int = 0' + @CRLF
	SET @CreatePackageVariablesString = @CreatePackageVariablesString + ' , @DeleteCount int = 0' + @CRLF
	SET @CreatePackageVariablesString = @CreatePackageVariablesString + ' , @IgnoreCount int = 0' + @CRLF
	SET @CreatePackageVariablesString = @CreatePackageVariablesString + ' , @ErrorCount int = 0' + @CRLF
	SET @CreatePackageVariablesString = @CreatePackageVariablesString + ' ,  @_ExecutionEndTime datetime' + @CRLF + @CRLF

	RETURN @CreatePackageVariablesString
END
GO
PRINT N'Creating [Metadata].[GetCreateBaseTableString]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	Returns a string with a create table statement, expressed in t-sql.
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [Metadata].[GetCreateBaseTableString] (
	@SourceTableCatalog VARCHAR(128)
	,@SourceSchemaName VARCHAR(128)
	,@SourceTableName VARCHAR(128)
	,@SourceServer VARCHAR(128) = NULL
	,@DestinationTableCatalog VARCHAR(128)
	,@DestinationSchemaName VARCHAR(128)
	,@DestinationTableName VARCHAR(128)
	,@CompressionType VARCHAR(50) = 'NONE'
	,@NewTableCatalog VARCHAR(128) = NULL
	,@NewSchemaName VARCHAR(128) = NULL
	,@NewTablename VARCHAR(128) = NULL
	,@IsPartitioned BIT = 0
	,@PartitionSchemeName NVARCHAR(128)
	,@PartitionKeyColumnName NVARCHAR(128)
	)
RETURNS VARCHAR(max)
AS
BEGIN
	DECLARE @CreateString VARCHAR(max)
		,@COLUMN_NAME VARCHAR(100)
		,@DATA_TYPE VARCHAR(100)
		,@CHARACTER_MAXIMUM_LENGTH INT
		,@ORDINAL_POSITION INT
		,@NUMERIC_PRECISION INT
		,@NUMERIC_SCALE INT
		,@ColumnNamePrimaryKey VARCHAR(100)
		,@IS_NULLABLE VARCHAR(3)
		,@ColumnNameNettoColumn VARCHAR(100)
		,@ColumnNameNettoColumnDataType VARCHAR(100)
		,@ColumnNamePrimaryKeyDataType VARCHAR(100)
		,@IsIdentity BIT
		,@TableColumnSpecification NVARCHAR(1000)
		,@TableCatalogName VARCHAR(128)
		,@SchemaName VARCHAR(128)
		,@TableName VARCHAR(128)
		,@DATETIME_PRECISION INT
		,@pk_index_storage_location VARCHAR(128)

	SET @TableCatalogName = CASE 
			WHEN @NewTableCatalog IS NULL
				THEN @DestinationTableCatalog
			ELSE @NewTableCatalog
			END
	SET @SchemaName = CASE 
			WHEN @NewSchemaName IS NULL
				THEN @DestinationSchemaName
			ELSE @NewSchemaName
			END
	SET @TableName = CASE 
			WHEN @NewTableName IS NULL
				THEN @DestinationTableName
			ELSE @NewTableName
			END
	SET @CreateString = 'IF EXISTS (SELECT * FROM ' + @TableCatalogName + '.sys.objects 
				WHERE object_id = OBJECT_ID(N''' + '[' + @TableCatalogName + '].[' + @SchemaName + '].[' + @TableName + ']'') 
					AND type in (N''U''))
					DROP TABLE [' + @TableCatalogName + '].[' + @SchemaName + '].[' + @TableName + ']' + CHAR(10) + 'CREATE TABLE [' + @TableCatalogName + '].[' + @SchemaName + '].[' + @TableName + ']('

	IF (
			SELECT COUNT(*)
			FROM [Metadata].[SourceField]
			WHERE TABLE_CATALOG = @SourceTableCatalog
				AND TABLE_SCHEMA = @SourceSchemaName
				AND TABLE_NAME = @SourceTableName
			) < 1
		DECLARE @err AS INT = CAST('Source table has no source fields' AS INT)

	-- Build up the create string from meta data
	DECLARE cColumns CURSOR
	FOR
	SELECT ax.COLUMN_NAME
		,ax.DATA_TYPE
		,ax.CHARACTER_MAXIMUM_LENGTH
		,ax.ORDINAL_POSITION + 100000 AS ORDINAL_POSITION
		,ax.NUMERIC_PRECISION
		,ax.NUMERIC_SCALE
		,ax.IS_NULLABLE
		,0 AS IsIdentity
		,NULL AS TableColumnSpecification
		,ax.DATETIME_PRECISION
	FROM [Metadata].[SourceField] AS ax
	LEFT OUTER JOIN [Metadata].[DestinationFieldExtended] e ON ax.DestinationTableCatalog = e.DestinationTableCatalog
		AND ax.COLUMN_NAME = e.COLUMN_NAME
		AND IsNull(e.SourceTableCatalog, @SourceTableCatalog) = @SourceTableCatalog
	WHERE ax.TABLE_NAME = @SourceTableName
		AND ax.TABLE_SCHEMA = @SourceSchemaName
		AND ax.DestinationTableCatalog = @DestinationTableCatalog
		AND e.COLUMN_NAME IS NULL
		AND ax.COLUMN_NAME NOT LIKE 'Checksum%'
		AND ax.TABLE_CATALOG = @SourceTableCatalog
		AND (
			@SourceServer IS NULL
			OR ax.TABLE_SERVER = @SourceServer
			)
	
	UNION
	
	-- Extended columns -> Group "All"
	SELECT [COLUMN_NAME]
		,[DATA_TYPE]
		,[CHARACTER_MAXIMUM_LENGTH]
		,[ORDINAL_POSITION]
		,[NUMERIC_PRECISION]
		,[NUMERIC_SCALE]
		,[IS_NULLABLE]
		,IsIdentity
		,TableColumnSpecification
		,a.DATETIME_PRECISION
	FROM [Metadata].[DestinationFieldExtended] a
	WHERE [DestinationTableCatalog] = isnull(@NewTableCatalog, @DestinationTableCatalog)
		AND IsNull(ApplicableTable, @DestinationTableName) = @DestinationTableName
		AND IsNull(SourceTableCatalog, @SourceTableCatalog) = @SourceTableCatalog
		AND IsNull(GroupName, 'All') = 'All'
	
	UNION
	
	-- Extended columns -> The group extensions for the current table
	SELECT [COLUMN_NAME]
		,[DATA_TYPE]
		,[CHARACTER_MAXIMUM_LENGTH]
		,[ORDINAL_POSITION]
		,[NUMERIC_PRECISION]
		,[NUMERIC_SCALE]
		,[IS_NULLABLE]
		,IsIdentity
		,TableColumnSpecification
		,dfe.DATETIME_PRECISION
	FROM [Metadata].[DestinationFieldExtended] AS dfe
	INNER JOIN [Metadata].DestinationTable AS dt ON dfe.DestinationTableCatalog = dt.DestinationTableCatalog
		--and dfe.GroupName = dt.GroupName
		AND dt.DestinationTableName = @DestinationTableName
		AND dt.GroupName = dfe.GroupName
	WHERE dfe.[DestinationTableCatalog] = @DestinationTableCatalog
		AND IsNull(ApplicableTable, @DestinationTableName) = @DestinationTableName
		AND IsNull(dfe.SourceTableCatalog, @SourceTableCatalog) = @SourceTableCatalog
		AND IsNull(dfe.GroupName, 'All') <> 'All'
	ORDER BY ORDINAL_POSITION

	OPEN cColumns

	FETCH NEXT
	FROM cColumns
	INTO @COLUMN_NAME
		,@DATA_TYPE
		,@CHARACTER_MAXIMUM_LENGTH
		,@ORDINAL_POSITION
		,@NUMERIC_PRECISION
		,@NUMERIC_SCALE
		,@IS_NULLABLE
		,@IsIdentity
		,@TableColumnSpecification
		,@DATETIME_PRECISION

	DECLARE @columnString VARCHAR(max) = ''

	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @columnString = @columnString + CHAR(10) + (
				CASE 
					WHEN @ORDINAL_POSITION != 1
						THEN ', '
					ELSE ''
					END
				) + '[' + @COLUMN_NAME + ']' + (
				CASE 
					WHEN @TableColumnSpecification IS NOT NULL
						THEN ' AS ' + @TableColumnSpecification
					ELSE (
							' ' + CASE @DATA_TYPE
								WHEN 'image'
									THEN 'varbinary(max)'
								WHEN 'ntext'
									THEN 'nvarchar(max)'
								WHEN 'text'
									THEN 'varchar(max)'
								WHEN 'timestamp'
									THEN 'varbinary(8)'
								ELSE @DATA_TYPE
								END + (
								CASE 
									WHEN @CHARACTER_MAXIMUM_LENGTH = - 1
										AND @DATA_TYPE NOT LIKE '%text'
										AND @DATA_TYPE NOT LIKE '%image'
										THEN '(max)'
									WHEN @CHARACTER_MAXIMUM_LENGTH IS NOT NULL
										AND @DATA_TYPE NOT LIKE '%text'
										AND @DATA_TYPE NOT LIKE '%image'
										THEN '(' + LTRIM(STR(@CHARACTER_MAXIMUM_LENGTH)) + ')'
									WHEN @NUMERIC_PRECISION IS NOT NULL
										AND @DATA_TYPE NOT LIKE '%int'
										AND @DATA_TYPE NOT LIKE '%money'
										AND @DATA_TYPE NOT LIKE '%float'
										THEN '(' + LTRIM(STR(@NUMERIC_PRECISION)) + ', ' + LTRIM(STR(@NUMERIC_SCALE)) + ')'
									WHEN @DATETIME_PRECISION IS NOT NULL
										AND (
											@DATA_TYPE LIKE 'datetime2'
											OR @DATA_TYPE LIKE 'time'
											)
										THEN '(' + LTRIM(STR(@DATETIME_PRECISION)) + ')'
									ELSE ''
									END
								) + (
								CASE 
									WHEN @IsIdentity = 1
										THEN ' IDENTITY(1,1)'
									ELSE ''
									END
								) + (
								CASE 
									WHEN @IS_NULLABLE = 'NO'
										THEN ' NOT NULL'
									ELSE ' NULL'
									END
								)
							)
					END
				)

		FETCH NEXT
		FROM cColumns
		INTO @COLUMN_NAME
			,@DATA_TYPE
			,@CHARACTER_MAXIMUM_LENGTH
			,@ORDINAL_POSITION
			,@NUMERIC_PRECISION
			,@NUMERIC_SCALE
			,@IS_NULLABLE
			,@IsIdentity
			,@TableColumnSpecification
			,@DATETIME_PRECISION
	END

	CLOSE cColumns

	DEALLOCATE cColumns

	-- Get PK storage location
	SELECT @pk_index_storage_location = max(fp.IndexStorageLocation)
	FROM [Metadata].[TableKeyDefinition] fp
	WHERE TableCatalog = @DestinationTableCatalog
		AND SchemaName = @DestinationSchemaName
		AND TableName = @DestinationTableName
		AND KeyType = 'PK'
		AND fp.IndexStorageLocation != 'DefaultLocation'

	-- added for partitioning
	SET @CreateString = @CreateString + right(@columnString, len(@columnString) - 2) + ')' + (
			CASE 
				WHEN @IsPartitioned = 1
					THEN ' ON ' + @PartitionSchemeName + '(' + @PartitionKeyColumnName + ')'
				WHEN @pk_index_storage_location IS NOT NULL
					THEN ' ON [' + @pk_index_storage_location + ']'
				ELSE ' ON [PRIMARY]'
				END
			) + (
			CASE 
				WHEN @CompressionType <> 'NONE'
					THEN 'WITH (DATA_COMPRESSION = ' + @CompressionType + ')'
				ELSE ''
				END
			)

	RETURN @CreateString
END
GO
PRINT N'Creating [Metadata].[GetCreatePKChecksumString]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [Metadata].[GetCreatePKChecksumString] (
	@SourceTableCatalog VARCHAR(128)
	,@SourceSchemaName VARCHAR(128)
	,@SourceTableName VARCHAR(128)
	,@DestinationTableCatalog VARCHAR(128)
	,@DestinationSchemaName VARCHAR(128)
	,@DestinationTableName VARCHAR(128)
	,@CreateCheckSumColumns BIT
	,@NewTableCatalog VARCHAR(128) = NULL
	,@NewSchemaName VARCHAR(128) = NULL
	,@NewTablename VARCHAR(128) = NULL
	,@IsPartitioned BIT = 0
	,@PartitionSchemeName NVARCHAR(128)
	,@PartitionKeyColumnName NVARCHAR(128)
	,@CompressionType NVARCHAR(50)
	)
RETURNS VARCHAR(max)
AS
BEGIN
	DECLARE @CreateString VARCHAR(max) = ''
		,@COLUMN_NAME VARCHAR(100)
		,@DATA_TYPE VARCHAR(100)
		,@CHARACTER_MAXIMUM_LENGTH INT
		,@PrimaryKeyString VARCHAR(max)
		,@ChecksumPrimaryKeyString VARCHAR(max)
		,@ChecksumAllNettoColumns VARCHAR(max)
		,@ColumnNamePrimaryKey VARCHAR(100)
		,@ColumnNameNettoColumn VARCHAR(100)
		,@ColumnNameNettoColumnDataType VARCHAR(100)
		,@ColumnNamePrimaryKeyDataType VARCHAR(100)
		,@TableCatalogName VARCHAR(128)
		,@SchemaName VARCHAR(128)
		,@TableName VARCHAR(128)
		,@pk_index_storage_location VARCHAR(128)

	SET @TableCatalogName = CASE 
			WHEN @NewTableCatalog IS NULL
				THEN @DestinationTableCatalog
			ELSE @NewTableCatalog
			END
	SET @SchemaName = CASE 
			WHEN @NewSchemaName IS NULL
				THEN @DestinationSchemaName
			ELSE @NewSchemaName
			END
	SET @TableName = CASE 
			WHEN @NewTableName IS NULL
				THEN @DestinationTableName
			ELSE @NewTableName
			END

	-- Create "Primary Keys" and "Checksum column" on the newly created table
	DECLARE cPrimaryKeyCursor CURSOR
	FOR
	SELECT COLUMN_NAME
		,DATA_TYPE
	FROM [Metadata].[TableKeyDefinition]
	WHERE TableCatalog = @DestinationTableCatalog
		AND SchemaName = @DestinationSchemaName
		AND TableName = @DestinationTableName
		AND KeyType = 'PK'
	ORDER BY KeyColumnOrder

	DECLARE @NrOfPrimaryKeyColumns INT

	SET @PrimaryKeyString = 'ALTER TABLE [' + @TableCatalogName + '].[' + @SchemaName + '].[' + @TableName + '] ADD CONSTRAINT
											PK_' + @SchemaName + '_' + @TableName + ' PRIMARY KEY ' + (
			CASE 
				WHEN @IsPartitioned = 1
					THEN 'CLUSTERED'
				ELSE 'CLUSTERED'
				END
			) + ' 
											('
	SET @ChecksumPrimaryKeyString = 'ALTER TABLE [' + @TableCatalogName + '].[' + @SchemaName + '].[' + @TableName + '] ADD
										ChecksumPrimaryKey  AS CONVERT(VARCHAR(40), HASHBYTES(''SHA1'','

	OPEN cPrimaryKeyCursor

	FETCH NEXT
	FROM cPrimaryKeyCursor
	INTO @ColumnNamePrimaryKey
		,@ColumnNamePrimaryKeyDataType

	SET @NrOfPrimaryKeyColumns = 0

	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @NrOfPrimaryKeyColumns = @NrOfPrimaryKeyColumns + 1
		SET @PrimaryKeyString = @PrimaryKeyString + (
				CASE 
					WHEN @NrOfPrimaryKeyColumns > 1
						THEN ', '
					ELSE ''
					END
				) + @ColumnNamePrimaryKey
		SET @ChecksumPrimaryKeyString = @ChecksumPrimaryKeyString + (
				CASE 
					WHEN @NrOfPrimaryKeyColumns > 1
						THEN '+'
					ELSE ''
					END
				) + + (
				CASE 
					WHEN @ColumnNamePrimaryKeyDataType LIKE '%date%'
						THEN 'CONVERT(char(8), ' + @ColumnNamePrimaryKey + ', 112)'
					WHEN @ColumnNamePrimaryKeyDataType LIKE '%image%'
						THEN 'IsNull(CAST(CONVERT(varbinary, ' + @ColumnNamePrimaryKey + ') as varchar(max)), '''')'
					ELSE 'cast(' + @ColumnNamePrimaryKey + ' as varchar(max))'
					END
				)

		FETCH NEXT
		FROM cPrimaryKeyCursor
		INTO @ColumnNamePrimaryKey
			,@ColumnNamePrimaryKeyDataType
	END

	CLOSE cPrimaryKeyCursor

	DEALLOCATE cPrimaryKeyCursor

	SELECT @pk_index_storage_location = max(fp.IndexStorageLocation)
	FROM [Metadata].[TableKeyDefinition] fp
	WHERE TableCatalog = @DestinationTableCatalog
		AND SchemaName = @DestinationSchemaName
		AND TableName = @DestinationTableName
		AND KeyType = 'PK'
		AND fp.IndexStorageLocation != 'DefaultLocation'

	-- Get index fill factor
	DECLARE @pk_index_fill_factor VARCHAR(180)

	SELECT @pk_index_fill_factor = ISNULL(',  FILLFACTOR = ' + cast(max(fp.IndexFillFactor) AS VARCHAR(5)), '')
	FROM [Metadata].[TableKeyDefinition] fp
	WHERE TableCatalog = @DestinationTableCatalog
		AND SchemaName = @DestinationSchemaName
		AND TableName = @DestinationTableName
		AND KeyType = 'PK'

	SET @PrimaryKeyString = @PrimaryKeyString + '
				) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, DATA_COMPRESSION = ' + @CompressionType + @pk_index_fill_factor + ') ' + (
			CASE 
				WHEN @IsPartitioned = 1
					THEN ' ON ' + @PartitionSchemeName + '(' + @PartitionKeyColumnName + ')'
				WHEN @pk_index_storage_location IS NOT NULL
					THEN ' ON [' + @pk_index_storage_location + ']'
				ELSE ' ON [PRIMARY]'
				END
			)
	SET @ChecksumPrimaryKeyString = @ChecksumPrimaryKeyString + '), 1)'

	IF (@NrOfPrimaryKeyColumns > 0)
		SET @CreateString = @PrimaryKeyString + CHAR(10)

	IF @CreateCheckSumColumns = 1
	BEGIN
		-- Create "Checksum column" for all non PK columns
		DECLARE @SrcTableName NVARCHAR(50)

		SELECT @SrcTableName = SourceTableName
		FROM [Metadata].[DestinationTable] AS b
		WHERE b.DestinationTableCatalog = @DestinationTableCatalog
			AND b.DestinationTableName = @DestinationTableName
			AND b.DestinationSchemaName = @DestinationSchemaName

		-- when the current table act as the destination
		DECLARE cAllNettoColumnsCursor_dst CURSOR
		FOR
		SELECT c.COLUMN_NAME
			,c.DATA_TYPE
			,s.ORDINAL_POSITION
		FROM (
			SELECT a.COLUMN_NAME
				,a.DATA_TYPE --, a.ORDINAL_POSITION
			FROM [Metadata].[SourceField] AS a
			INNER JOIN [Metadata].[DestinationTable] AS b ON b.DestinationTableCatalog = @DestinationTableCatalog
				AND b.DestinationTableName = @DestinationTableName
				AND b.DestinationSchemaName = @DestinationSchemaName
				AND a.TABLE_CATALOG = b.SourceTableCatalog
				AND a.TABLE_SCHEMA = b.SourceSchemaName
				AND a.TABLE_NAME = b.SourceTableName
				AND a.DestinationTableCatalog = b.DestinationTableCatalog
			
			EXCEPT
			
			SELECT COLUMN_NAME
				,DATA_TYPE --, KeyColumnOrder as ORDINAL_POSITION
			FROM [Metadata].[TableKeyDefinition]
			WHERE TableCatalog = @DestinationTableCatalog
				AND SchemaName = @DestinationSchemaName
				AND TableName = @DestinationTableName
				AND KeyType = 'PK'
			
			EXCEPT
			
			SELECT COLUMN_NAME
				,DATA_TYPE
			FROM [Metadata].[DestinationFieldExtended]
			WHERE DestinationTableCatalog = @DestinationTableCatalog
				AND IsNull(SourceTableCatalog, @SourceTableCatalog) = @SourceTableCatalog
				AND ISNULL(ApplicableTable, @DestinationTableName) = @DestinationTableName
			
			INTERSECT
			
			SELECT a.COLUMN_NAME
				,a.DATA_TYPE
			FROM [Metadata].[SourceField] AS a
			WHERE TABLE_CATALOG = @SourceTableCatalog
				AND TABLE_SCHEMA = @SourceSchemaName
				AND TABLE_NAME = @SourceTableName
				AND DestinationTableCatalog = @DestinationTableCatalog
			) AS c
		INNER JOIN [Metadata].[SourceField] AS s ON s.DestinationTableCatalog = @DestinationTableCatalog
			AND c.COLUMN_NAME = s.COLUMN_NAME
			AND s.TABLE_NAME = @SrcTableName
			AND s.TABLE_CATALOG = @SourceTableCatalog
			AND s.TABLE_SCHEMA = @SourceSchemaName
		ORDER BY s.ORDINAL_POSITION

		DECLARE @NrOfNettoColumns_dst INT
		DECLARE @KeyColumnOrder_dst SMALLINT

		SET @ChecksumAllNettoColumns = 'ALTER TABLE [' + @TableCatalogName + '].[' + @SchemaName + '].[' + @TableName + '] ADD
											CheckSumNonPKColumns_dst AS CONVERT(VARCHAR(40), HASHBYTES(''SHA1'','

		OPEN cAllNettoColumnsCursor_dst

		FETCH NEXT
		FROM cAllNettoColumnsCursor_dst
		INTO @ColumnNameNettoColumn
			,@ColumnNameNettoColumnDataType
			,@KeyColumnOrder_dst

		SET @NrOfNettoColumns_dst = 0

		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @NrOfNettoColumns_dst = @NrOfNettoColumns_dst + 1
			SET @ChecksumAllNettoColumns = @ChecksumAllNettoColumns + (
					CASE 
						WHEN @NrOfNettoColumns_dst > 1
							THEN '+'
						ELSE ''
						END
					) + (
					CASE 
						WHEN @ColumnNameNettoColumnDataType LIKE '%date%'
							THEN 'CONVERT(char(8), isnull(' + @ColumnNameNettoColumn + ', convert(datetime, ''1900-01-01'', 20)), 112)'
						WHEN @ColumnNameNettoColumnDataType = '%image%'
							THEN 'IsNull(CAST(CONVERT(varbinary, ' + @ColumnNameNettoColumn + ') as varchar(max)), '''')'
						ELSE 'isnull(cast(' + @ColumnNameNettoColumn + ' as varchar(max)), '''')'
						END
					)

			FETCH NEXT
			FROM cAllNettoColumnsCursor_dst
			INTO @ColumnNameNettoColumn
				,@ColumnNameNettoColumnDataType
				,@KeyColumnOrder_dst
		END

		CLOSE cAllNettoColumnsCursor_dst

		DEALLOCATE cAllNettoColumnsCursor_dst

		SET @ChecksumAllNettoColumns = @ChecksumAllNettoColumns + '), 1) '

		IF (@NrOfNettoColumns_dst > 0)
			SET @CreateString = @CreateString + @ChecksumAllNettoColumns + CHAR(10)

		-- ... and when the current table act as the source
		DECLARE cAllNettoColumnsCursor_src CURSOR
		FOR
		SELECT c.COLUMN_NAME
			,c.DATA_TYPE
			,s.ORDINAL_POSITION
		FROM (
			SELECT a.COLUMN_NAME
				,a.DATA_TYPE --, a.ORDINAL_POSITION
			FROM [Metadata].[SourceField] AS a
			INNER JOIN [Metadata].[DestinationTable] AS b ON b.DestinationTableCatalog = @DestinationTableCatalog
				AND b.DestinationTableName = @DestinationTableName
				AND b.DestinationSchemaName = @DestinationSchemaName
				AND a.TABLE_CATALOG = b.SourceTableCatalog
				AND a.TABLE_SCHEMA = b.SourceSchemaName
				AND a.TABLE_NAME = b.SourceTableName
				AND a.DestinationTableCatalog = b.DestinationTableCatalog
			
			EXCEPT
			
			SELECT COLUMN_NAME
				,DATA_TYPE
			FROM [Metadata].[TableKeyDefinition]
			WHERE TableCatalog = @DestinationTableCatalog
				AND SchemaName = @DestinationSchemaName
				AND TableName = @DestinationTableName
				AND KeyType = 'PK'
			) AS c
		INNER JOIN [Metadata].[SourceField] AS s ON s.DestinationTableCatalog = @DestinationTableCatalog
			AND c.COLUMN_NAME = s.COLUMN_NAME
			AND s.TABLE_NAME = @SrcTableName
			AND s.TABLE_CATALOG = @SourceTableCatalog
			AND s.TABLE_SCHEMA = @SourceSchemaName
		
		UNION
		
		-- Adding identity column, general
		SELECT COLUMN_NAME
			,DATA_TYPE
			,ORDINAL_POSITION
		FROM [Metadata].[DestinationFieldExtended]
		WHERE DestinationTableCatalog = @DestinationTableCatalog
			AND IsNull(SourceTableCatalog, @SourceTableCatalog) = @SourceTableCatalog
			AND IncludeInChecksum_src = 1
			AND ApplicableTable IS NULL
		
		UNION
		
		-- Adding identity column, current group
		SELECT COLUMN_NAME
			,DATA_TYPE
			,ORDINAL_POSITION
		FROM [Metadata].[DestinationFieldExtended]
		WHERE DestinationTableCatalog = @DestinationTableCatalog
			AND IncludeInChecksum_src = 1
			AND ApplicableTable = @DestinationTableName
		ORDER BY s.ORDINAL_POSITION

		DECLARE @NrOfNettoColumns_src INT
		DECLARE @KeyColumnOrder_src SMALLINT

		SET @ChecksumAllNettoColumns = 'ALTER TABLE [' + @TableCatalogName + '].[' + @SchemaName + '].[' + @TableName + '] ADD
											CheckSumNonPKColumns_src AS CONVERT(VARCHAR(40), HASHBYTES(''SHA1'','

		OPEN cAllNettoColumnsCursor_src

		FETCH NEXT
		FROM cAllNettoColumnsCursor_src
		INTO @ColumnNameNettoColumn
			,@ColumnNameNettoColumnDataType
			,@KeyColumnOrder_src

		SET @NrOfNettoColumns_src = 0

		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @NrOfNettoColumns_src = @NrOfNettoColumns_src + 1
			SET @ChecksumAllNettoColumns = @ChecksumAllNettoColumns + (
					CASE 
						WHEN @NrOfNettoColumns_src > 1
							THEN '+'
						ELSE ''
						END
					) + (
					CASE 
						WHEN @ColumnNameNettoColumnDataType LIKE '%date%'
							THEN 'CONVERT(char(8), isnull(' + @ColumnNameNettoColumn + ', convert(datetime, ''1900-01-01'', 20)), 112)'
						WHEN @ColumnNameNettoColumnDataType LIKE '%image%'
							THEN 'IsNull(CAST(CONVERT(varbinary, ' + @ColumnNameNettoColumn + ') as varchar(max)), '''')'
						ELSE 'isnull(cast(' + @ColumnNameNettoColumn + ' as varchar(max)), '''')'
						END
					)

			FETCH NEXT
			FROM cAllNettoColumnsCursor_src
			INTO @ColumnNameNettoColumn
				,@ColumnNameNettoColumnDataType
				,@KeyColumnOrder_src
		END

		CLOSE cAllNettoColumnsCursor_src

		DEALLOCATE cAllNettoColumnsCursor_src

		SET @ChecksumAllNettoColumns = @ChecksumAllNettoColumns + '), 1) '

		IF (@NrOfNettoColumns_src > 0)
			SET @CreateString = @CreateString + @ChecksumAllNettoColumns + CHAR(10)
	END

	RETURN @CreateString
END
GO
PRINT N'Creating [Metadata].[GetSSASProcessingPatternString]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [Metadata].[GetSSASProcessingPatternString] (@SSISPackageGUID NVARCHAR(128))
RETURNS NVARCHAR(max)
AS
BEGIN
	DECLARE @CRLF NVARCHAR(10) = NCHAR(13)
		,@TAB NVARCHAR(1) = NCHAR(9)
		,@SQL NVARCHAR(max)

	SET @SQL = @TAB + '-- Declare XMLA variables' + @CRLF
	SET @SQL = @SQL + @TAB + 'DECLARE @XMLAScript varchar(max) = ''''' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + '-- Process dimensions' + @CRLF
	SET @SQL = @SQL + @TAB + 'DECLARE cTemp CURSOR FOR' + @CRLF
	SET @SQL = @SQL + @TAB + '	select XMLAScript' + @CRLF
	SET @SQL = @SQL + @TAB + '	from [Tabular].[DimensionProcessingXMLA]' + @CRLF
	SET @SQL = @SQL + @TAB + '	order by 1' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'OPEN cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + 'FETCH NEXT FROM cTemp into @XMLAScript' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'WHILE @@FETCH_STATUS = 0' + @CRLF
	SET @SQL = @SQL + @TAB + '	BEGIN' + @CRLF
	SET @SQL = @SQL + @TAB + '		BEGIN TRY' + @CRLF
	SET @SQL = @SQL + @TAB + '			EXECUTE(@XMLAScript) AT TabularModel' + @CRLF
	SET @SQL = @SQL + @TAB + '		END TRY' + @CRLF
	SET @SQL = @SQL + @TAB + '		BEGIN CATCH' + @CRLF
	SET @SQL = @SQL + @TAB + '			GOTO DimensionProcessingError' + @CRLF
	SET @SQL = @SQL + @TAB + '		END CATCH' + @CRLF
	SET @SQL = @SQL + @TAB + '		FETCH NEXT FROM cTemp into @XMLAScript' + @CRLF
	SET @SQL = @SQL + @TAB + '	END' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'CLOSE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + 'DEALLOCATE cTemp' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + '-- Create measure group partitions' + @CRLF
	SET @SQL = @SQL + @TAB + 'DECLARE cTemp CURSOR FOR' + @CRLF
	SET @SQL = @SQL + @TAB + '	select XMLAScript' + @CRLF
	SET @SQL = @SQL + @TAB + '	from [Tabular].[PartitionCreationXMLA]' + @CRLF
	SET @SQL = @SQL + @TAB + '	order by 1' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'OPEN cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + 'FETCH NEXT FROM cTemp into @XMLAScript' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'WHILE @@FETCH_STATUS = 0' + @CRLF
	SET @SQL = @SQL + @TAB + '	BEGIN' + @CRLF
	SET @SQL = @SQL + @TAB + '		BEGIN TRY' + @CRLF
	SET @SQL = @SQL + @TAB + '			EXECUTE(@XMLAScript) AT TabularModel' + @CRLF
	SET @SQL = @SQL + @TAB + '		END TRY' + @CRLF
	SET @SQL = @SQL + @TAB + '		BEGIN CATCH' + @CRLF
	SET @SQL = @SQL + @TAB + '			GOTO PartitionCreateError' + @CRLF
	SET @SQL = @SQL + @TAB + '		END CATCH' + @CRLF
	SET @SQL = @SQL + @TAB + '		FETCH NEXT FROM cTemp into @XMLAScript' + @CRLF
	SET @SQL = @SQL + @TAB + '	END' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'CLOSE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + 'DEALLOCATE cTemp' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + '-- Process fact table partitions' + @CRLF
	SET @SQL = @SQL + @TAB + 'DECLARE cTemp CURSOR FOR' + @CRLF
	SET @SQL = @SQL + @TAB + '	select XMLAScript' + @CRLF
	SET @SQL = @SQL + @TAB + '	from [Tabular].[FactProcessingXMLA]' + @CRLF
	SET @SQL = @SQL + @TAB + '	order by 1' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'OPEN cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + 'FETCH NEXT FROM cTemp into @XMLAScript' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'WHILE @@FETCH_STATUS = 0' + @CRLF
	SET @SQL = @SQL + @TAB + '	BEGIN' + @CRLF
	SET @SQL = @SQL + @TAB + '		BEGIN TRY' + @CRLF
	SET @SQL = @SQL + @TAB + '			EXECUTE(@XMLAScript) AT TabularModel' + @CRLF
	SET @SQL = @SQL + @TAB + '		END TRY' + @CRLF
	SET @SQL = @SQL + @TAB + '		BEGIN CATCH' + @CRLF
	SET @SQL = @SQL + @TAB + '			GOTO PartitionProcessingError' + @CRLF
	SET @SQL = @SQL + @TAB + '		END CATCH' + @CRLF
	SET @SQL = @SQL + @TAB + '		FETCH NEXT FROM cTemp into @XMLAScript' + @CRLF
	SET @SQL = @SQL + @TAB + '	END' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'CLOSE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + 'DEALLOCATE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + '-- Re-Calculate Tabular Database' + @CRLF
	SET @SQL = @SQL + @TAB + 'DECLARE cTemp CURSOR FOR' + @CRLF
	SET @SQL = @SQL + @TAB + '	select XMLAScript' + @CRLF
	SET @SQL = @SQL + @TAB + '	from [Tabular].[TabularDatabaseReCalculationXMLA]' + @CRLF
	SET @SQL = @SQL + @TAB + '	order by 1' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'OPEN cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + 'FETCH NEXT FROM cTemp into @XMLAScript' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'WHILE @@FETCH_STATUS = 0' + @CRLF
	SET @SQL = @SQL + @TAB + '	BEGIN' + @CRLF
	SET @SQL = @SQL + @TAB + '		BEGIN TRY' + @CRLF
	SET @SQL = @SQL + @TAB + '			EXECUTE(@XMLAScript) AT TabularModel' + @CRLF
	SET @SQL = @SQL + @TAB + '		END TRY' + @CRLF
	SET @SQL = @SQL + @TAB + '		BEGIN CATCH' + @CRLF
	SET @SQL = @SQL + @TAB + '			GOTO ReCalculationError' + @CRLF
	SET @SQL = @SQL + @TAB + '		END CATCH' + @CRLF
	SET @SQL = @SQL + @TAB + '		FETCH NEXT FROM cTemp into @XMLAScript' + @CRLF
	SET @SQL = @SQL + @TAB + '	END' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'CLOSE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + 'DEALLOCATE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + 'GOTO AllSuccess' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'DimensionProcessingError:' + @CRLF
	SET @SQL = @SQL + @TAB + [Metadata].[GetLogEndPatternString](@SSISPackageGUID) + '		, @Status = ''Failure''' + @CRLF
	SET @SQL = @SQL + @TAB + '	CLOSE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + '	DEALLOCATE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + '	RAISERROR(N''Error called on Linked Server (Dimension Processing Error)'',16,1)' + @CRLF
	SET @SQL = @SQL + @TAB + '	RETURN;' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'PartitionCreateError:' + @CRLF
	SET @SQL = @SQL + @TAB + [Metadata].[GetLogEndPatternString](@SSISPackageGUID) + '		, @Status = ''Failure''' + @CRLF
	SET @SQL = @SQL + @TAB + '	CLOSE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + '	DEALLOCATE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + '	RAISERROR(N''Error called on Linked Server (Partition Creation Error)'',16,1)' + @CRLF
	SET @SQL = @SQL + @TAB + '	RETURN;' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'PartitionProcessingError:' + @CRLF
	SET @SQL = @SQL + @TAB + [Metadata].[GetLogEndPatternString](@SSISPackageGUID) + '		, @Status = ''Failure''' + @CRLF
	SET @SQL = @SQL + @TAB + '	CLOSE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + '	DEALLOCATE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + '	RAISERROR(N''Error called on Linked Server (Partition Processing Error)'',16,1)' + @CRLF
	SET @SQL = @SQL + @TAB + '	RETURN;' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'ReCalculationError:' + @CRLF
	SET @SQL = @SQL + @TAB + [Metadata].[GetLogEndPatternString](@SSISPackageGUID) + '		, @Status = ''Failure''' + @CRLF
	SET @SQL = @SQL + @TAB + '	CLOSE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + '	DEALLOCATE cTemp' + @CRLF
	SET @SQL = @SQL + @TAB + '	RAISERROR(N''Error called on Linked Server (Re-Calculation Error)'',16,1)' + @CRLF
	SET @SQL = @SQL + @TAB + '	RETURN;' + @CRLF + @CRLF
	SET @SQL = @SQL + @TAB + 'AllSuccess:' + @CRLF
	SET @SQL = @SQL + @TAB + '	-- Just move on' + @CRLF

	RETURN @SQL
END
GO
PRINT N'Creating [Metadata].[GetLogStartPatternString]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [Metadata].[GetLogStartPatternString] (
	@SSISPackageName NVARCHAR(128)
	,@DestinationSchemaName NVARCHAR(128)
	,@SSISPackageGUID NVARCHAR(128)
	)
RETURNS NVARCHAR(max)
AS
BEGIN
	DECLARE @CRLF NVARCHAR(10) = NCHAR(13)
		,@CreateProcedureStringLogStart NVARCHAR(max)

	SET @CreateProcedureStringLogStart = '      -- Get stored procedure meta data for logging purposes' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '              declare @SPCreatedDate date' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @Executer nvarchar(128) = SYSTEM_USER' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @_LocaleID nvarchar(128) = convert(sysname, SERVERPROPERTY(''LCID''))' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @_ExecutionID nvarchar(128) = NEWID()' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @_ExecutionStartTime datetime = getdate()' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @_ExecutionUserName nvarchar(128) = SYSTEM_USER' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @_ProductVersion nvarchar(128) = convert(sysname, SERVERPROPERTY(''ProductVersion''))' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '              SELECT o.* into #SPMetadata FROM sys.objects o inner join sys.schemas s on o.schema_id = s.schema_id WHERE o.type = ''P'' AND o.name = ''' + @SSISPackageName + ''' and s.name = ''' + @DestinationSchemaName + '''' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '              select @SPCreatedDate = create_date from #SPMetadata' + @CRLF + @CRLF
	-- Create start log
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '              -- Create start log ' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '              EXECUTE DWH_0_Admin.Logging.LogPackageStart ' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           @PackageID = ''' + @SSISPackageGUID + '''' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @PackageName = ''' + @SSISPackageName + '''' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @VersionID = ''' + @SSISPackageGUID + '''' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @VersionMajor = 1' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @VersionMinor = 0' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @VersionBuild = 0' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @VersionComments = ''' + 'Package executed as a stored procedure' + '''' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @CreationDate = @SPCreatedDate' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @CreatorName = @Executer' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @CreatorComputerName = @@SERVERNAME' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @LocaleID = @_LocaleID' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @ExecutionID = @_ExecutionID' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @ExecutionStartTime = @_ExecutionStartTime' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @ExecutionUserName = @_ExecutionUserName' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @ExecutionMachineName = @@SERVERNAME' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @ProductVersion = @_ProductVersion' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @InteractiveMode = 0' + @CRLF
	SET @CreateProcedureStringLogStart = @CreateProcedureStringLogStart + '                                           , @SysExecutionLog_key = 0' + @CRLF + @CRLF

	RETURN @CreateProcedureStringLogStart
END
GO
PRINT N'Creating [Metadata].[GetMergePatternString]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [Metadata].[GetMergePatternString] (
	@SourceTableCatalog NVARCHAR(128)
	,@SourceSchemaName NVARCHAR(128)
	,@SourceTableName NVARCHAR(128)
	,@DestinationTableCatalog NVARCHAR(128)
	,@DestinationSchemaName NVARCHAR(128)
	,@DestinationTableName NVARCHAR(128)
	)
RETURNS NVARCHAR(max)
AS
BEGIN
	DECLARE @CRLF NVARCHAR(10) = NCHAR(13)
		,@TAB NVARCHAR(1) = NCHAR(9)
		,@MergeStatement NVARCHAR(max)
		,@MergeCondition NVARCHAR(max) = ''
		,@InsertColumns NVARCHAR(max) = ''
		,@InsertValues NVARCHAR(max) = ''
		,@MatchCondition NVARCHAR(max) = ''
		,@UpdateFields NVARCHAR(max) = ''

	SELECT @InsertColumns = @InsertColumns + ', ' + sf.COLUMN_NAME
		,@InsertValues = @InsertValues + ', ' + sf.COLUMN_NAME
		,@MatchCondition = @MatchCondition + ' OR ' + CASE 
			WHEN sf.DATA_TYPE LIKE '%char'
				THEN 'Isnull(convert(nvarchar(max), dst.[' + sf.COLUMN_NAME + ']),'''') != Isnull(convert(nvarchar(max), src.[' + sf.COLUMN_NAME + ']),'''')'
			ELSE 'dst.[' + sf.COLUMN_NAME + '] != src.[' + sf.COLUMN_NAME + ']'
			END
		,@UpdateFields = @UpdateFields + ', [' + sf.COLUMN_NAME + '] = src.[' + sf.COLUMN_NAME + ']'
	FROM [Metadata].[DestinationTable] dt
	INNER JOIN [Metadata].[SourceField] sf ON dt.SourceTableCatalog = sf.TABLE_CATALOG
		AND dt.SourceSchemaName = sf.TABLE_SCHEMA
		AND dt.SourceTableName = sf.TABLE_NAME
	WHERE dt.DestinationTableCatalog = @DestinationTableCatalog
		AND dt.DestinationSchemaName = @DestinationSchemaName
		AND dt.DestinationTableName = @DestinationTableName
	ORDER BY ORDINAL_POSITION

	SELECT @MergeCondition = @MergeCondition + ' AND [dst].[' + pk.COLUMN_NAME + '] = src.[' + pk.COLUMN_NAME + ']'
	FROM [Metadata].[DestinationTable] dt
	INNER JOIN [Metadata].[TableKeyDefinition] pk ON dt.DestinationTableCatalog = pk.TableCatalog
		AND dt.DestinationSchemaName = pk.SchemaName
		AND dt.DestinationTableName = pk.TableName
		AND pk.KeyType = 'PK'
	WHERE dt.DestinationTableCatalog = @DestinationTableCatalog
		AND dt.DestinationSchemaName = @DestinationSchemaName
		AND dt.DestinationTableName = @DestinationTableName
	ORDER BY pk.KeyColumnOrder

	SET @InsertColumns = right(@InsertColumns, len(@InsertColumns) - 2)
	SET @InsertValues = right(@InsertValues, len(@InsertValues) - 2)
	SET @MatchCondition = right(@MatchCondition, len(@MatchCondition) - 4)
	SET @UpdateFields = right(@UpdateFields, len(@UpdateFields) - 2)
	SET @MergeCondition = right(@MergeCondition, len(@MergeCondition) - 4)
	SET @MergeStatement = @TAB + '-- Logic merge statement' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + 'DECLARE @tab as table ([action] varchar(25));' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + 'MERGE [' + @DestinationSchemaName + '].[' + @DestinationTableName + '] as dst USING [' + @SourceTableCatalog + '].[' + @SourceSchemaName + '].[' + @SourceTableName + '] as src ON ' + @MergeCondition + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + 'WHEN NOT MATCHED BY TARGET' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + 'THEN' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + '                             INSERT (' + @InsertColumns + ',SysDateTimeInsertedUTC,SysExecutionLog_key)' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + '                             VALUES (' + @InsertValues + ',getutcdate(),0)' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + 'WHEN MATCHED AND (' + @MatchCondition + ' OR dst.SysDatetimeDeletedUTC IS NOT NULL)' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + 'THEN' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + '                             UPDATE SET ' + @UpdateFields + ',SysModifiedUTC = getutcdate(),SysDatetimeUpdatedUTC = getutcdate(),SysExecutionLog_key = 0,SysDatetimeDeletedUTC = NULL' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + 'WHEN NOT MATCHED BY SOURCE' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + 'THEN' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + '                             DELETE' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + 'OUTPUT $action INTO @tab (action);' + @CRLF + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + ';WITH RowCnt AS (' + @CRLF + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + '                             SELECT Coalesce(SUM(CASE WHEN [action] = ''INSERT'' THEN 1 ELSE 0 END), 0) As InsertCount,' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + '                               Coalesce(SUM(CASE WHEN [action] = ''UPDATE'' THEN 1 ELSE 0 END), 0) As UpdateCount,' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + '                               (SELECT COUNT(*) FROM [' + @SourceTableCatalog + '].[' + @SourceSchemaName + '].[' + @SourceTableName + '] as src ) As ReadCount' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + '                             FROM @tab' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + '                                                                                         )' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + 'SELECT @InsertCount = InsertCount, @UpdateCount = UpdateCount, @ReadCount = ReadCount, @IgnoreCount = ReadCount - InsertCount - UpdateCount' + @CRLF
	SET @MergeStatement = @MergeStatement + @TAB + 'FROM RowCnt;' + @CRLF + @CRLF

	RETURN @MergeStatement
END
GO
PRINT N'Creating [Metadata].[GetCreateStageViewString]...';


GO




-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	Returns a string with a create table statement, expressed in t-sql.
-- Example:	
--
--
-- =============================================
CREATE function [Metadata].[GetCreateStageViewString]
    (
      @SourceTableCatalog varchar(128) ,
      @SourceSchemaName varchar(128) ,
      @SourceTableName varchar(128) ,
      @SourceServer varchar(128) = null ,
      @StageTableCatalog varchar(128) ,
      @StageSchemaName varchar(128) ,
      @StageTableName varchar(128) ,
      @DestinationTableCatalog varchar(128) ,
      @DestinationTableSchema varchar(128) ,
      @DestinationTableName varchar(128)
    )
	returns varchar(max)
as
    begin
        declare
            @DropString varchar(max) ,
            @CreateString varchar(max) ,
            @COLUMN_NAME varchar(100) ,
            @DATA_TYPE varchar(100) ,
            @CHARACTER_MAXIMUM_LENGTH int ,
            @ORDINAL_POSITION int ,
            @NUMERIC_PRECISION int ,
            @NUMERIC_SCALE int ,
            @ColumnNamePrimaryKey varchar(100) ,
            @IS_NULLABLE varchar(3) ,
            @ColumnNameNettoColumn varchar(100) ,
            @ColumnNameNettoColumnDataType varchar(100) ,
            @ColumnNamePrimaryKeyDataType varchar(100) ,
            @IsIdentity bit ,
            @TableColumnSpecification nvarchar(1000) ,
            @TableCatalogName varchar(128) ,
            @SchemaName varchar(128) ,
            @ViewName varchar(128) ,
            @DATETIME_PRECISION int ,
            @pk_index_storage_location varchar(128) ,
            @CrLf char(2);

        set @CrLf = CHAR(13) + CHAR(10);

        set @ViewName = @SourceTableName;

        set @DropString = CONCAT('EXEC [' , @StageTableCatalog ,'].sys.sp_executesql N''if exists (select * from ',
                                 @StageTableCatalog, '.sys.objects 
				where object_id = OBJECT_ID(N''''', '[' + @StageTableCatalog,
                                 '].[', @StageSchemaName, '].[', @ViewName,
                                 ']'''') 
					and type in (N''''V''''))
					drop view [',
                                 @StageSchemaName + '].[', @ViewName, '];''',
                                 @CrLf);
        set @CreateString = CONCAT('EXEC [' , @StageTableCatalog ,'].sys.sp_executesql N''create view [', @StageSchemaName, '].[',
                                   @ViewName, '] as ');

        if ( select
                COUNT(*)
             from
                [Metadata].[SourceField]
             where
                TABLE_CATALOG = @SourceTableCatalog
                and TABLE_SCHEMA = @SourceSchemaName
                and TABLE_NAME = @SourceTableName
           ) < 1
            declare @err as int = CAST('Source table has no source fields' as int);

	-- Build up the create string from meta data
        declare cColumns cursor
        for
            select
                ax.COLUMN_NAME ,
                ax.DATA_TYPE ,
                ax.CHARACTER_MAXIMUM_LENGTH ,
                ax.ORDINAL_POSITION + 100000 as ORDINAL_POSITION ,
                ax.NUMERIC_PRECISION ,
                ax.NUMERIC_SCALE ,
                ax.IS_NULLABLE ,
                0 as IsIdentity ,
                null as TableColumnSpecification ,
                ax.DATETIME_PRECISION
            from
                [Metadata].[SourceField] as ax
                left outer join [Metadata].[DestinationFieldExtended] e
                on ax.DestinationTableCatalog = e.DestinationTableCatalog
                   and ax.COLUMN_NAME = e.COLUMN_NAME
                   and ISNULL(e.SourceTableCatalog, @SourceTableCatalog) = @SourceTableCatalog
            where
                ax.TABLE_NAME = @SourceTableName
                and ax.TABLE_SCHEMA = @SourceSchemaName
                and ax.DestinationTableCatalog = @DestinationTableCatalog
                and e.COLUMN_NAME is null
                and ax.COLUMN_NAME not like 'Checksum%'
                and ax.TABLE_CATALOG = @SourceTableCatalog
                and ( @SourceServer is null
                      or ax.TABLE_SERVER = @SourceServer
                    )
            union
	
	-- Extended columns -> Group "All"
            select
                [COLUMN_NAME] ,
                [DATA_TYPE] ,
                [CHARACTER_MAXIMUM_LENGTH] ,
                [ORDINAL_POSITION] ,
                [NUMERIC_PRECISION] ,
                [NUMERIC_SCALE] ,
                [IS_NULLABLE] ,
                IsIdentity ,
                TableColumnSpecification ,
                a.DATETIME_PRECISION
            from
                [Metadata].[DestinationFieldExtended] a
            where
                [DestinationTableCatalog] = @DestinationTableCatalog
                and ISNULL(ApplicableTable, @DestinationTableName) = @DestinationTableName
                and ISNULL(SourceTableCatalog, @SourceTableCatalog) = @SourceTableCatalog
                and ISNULL(GroupName, 'All') = 'All'
            union
	
	-- Extended columns -> The group extensions for the current table
            select
                [COLUMN_NAME] ,
                [DATA_TYPE] ,
                [CHARACTER_MAXIMUM_LENGTH] ,
                [ORDINAL_POSITION] ,
                [NUMERIC_PRECISION] ,
                [NUMERIC_SCALE] ,
                [IS_NULLABLE] ,
                IsIdentity ,
                TableColumnSpecification ,
                dfe.DATETIME_PRECISION
            from
                [Metadata].[DestinationFieldExtended] as dfe
                inner join [Metadata].DestinationTable as dt
                on dfe.DestinationTableCatalog = dt.DestinationTableCatalog
		--and dfe.GroupName = dt.GroupName
                   and dt.DestinationTableName = @DestinationTableName
                   and dt.GroupName = dfe.GroupName
            where
                dfe.[DestinationTableCatalog] = @DestinationTableCatalog
                and ISNULL(ApplicableTable, @DestinationTableName) = @DestinationTableName
                and ISNULL(dfe.SourceTableCatalog, @SourceTableCatalog) = @SourceTableCatalog
                and ISNULL(dfe.GroupName, 'All') <> 'All'
            order by
                ORDINAL_POSITION;

        open cColumns;

        fetch next
	from cColumns
	into @COLUMN_NAME, @DATA_TYPE, @CHARACTER_MAXIMUM_LENGTH,
            @ORDINAL_POSITION, @NUMERIC_PRECISION, @NUMERIC_SCALE,
            @IS_NULLABLE, @IsIdentity, @TableColumnSpecification,
            @DATETIME_PRECISION;

        declare @columnString varchar(max) = '';

        while @@Fetch_Status = 0
            begin
                set @columnString = CONCAT(@columnString, ',[', @COLUMN_NAME,
                                           ']=CONVERT(',
                                           case @DATA_TYPE
                                             when 'image'
                                             then 'varbinary(max)'
                                             when 'ntext' then 'nvarchar(max)'
                                             when 'text' then 'varchar(max)'
                                             when 'timestamp'
                                             then 'varbinary(8)'
                                             else @DATA_TYPE
                                           end,
                                           case when @CHARACTER_MAXIMUM_LENGTH = -1
                                                     and @DATA_TYPE not like '%text'
                                                     and @DATA_TYPE not like '%image'
                                                then '(max)'
                                                when @CHARACTER_MAXIMUM_LENGTH is not null
                                                     and @DATA_TYPE not like '%text'
                                                     and @DATA_TYPE not like '%image'
                                                then CONCAT('(',
                                                            LTRIM(STR(@CHARACTER_MAXIMUM_LENGTH)),
                                                            ')')
                                                when @NUMERIC_PRECISION is not null
                                                     and @DATA_TYPE not like '%int'
                                                     and @DATA_TYPE not like '%money'
                                                     and @DATA_TYPE not like '%float'
                                                then CONCAT('(',
                                                            LTRIM(STR(@NUMERIC_PRECISION)),
                                                            ', ',
                                                            LTRIM(STR(@NUMERIC_SCALE)),
                                                            ')')
                                                when @DATETIME_PRECISION is not null
                                                     and ( @DATA_TYPE like 'datetime2'
                                                           or @DATA_TYPE like 'time'
                                                         )
                                                then CONCAT('(',
                                                            LTRIM(STR(@DATETIME_PRECISION)),
                                                            ')')
                                                else ''
                                           end, ',', '[', @COLUMN_NAME, ']',
                                           ')', @CrLf);

                fetch next
		from cColumns
		into @COLUMN_NAME, @DATA_TYPE, @CHARACTER_MAXIMUM_LENGTH,
                    @ORDINAL_POSITION, @NUMERIC_PRECISION, @NUMERIC_SCALE,
                    @IS_NULLABLE, @IsIdentity, @TableColumnSpecification,
                    @DATETIME_PRECISION;
            end;

        close cColumns;

        deallocate cColumns;

        set @columnString = RIGHT(@columnString, LEN(@columnString) - 1);
        set @CreateString = CONCAT(@DropString, @CrLf, @CrLf, @CreateString, @CrLf, @CrLf, 'select ',
                                   @CrLf, @columnString, 'from ',
                                   @StageTableCatalog, '.', @StageSchemaName,
                                   '.', @StageTableName, ';'''); 

        
        return @CreateString;
    end;
GO
PRINT N'Creating [ssis].[GetSrcDstKeyCondition]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetSrcDstKeyCondition] (
	@TABLE_CATALOG VARCHAR(max)
	,@SCHEMA_NAME VARCHAR(max)
	,@TABLE_NAME VARCHAR(max)
	,@COLUMN_SEPARATOR VARCHAR(50)
	)
RETURNS VARCHAR(max)
AS
BEGIN
	DECLARE @KeyCondition VARCHAR(max)

	SELECT @KeyCondition = (
			SELECT stuff((
						SELECT CONCAT (
								@COLUMN_SEPARATOR
								,' dst.'
								,QUOTENAME(COLUMN_NAME)
								,' = src.' + QUOTENAME(COLUMN_NAME)
								,' '
								)
						FROM Metadata.TableKeyDefinition
						WHERE KeyType = 'PK'
							AND TableCatalog = @TABLE_CATALOG
							AND SchemaName = @SCHEMA_NAME
							AND TableName = @TABLE_NAME
						ORDER BY KeyColumnOrder ASC
						FOR XML path('')
						), 1, len(@COLUMN_SEPARATOR), '') KeyCondition
			)

	RETURN @KeyCondition
END
GO
PRINT N'Creating [ssis].[GetSsisComponentName]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetSsisComponentName] (
	@COMPONENT_TYPE VARCHAR(50)
	,@COMPONENT_USAGE_TYPE VARCHAR(50)
	)
RETURNS VARCHAR(max)
AS
BEGIN
	DECLARE @SsisComponentName VARCHAR(max)
	DECLARE @Components AS TABLE (
		ComponentName VARCHAR(max)
		,ComponentType VARCHAR(50)
		,ComponentUsageType VARCHAR(50)
		)

	INSERT INTO @Components
	VALUES (
		'DC Error metadata'
		,'UnionAll'
		,'UnionError'
		)

	SELECT @SsisComponentName = (
			SELECT ComponentName
			FROM @Components
			WHERE ComponentType = @COMPONENT_TYPE
				AND ComponentUsageType = @COMPONENT_USAGE_TYPE
			)

	RETURN @SsisComponentName
END
GO
PRINT N'Creating [ssis].[GetDimLookupOutputColumns]...';


GO

-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE function [ssis].[GetDimLookupOutputColumns] (
	@DIMENSION_SCHEMA_CATALOG varchar(max)
	,@DIMENSION_TABLE_NAME varchar(max)
	)
returns xml
as
begin
	declare @DerivedColumns xml

	select @DerivedColumns = (
			select SourceColumn as '@SourceColumn'
				,TargetColumn as '@TargetColumn'
			from (
				-- Key columns generated from ExtendedFields
				select COLUMN_NAME as SourceColumn
					,Column_Name as TargetColumn
					,ORDINAL_POSITION
				from [Metadata].[DestinationFieldExtended]
				where DestinationTableCatalog in ((select top 1 [NormEnvironmentName]
									from [Metadata].[EnvironmentVariables]), 
										  (select top 1 RawEnvironmentName
										  from [Metadata].[EnvironmentVariables]))
					and SourceTableCatalog = (select top 1 [StagingEnvironmentName]
												from [Metadata].[EnvironmentVariables])
					and ApplicableTable = @DIMENSION_TABLE_NAME
					and IsIdentity = 1
				
				union
				
				-- add IsInferred and FromDate
				select distinct COLUMN_NAME as 'SourceColumn'
					,CONCAT (
						'Old'
						,COLUMN_NAME
						) as 'TargetColumn'
					,ORDINAL_POSITION
				from Metadata.DestinationFieldExtended e
				where COLUMN_NAME in (
						'SysIsInferred'
						--,'SysSrcGenerationDateTime'
						)
				
				union
				
				-- add HashKey manually. Column is generated in OleDb Source component
				select 'CheckSumNonPK' as SourceColumn
					,'OldCheckSumNonPK' as TargetColumn
					,9999 as ORDINAL_POSITION
				) OutPutCols
			order by ORDINAL_POSITION
			for xml path('Column')
			)

	return @DerivedColumns
end
GO
PRINT N'Creating [ssis].[GetContainerVariables]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetContainerVariables] (
	@SOURCE_CATALOG VARCHAR(50)
	,@DESTINATION_TABLE_CATALOG VARCHAR(50)
	,@DESTINATION_TABLE_NAME VARCHAR(50)
	,@USAGE_TYPE VARCHAR(50)
	)
RETURNS XML
AS
BEGIN
	DECLARE @DerivedColumns XML
	DECLARE @ExtendedVariables AS TABLE (
		column_name VARCHAR(128)
		,SSISDataType NVARCHAR(128)
		,SSISColumnSpecification NVARCHAR(255)
		,UsageType VARCHAR(50)
		)

	INSERT INTO @ExtendedVariables
	VALUES (
		'LastRecId'
		,'Int64'
		,'0'
		,'Fact'
		)
		,(
		'PackageLastExecuted'
		,'String'
		,'1900-01-01'
		,'Fact'
		)

	SELECT @DerivedColumns = (
			SELECT Column_Name AS 'Variable/@Name'
				,SSISDataType AS 'Variable/@DataType'
				,'User' AS 'Variable/@Namespace'
				,'true' AS 'Variable/@EvaluateAsExpression'
				,SSISColumnSpecification AS 'Variable'
			FROM (
				SELECT Column_Name
					,SSISDataType
					,SSISColumnSpecification
				FROM [Metadata].[DestinationFieldExtended]
				WHERE SSISColumnSpecification IS NOT NULL
					AND IsNull(SourceTableCatalog, @SOURCE_CATALOG) = @SOURCE_CATALOG
					AND DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
					AND isnull(ApplicableTable, @DESTINATION_TABLE_NAME) = @DESTINATION_TABLE_NAME
					AND COLUMN_NAME != 'SysExecutionLog_key'
					AND @USAGE_TYPE IN (
						'All'
						,'Datamart objects'
						)
				
				UNION
				
				SELECT column_name
					,SSISDataType
					,SSISColumnSpecification
				FROM @ExtendedVariables ext
				WHERE ext.UsageType = @USAGE_TYPE
				) Variables
			ORDER BY COLUMN_NAME
			FOR XML path('')
			)

	RETURN @DerivedColumns
END
GO
PRINT N'Creating [ssis].[GetSqlTaskMergeParameter]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
--		Returns the parameters for the merge operation.
--		Ordinal in result set must be insert,update,delete. 
--		Update clause should include batchid - ignore that row in SetFieldOnUpdate
--		<Parameter DataType="int" Name="OrdinalNo" ParameterName="User.x" Direction="Input"></Parameter>
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetSqlTaskMergeParameter] (
	@SOURCE_CATALOG VARCHAR(max)
	,@DESTINATION_TABLE_CATALOG VARCHAR(max)
	,@DESTINATION_TABLE_NAME VARCHAR(max)
	,@USAGE_TYPE VARCHAR(50)
	,@IncrementalLoad bit = 0
	)
RETURNS XML
AS
BEGIN
	DECLARE @MergeParameter XML

	SELECT @MergeParameter = (
			SELECT ROW_NUMBER() OVER (
					ORDER BY r
						,ordinal_position
					) - 1 AS 'Parameter/@Name'
				,VariableName AS 'Parameter/@VariableName'
				,DataType AS 'Parameter/@DataType'
				,Direction AS 'Parameter/@Direction'
			FROM (
				SELECT CONCAT (
						'User.'
						,Column_Name
						) AS VariableName
					,SSISDataType AS DataType
					,'Input' AS Direction
					,SSISColumnSpecification AS Parameter
					,
					-- meta
					2 AS r
					,ORDINAL_POSITION
				FROM [Metadata].[DestinationFieldExtended]
				WHERE SSISColumnSpecification IS NOT NULL
					AND IsNull(SourceTableCatalog, @SOURCE_CATALOG) = @SOURCE_CATALOG
					AND DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
					AND isnull(ApplicableTable, @DESTINATION_TABLE_NAME) = @DESTINATION_TABLE_NAME
					AND (SetFieldOnInsert = 1)
				
				UNION ALL
				
				SELECT CONCAT (
						'User.'
						,Column_Name
						) AS VariableName
					,SSISDataType AS DataType
					,'Input' AS Direction
					,SSISColumnSpecification AS Parameter
					,
					-- meta
					3 AS r
					,ORDINAL_POSITION
				FROM [Metadata].[DestinationFieldExtended]
				WHERE SSISColumnSpecification IS NOT NULL
					AND IsNull(SourceTableCatalog, @SOURCE_CATALOG) = @SOURCE_CATALOG
					AND DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
					AND isnull(ApplicableTable, @DESTINATION_TABLE_NAME) = @DESTINATION_TABLE_NAME
					AND (SetFieldOnUpdate = 1)
					AND COLUMN_NAME != 'SysExecutionLog_key'
				
				UNION ALL
				
				SELECT CONCAT (
						'User.'
						,Column_Name
						) AS VariableName
					,SSISDataType AS DataType
					,'Input' AS Direction
					,SSISColumnSpecification AS Parameter
					,
					-- meta
					4 AS r
					,ORDINAL_POSITION
				FROM [Metadata].[DestinationFieldExtended]
				WHERE SSISColumnSpecification IS NOT NULL
					AND IsNull(SourceTableCatalog, @SOURCE_CATALOG) = @SOURCE_CATALOG
					AND DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
					AND isnull(ApplicableTable, @DESTINATION_TABLE_NAME) = @DESTINATION_TABLE_NAME
					AND SetFieldOnDelete = 1
					AND @USAGE_TYPE = (SELECT TOP 1 [StagingEnvironmentName]
										FROM [Metadata].[EnvironmentVariables])
			UNION ALL
				
			SELECT TOP 1 'User.PackageLastExecutedNew' AS VariableName
					,'DateTime' AS DataType
					,'Input' AS Direction
					,'@[User::PackageLastExecutedNew]' AS Parameter
					,
					-- meta
					1 AS r
					,1
			FROM [Metadata].[DestinationFieldExtended]
			WHERE @IncrementalLoad = 1 AND @USAGE_TYPE = 'DWH_3_Fact'
				) Variables
			ORDER BY r
				,ORDINAL_POSITION
			FOR XML path('')
			)

	RETURN @MergeParameter
END
GO
PRINT N'Creating [dbo].[InitCap]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[InitCap] ( @InputString nvarchar(4000) ) 
RETURNS VARCHAR(4000)
AS
BEGIN

DECLARE @Index          INT
DECLARE @Char           CHAR(1)
DECLARE @PrevChar       CHAR(1)
DECLARE @OutputString   NVARCHAR(255)

SET @OutputString = LOWER(@InputString)
SET @Index = 1

WHILE @Index <= LEN(@InputString)
BEGIN
    SET @Char     = SUBSTRING(@InputString, @Index, 1)
    SET @PrevChar = CASE WHEN @Index = 1 THEN ' '
                         ELSE SUBSTRING(@InputString, @Index - 1, 1)
                    END

    IF @PrevChar IN (' ', ';', ':', '!', '?', ',', '.', '_', '-', '/', '&', '''', '(')
    BEGIN
        IF @PrevChar != '''' OR UPPER(@Char) != 'S'
            SET @OutputString = STUFF(@OutputString, @Index, 1, UPPER(@Char))
    END

    SET @Index = @Index + 1
END

RETURN @OutputString

END
GO
PRINT N'Creating [Metadata].[GetFieldDefaults]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [Metadata].[GetFieldDefaults] (
	@SourceTableCatalog VARCHAR(128)
	,@SourceSchemaName VARCHAR(128)
	,
	--@SourceTableName varchar(128),
	@DestinationTableCatalog VARCHAR(128)
	,@DestinationSchemaName VARCHAR(128)
	,@DestinationTableName VARCHAR(128)
	)
RETURNS TABLE
AS
RETURN (
		SELECT [COLUMN_NAME] AS ColumnName
			,CASE [DATA_TYPE]
				WHEN 'nvarchar'
					THEN 'String'
				WHEN 'varchar'
					THEN 'String'
				WHEN 'int'
					THEN 'Int32'
				WHEN 'bigint'
					THEN 'Int64'
				WHEN 'bit'
					THEN 'Boolean'
				WHEN 'smallint'
					THEN 'Int16'
				WHEN 'date'
					THEN 'DateTime'
				WHEN 'numeric'
					THEN 'Double'
				ELSE [DATA_TYPE]
				END AS DataType
			,[CHARACTER_MAXIMUM_LENGTH] AS CharLength
			,CASE 
				WHEN [DATA_TYPE] IN (
						'nvarchar'
						,'varchar'
						)
					THEN '-1'
				WHEN [DATA_TYPE] IN (
						'bigint'
						,'int'
						,'numeric'
						,'smallint'
						)
					THEN '-1'
				WHEN [DATA_TYPE] = 'bit'
					THEN 'False'
				WHEN [DATA_TYPE] LIKE 'date%'
					THEN '1900-01-01'
				END AS DefaultValue
		FROM Metadata.DestinationTable dt
		JOIN [Metadata].[SourceField] sf ON sf.TABLE_NAME = dt.SourceTableName
			AND sf.TABLE_SCHEMA = dt.SourceSchemaName
			AND sf.TABLE_CATALOG = dt.SourceTableCatalog
			AND sf.DestinationTableCatalog = dt.DestinationTableCatalog
		WHERE TABLE_CATALOG = @SourceTableCatalog
			AND TABLE_SCHEMA = @SourceSchemaName
			AND sf.DestinationTableCatalog = @DestinationTableCatalog
			AND DestinationSchemaName = @DestinationSchemaName
			AND dt.DestinationTableName = @DestinationTableName
			AND NOT EXISTS (
				SELECT COLUMN_NAME
				FROM Metadata.TableKeyDefinition pkd
				WHERE KeyType = 'PK'
					AND pkd.TableCatalog = sf.DestinationTableCatalog
					AND pkd.SchemaName = dt.DestinationSchemaName
					AND pkd.TableName = dt.DestinationTableName
					AND pkd.COLUMN_NAME = sf.COLUMN_NAME
				)
			AND (
				IS_NULLABLE = 'NO'
				OR COLUMN_NAME = 'HistoryRecId'
				OR COLUMN_NAME LIKE '%_bkey'
				)
		);
GO
PRINT N'Creating [Metadata].[GetFieldsWithRelatedDimensionKeys]...';


GO

-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
/*
	SELECT *
	FROM [Metadata].[GetFieldsWithRelatedDimensionKeys]('Stage', 'DataWarehouse', 'Person', 'DataWarehouse', 'DW', 'Person')
*/
--
--
-- =============================================
CREATE function [Metadata].[GetFieldsWithRelatedDimensionKeys]
    (
      @SourceTableCatalog varchar(128) ,
      @SourceSchemaName varchar(128) ,
      @SourceTableName varchar(128) ,
      @DestinationTableCatalog varchar(128) ,
      @DestinationSchemaName varchar(128) ,
      @DestinationTableName varchar(128)
    )
returns table
as
return
    (
		with    Sourcefields
                  as ( select
                        sf.DestinationTableCatalog ,
                        DestinationSchemaName ,
                        sf.TABLE_NAME as TableName ,
                        sf.COLUMN_NAME as ColumnName ,
                        case when LEN(sf.COLUMN_NAME)
                                  - LEN(REPLACE(sf.COLUMN_NAME, '_', '')) > 1
                             then CONCAT(LEFT(sf.COLUMN_NAME,
                                              CHARINDEX('_', sf.COLUMN_NAME)),
                                         RIGHT(sf.COLUMN_NAME,
                                               CHARINDEX('_',
                                                         REVERSE(sf.COLUMN_NAME))
                                               - 1))
                             else sf.COLUMN_NAME
                        end as FKColumnName ,
                        ORDINAL_POSITION ,
                        DATA_TYPE as DataType ,
                        dt.DestinationTableName
                       from
                        Metadata.SourceField sf
                        join Metadata.DestinationTable dt
                        on dt.SourceTableCatalog = sf.TABLE_CATALOG
                           and dt.SourceSchemaName = sf.[TABLE_SCHEMA]
                           and dt.SourceTableName = sf.TABLE_NAME
                           and dt.DestinationTableCatalog = sf.DestinationTableCatalog
                       where
                        sf.TABLE_CATALOG = @SourceTableCatalog
                        and sf.TABLE_SCHEMA = @SourceSchemaName
                        and sf.TABLE_NAME = @SourceTableName
                        and sf.DestinationTableCatalog = @DestinationTableCatalog
                        and dt.DestinationSchemaName = @DestinationSchemaName
                        and dt.DestinationTableName = @DestinationTableName
                     ),
                Keys
                  as ( select
                        TableCatalog ,
                        SchemaName ,
                        tkd.TableName ,
                        tkd.COLUMN_NAME as ColumnName ,
					-- ifall inte ordinalpositionerna är korrekt satta i TableKeyDefinition använder vi ROW_NUMBER istället
                        'KeyCol'
                        + CONVERT(varchar(2), ROW_NUMBER() over ( partition by tkd.TableCatalog,
                                                              tkd.SchemaName,
                                                              tkd.TableName order by tkd.KeyColumnOrder )) as ColumnOrdinalName
                       from
                        Metadata.TableKeyDefinition tkd
                       where
                        exists ( select top 1
                                    1
                                 from
                                    Sourcefields sf
                                 where
                                    sf.DestinationTableCatalog = tkd.TableCatalog
                                    and sf.DestinationSchemaName = tkd.SchemaName )
                        and KeyType = 'PK'
                        and tkd.COLUMN_NAME not in (
						--'SysSrcGenerationDateTime'
                        'ToDate' ) --, 'SourceSystemKey')
                        and tkd.TableName like 'n_%'
                     ),
                KeyPivot
                  as ( select
                        TableName ,
                        [KeyCol1] ,
                        [KeyCol2] ,
                        [KeyCol3] ,
                        [KeyCol4] ,
                        [KeyCol5] ,
                        [KeyCol6] ,
                        [KeyCol7]
                       from
                        Keys pivot( MAX(ColumnName) for ColumnOrdinalName in ( [KeyCol1],
                                                              [KeyCol2],
                                                              [KeyCol3],
                                                              [KeyCol4],
                                                              [KeyCol5],
                                                              [KeyCol6],
                                                              [KeyCol7] ) ) as pvt
                     )
    select
        sf.TableName ,
        sf.ColumnName ,
        ORDINAL_POSITION as OrdinalPosition ,
        kp.TableName as RelatedTableName ,
        case when KeyCol1 = sf.FKColumnName then KeyCol1
             when KeyCol2 = sf.FKColumnName then KeyCol2
             when KeyCol3 = sf.FKColumnName then KeyCol3
             when KeyCol4 = sf.FKColumnName then KeyCol4
             when KeyCol5 = sf.FKColumnName then KeyCol5
             when KeyCol6 = sf.FKColumnName then KeyCol6
             when KeyCol7 = sf.FKColumnName then KeyCol7
             else null
        end as RelatedKeyColumn ,
        DataType as RelatedKeyDataType ,
        case DataType
          when 'nvarchar' then 'String'
          when 'varchar' then 'String'
          when 'int' then 'Int32'
          when 'bigint' then 'Int64'
          when 'bit' then 'Boolean'
          when 'smallint' then 'Int16'
          when 'date' then 'DateTime'
          when 'numeric' then 'Double'
          else DataType
        end as RelatedKeySSISDataType
    from
        Sourcefields sf
        left join KeyPivot kp
        on ( KeyCol1 = sf.FKColumnName
             or KeyCol2 = sf.FKColumnName
             or KeyCol3 = sf.FKColumnName
             or KeyCol4 = sf.FKColumnName
             or KeyCol5 = sf.FKColumnName
             or KeyCol6 = sf.FKColumnName
             or KeyCol7 = sf.FKColumnName
           )
           and ( KeyCol1 like '%_bkey'
                 and KeyCol1 in ( select
                                    FKColumnName
                                  from
                                    Sourcefields )
                 or KeyCol1 is null
               )
           and ( KeyCol2 like '%_bkey'
                 and KeyCol2 in ( select
                                    FKColumnName
                                  from
                                    Sourcefields )
                 or KeyCol2 is null
               )
           and ( KeyCol3 like '%_bkey'
                 and KeyCol3 in ( select
                                    FKColumnName
                                  from
                                    Sourcefields )
                 or KeyCol3 is null
               )
           and ( KeyCol4 like '%_bkey'
                 and KeyCol4 in ( select
                                    FKColumnName
                                  from
                                    Sourcefields )
                 or KeyCol4 is null
               )
           and ( KeyCol5 like '%_bkey'
                 and KeyCol5 in ( select
                                    FKColumnName
                                  from
                                    Sourcefields )
                 or KeyCol5 is null
               )
           and ( KeyCol6 like '%_bkey'
                 and KeyCol6 in ( select
                                    FKColumnName
                                  from
                                    Sourcefields )
                 or KeyCol6 is null
               )
           and ( KeyCol7 like '%_bkey'
                 and KeyCol7 in ( select
                                    FKColumnName
                                  from
                                    Sourcefields )
                 or KeyCol7 is null
               )
		);
GO
PRINT N'Creating [Metadata].[SplitString]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [Metadata].[SplitString] (
	@Input NVARCHAR(MAX)
	,@Character CHAR(1)
	)
RETURNS @Output TABLE (Item NVARCHAR(1000))
AS
BEGIN
	DECLARE @StartIndex INT
		,@EndIndex INT

	SET @StartIndex = 1

	IF SUBSTRING(@Input, LEN(@Input) - 1, LEN(@Input)) <> @Character
	BEGIN
		SET @Input = @Input + @Character
	END

	WHILE CHARINDEX(@Character, @Input) > 0
	BEGIN
		SET @EndIndex = CHARINDEX(@Character, @Input)

		INSERT INTO @Output (Item)
		SELECT SUBSTRING(@Input, @StartIndex, @EndIndex - 1)

		SET @Input = SUBSTRING(@Input, @EndIndex + 1, LEN(@Input))
	END

	RETURN
END
GO
PRINT N'Creating [Deployment].[ObjectChangeLog]...';


GO
CREATE VIEW [Deployment].[ObjectChangeLog]
AS
SELECT SourceTableCatalog + '.' + SourceSchemaName + '.' + SourceTableName AS ObjectName
	,VersionComment
	,UserNameInserted AS UserNameChanged
	,max(DateTimeInsertedUTC) AS LastChangedUTC
	,'View' AS ObjectType
FROM [Metadata].[DestinationTableLog]
GROUP BY SourceTableCatalog
	,SourceSchemaName
	,SourceTableName
	,VersionComment
	,UserNameInserted

UNION

SELECT DestinationTableCatalog + '.' + DestinationSchemaName + '.' + DestinationTableName AS ObjectName
	,VersionComment
	,UserNameInserted
	,max(DateTimeInsertedUTC) AS LastChangedUTC
	,'Table' AS ObjectType
FROM [Metadata].[DestinationTableLog]
GROUP BY DestinationTableCatalog
	,DestinationSchemaName
	,DestinationTableName
	,VersionComment
	,UserNameInserted

UNION

SELECT SSISPackageName AS ObjectName
	,VersionComment
	,dtl.UserNameInserted
	,max(dtl.DateTimeInsertedUTC) AS LastChangedUTC
	,'SSIS Package' AS ObjectType
FROM [Metadata].[DestinationTableLog] dtl
INNER JOIN [Metadata].[DestinationTable] dt ON dtl.SourceTableCatalog = dt.SourceTableCatalog
	AND dtl.SourceSchemaName = dt.SourceSchemaName
	AND dtl.SourceTableName = dt.SourceTableName
	AND dtl.DestinationTableCatalog = dt.DestinationTableCatalog
	AND dtl.DestinationSchemaName = dt.DestinationSchemaName
	AND dtl.DestinationTableName = dt.DestinationTableName
GROUP BY SSISPackageName
	,VersionComment
	,dtl.UserNameInserted
GO
PRINT N'Creating [Metadata].[DestinationTableSourceField]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE VIEW [Metadata].[DestinationTableSourceField]
AS
SELECT d.SourceTableCatalog
	,d.SourceSchemaName
	,d.SourceTableName
	,d.SourceFile
	,d.DestinationTableCatalog
	,d.DestinationSchemaName
	,d.DestinationTableName
	,d.StageTableCatalog
	,d.StageSchemaName
	,d.StageTableName
	,SourceFieldID
	,COLUMN_NAME
	,ORDINAL_POSITION
	,COLUMN_DEFAULT
	,IS_NULLABLE
	,DATA_TYPE
	,CHARACTER_MAXIMUM_LENGTH
	,CHARACTER_OCTET_LENGTH
	,NUMERIC_PRECISION
	,NUMERIC_PRECISION_RADIX
	,NUMERIC_SCALE
	,DATETIME_PRECISION
	,CHARACTER_SET_CATALOG
	,CHARACTER_SET_SCHEMA
	,CHARACTER_SET_NAME
	,COLLATION_CATALOG
	,COLLATION_SCHEMA
	,COLLATION_NAME
	,DOMAIN_CATALOG
	,DOMAIN_SCHEMA
	,DOMAIN_NAME
FROM Metadata.SourceField s
JOIN Metadata.DestinationTable d ON s.TABLE_CATALOG = d.SourceTableCatalog
	AND s.TABLE_SCHEMA = d.SourceSchemaName
	AND s.TABLE_NAME = d.SourceTableName
GO
PRINT N'Creating [Metadata].[SourceFileField]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE VIEW [Metadata].[SourceFileField]
AS
SELECT FileCatalog = [TABLE_CATALOG]
	,FileSchema = TABLE_SCHEMA
	,[FileName] = [TABLE_NAME]
	,[COLUMN_NAME]
	,[ORDINAL_POSITION]
	,[IS_NULLABLE]
	,[DATA_TYPE]
	,[CHARACTER_MAXIMUM_LENGTH]
	,[CHARACTER_OCTET_LENGTH]
	,[NUMERIC_PRECISION]
	,[NUMERIC_PRECISION_RADIX]
	,[NUMERIC_SCALE]
	,[DATETIME_PRECISION]
	,[DestinationTableCatalog]
	,[SourceFieldID]
FROM [Metadata].[SourceField]
GO
PRINT N'Creating [Metadata].[PackageDependencyGraph]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE VIEW [Metadata].[PackageDependencyGraph]
AS
-- InferredMemberDependencies --> Add recursivity together with a depth
SELECT dt.SSISPackageName
	,dtdependency.SSISPackageName AS DependentOnSSISPackageName
FROM Metadata.DestinationTable dt
LEFT OUTER JOIN Metadata.SourceField sf ON dt.DestinationTableCatalog = sf.DestinationTableCatalog
	AND dt.SourceTableCatalog = sf.TABLE_CATALOG
	AND dt.SourceSchemaName = sf.TABLE_SCHEMA
	AND dt.SourceTableName = sf.TABLE_NAME
	AND sf.COLUMN_NAME LIKE '%_bkey'
	AND replace(sf.COLUMN_NAME, '_bkey', '') NOT LIKE right(dt.SSISPackageName, len(replace(sf.COLUMN_NAME, 'Key', '')))
	AND sf.COLUMN_NAME NOT IN (
		'SysValidFromDateTime'
		,'ToDateKey'
		)
LEFT OUTER JOIN Metadata.DestinationTable dtdependency ON replace(sf.COLUMN_NAME, '_bkey', '') = replace(dtdependency.SSISPackageName, 'DW_d', '')
	AND dtdependency.DestinationTableCatalog = 'DataWarehouse'
WHERE sf.COLUMN_NAME IS NOT NULL
	AND dt.DestinationTableCatalog = 'DataWarehouse'
GO
PRINT N'Creating [ssis].[DerivedColumns]...';


GO


-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
--		Returns the result set of all the columns, with their specifications,
--		that will be part of the derived columns in the SSIS Dataflow
-- Example:	
--
--
-- =============================================
CREATE VIEW [ssis].[DerivedColumns]
AS
SELECT SourceTableCatalog
	,CAST(NULL AS VARCHAR(MAX)) AS SourceSchemaName
	,DestinationTableCatalog
	,ApplicableTable DestinationTableName
	,Column_Name
	,CAST(NULL AS VARCHAR(128)) AS ForeignKeyTable
	,
	--SSISDataType as Data_Type,
	dtt.Biml AS Data_Type
	,SSISColumnSpecification AS Col
	,CASE dtt.DataTypeGroup
		WHEN 'Numeric'
			THEN '-1'
		WHEN 'Text'
			THEN '"-1"'
		WHEN 'Date'
			THEN SSISColumnSpecification
		ELSE '"-1"'
		END AS ColMissingMember
	,character_maximum_length AS ColMaxLength
	,'false' AS ReplaceExisting
	,SetFieldOnInsert
	,SetFieldOnUpdate
	,SetFieldOnDelete
	,GroupName
	,dfe.DestinationSchemaName
FROM [Metadata].[DestinationFieldExtended] dfe
JOIN Metadata.DataTypeTranslation dtt ON dfe.DATA_TYPE = dtt.SQLServer
WHERE SSISColumnSpecification IS NOT NULL
-- add foreign keys if destination is DW or DM layer

UNION ALL



SELECT ds.SourceTableCatalog
	,ds.SourceSchemaName
	,ds.DestinationTableCatalog
	,ds.DestinationTableName
	,ds.COLUMN_NAME
	,tkd.TableName AS ForeignKeyTable
	,dtt.Biml AS Data_Type
	,CASE dtt.DataTypeGroup
		WHEN 'Numeric'
			THEN 'ISNULL(' + ds.column_name + ') ? -1 : ' + ds.column_name
		WHEN 'Text'
			THEN 'ISNULL(' + ds.column_name + ') ? "-1" : ' + ds.column_name
	     WHEN 'Date'
			THEN 'ISNULL(' + ds.column_name + ') ? (DT_DBTIMESTAMP)"1990-01-01" : ' + ds.column_name
		ELSE 'ISNULL(' + ds.column_name + ') ? "-1" : ' + ds.column_name
		END AS Col
	,CASE dtt.DataTypeGroup
		WHEN 'Numeric'
			THEN '-1'
		WHEN 'Text'
			THEN '"-1"'
	     WHEN 'Date'
		  THEN '"1990-01-01"'
		ELSE '"-1"'
		END AS ColMissingMember
	,ds.character_maximum_length AS ColMaxLength
	,'true' AS ReplaceExisting
	,0 AS SetFieldOnInsert
	,0 AS SetFieldOnUpdate
	,0 AS SetFieldOnDelete
	,'Dim/Fact' AS GroupName
	,ds.DestinationSchemaName
FROM Metadata.DestinationTableSourceField ds
JOIN Metadata.DataTypeTranslation dtt ON ds.DATA_TYPE = dtt.SQLServer
-- Get Foreign Key table
LEFT JOIN Metadata.TableKeyDefinition tkd ON tkd.TableCatalog = ds.DestinationTableCatalog
	AND tkd.SchemaName = ds.DestinationSchemaName
	AND tkd.COLUMN_NAME = ds.COLUMN_NAME
	AND tkd.KeyType = 'PK'
	AND STUFF(tkd.TableName, 1, 1, '') = REPLACE(tkd.column_name, '_bkey', '')
WHERE ds.DestinationTableCatalog IN (
		(SELECT TOP 1 [NormEnvironmentName]
		FROM [Metadata].[EnvironmentVariables])
		, (SELECT TOP 1 [MartEnvironmentName]
			FROM [Metadata].[EnvironmentVariables])
		)
	AND ds.COLUMN_NAME LIKE '%_bkey'
	AND REPLACE(ds.column_name, '_bkey', '') != STUFF(ds.destinationTableName, 1, 1, '')
GO
PRINT N'Creating [ssis].[SQLTaskMergeDeleteColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE VIEW [ssis].[SQLTaskMergeDeleteColumns]
AS
SELECT SourceTableCatalog AS TABLE_CATALOG
	,cast(NULL AS VARCHAR(max)) AS TABLE_SCHEMA
	,applicableTable AS TABLE_NAME
	,DestinationTableCatalog AS DestinationTableCatalog
	,column_name + '=?' AS DeleteCols
	,ORDINAL_POSITION
FROM [Metadata].[DestinationFieldExtended]
WHERE SSISColumnSpecification IS NOT NULL
	AND SetFieldOnDelete = 1
GO
PRINT N'Creating [ssis].[SQLTaskMergeDiffColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE VIEW [ssis].[SQLTaskMergeDiffColumns]
AS
SELECT TABLE_CATALOG
	,TABLE_SCHEMA
	,TABLE_NAME
	,DestinationTableCatalog
	,CASE 
		WHEN IS_NULLABLE = 'NO'
			THEN 'dst.' + QUOTENAME(column_name) + ' != src.' + QUOTENAME(column_name)
		ELSE 'IsNull(Convert(nvarchar(max),dst.' + QUOTENAME(column_name) + '),'''') !=IsNull(Convert(nvarchar(max),src.' + QUOTENAME(column_name) + '),'''')'
		END DiffCols
FROM Metadata.SourceField f
WHERE NOT EXISTS (
		SELECT COLUMN_NAME
		FROM Metadata.TableKeyDefinition pkd
		WHERE KeyType = 'PK'
			AND f.TABLE_NAME = pkd.TableName
			AND f.COLUMN_NAME = pkd.COLUMN_NAME
		)
	AND NOT EXISTS (
		SELECT COLUMN_NAME
		FROM [Metadata].[DestinationFieldExtended] fe
		WHERE fe.DestinationTableCatalog = f.DestinationTableCatalog
			AND f.COLUMN_NAME = fe.COLUMN_NAME
		)
GO
PRINT N'Creating [ssis].[SQLTaskMergeInsertValueColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE VIEW [ssis].[SQLTaskMergeInsertValueColumns]
AS
SELECT Table_Catalog
	,Table_Schema
	,Table_Name
	,QUOTENAME(COLUMN_NAME) Insert_Column
	,QUOTENAME(COLUMN_NAME) AS Value_Column
	,DestinationTableCatalog
	,1 AS ordNo
	,ORDINAL_POSITION
FROM Metadata.SourceField

UNION ALL

SELECT SourceTableCatalog AS Table_Catalog
	,NULL AS Table_Schema
	,applicableTable AS Table_Name
	,column_name AS Insert_Column
	,'?' AS Value_Column
	,DestinationTableCatalog
	,2 AS ordNo
	,ORDINAL_POSITION
FROM [Metadata].[DestinationFieldExtended]
WHERE SSISColumnSpecification IS NOT NULL
	AND SetFieldOnInsert = 1
GO
PRINT N'Creating [ssis].[UpdatableColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE VIEW [ssis].[UpdatableColumns]
AS
SELECT dt.SourceTableCatalog
	,dt.SourceSchemaName
	,dt.SourceTableName
	,dt.DestinationTableCatalog
	,dt.DestinationSchemaName
	,dt.DestinationTableName
	,COLUMN_NAME
	,f.ORDINAL_POSITION
FROM Metadata.SourceField f
JOIN Metadata.DestinationTable dt ON f.TABLE_CATALOG = dt.SourceTableCatalog
	AND f.TABLE_SCHEMA = dt.SourceSchemaName
	AND f.TABLE_NAME = dt.SourceTableName
WHERE NOT EXISTS (
		SELECT COLUMN_NAME
		FROM [Metadata].[DestinationFieldExtended] fe
		WHERE fe.DestinationTableCatalog = dt.DestinationTableCatalog
			AND f.COLUMN_NAME = fe.COLUMN_NAME
		)
	AND NOT EXISTS (
		SELECT COLUMN_NAME
		FROM Metadata.TableKeyDefinition pkd
		WHERE KeyType = 'PK'
			AND pkd.TableCatalog = dt.DestinationTableCatalog
			AND pkd.SchemaName = dt.DestinationSchemaName
			AND pkd.TableName = dt.DestinationTableName
			AND pkd.COLUMN_NAME = f.COLUMN_NAME
		)
GO
PRINT N'Creating [ssis].[LookupDimensionInputColumns]...';


GO

-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE VIEW [ssis].[LookupDimensionInputColumns]
AS
SELECT t.TableCatalog
	,t.SchemaName
	,t.TableName
	,t.COLUMN_NAME ColumnName
	,t.KeyColumnOrder
FROM Metadata.TableKeyDefinition t
WHERE TableCatalog IN ((SELECT TOP 1 [NormEnvironmentName]
					FROM [Metadata].[EnvironmentVariables]), 
					    (SELECT TOP 1 RawEnvironmentName
					    FROM [Metadata].[EnvironmentVariables]))
	-- add where KeyType = 'PK' ??
	AND NOT EXISTS (
		SELECT 1
		FROM [Metadata].[DestinationFieldExtended]
		WHERE DestinationTableCatalog IN ((SELECT TOP 1 [NormEnvironmentName]
									FROM [Metadata].[EnvironmentVariables]), 
										  (SELECT TOP 1 RawEnvironmentName
										  FROM [Metadata].[EnvironmentVariables]))
			AND SourceTableCatalog = (SELECT TOP 1 [StagingEnvironmentName]
										FROM [Metadata].[EnvironmentVariables])
			AND IsNull(ApplicableTable, t.TableName) = t.TableName
			AND COLUMN_NAME = t.COLUMN_NAME
		)
	AND t.COLUMN_NAME NOT LIKE 'SysValidFromDatetime'
GO
PRINT N'Creating [ssis].[DimensionForeignKeyColumns]...';


GO

-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
--		Return all Foreign Key columns for Dimension and Fact tables.
--		Used by DW BIML-script to setup flows to handle Inferred members
-- Example:	
--
--
-- =============================================
CREATE VIEW [ssis].[DimensionForeignKeyColumns]
AS
/*
		Return all Foreign Key columns for Dimension and Fact tables.
		Used by DW BIML-script to setup flows to handle Inferred members
	*/
SELECT SrcDim.DimensionTableCatalog
	, SrcDim.DimensionSchemaName
	, SrcDim.DimensionTableName
	, FkDim.ForeignKeyTableName
	, SrcDim.ForeignKeyColumn
	, FkDim.ForeignKeyColumn as ForeignKeyTableColumnName

FROM (
	-- Dimension and Foreign Key data
	SELECT dt.DestinationTableCatalog DimensionTableCatalog
		,dt.DestinationSchemaName DimensionSchemaName
		,dt.DestinationTableName DimensionTableName
		,COLUMN_NAME AS ForeignKeyColumn
	FROM Metadata.SourceField sf
	JOIN Metadata.DestinationTable dt ON sf.TABLE_CATALOG = dt.SourceTableCatalog
		AND sf.TABLE_SCHEMA = dt.SourceSchemaName
		AND sf.TABLE_NAME = dt.SourceTableName
	WHERE dt.DestinationTableCatalog = (SELECT TOP 1 [NormEnvironmentName]
										FROM [Metadata].[EnvironmentVariables])
		AND dt.GroupName IN (
			'Dimension'
			,'Fact'
			)
		AND COLUMN_NAME LIKE '%_bkey'
		AND replace(column_name, '_bkey', '') != STUFF(dt.DestinationTableName, 1, 2, '')
		-- exclude Key columns generated by DestinationFieldExtended  
		AND NOT EXISTS (
			SELECT 1
			FROM Metadata.DestinationFieldExtended x
			WHERE x.COLUMN_NAME = sf.COLUMN_NAME
				AND x.DestinationTableCatalog = dt.DestinationTableCatalog
				AND x.COLUMN_NAME LIKE '%_bkey'
			)
	) SrcDim
JOIN (
	-- Foreign Key Table and Column Data
	SELECT tkd.TableCatalog ForeignKeyTableCatalog
		,tkd.SchemaName ForeignKeyTableSchemaName
		,tkd.TableName ForeignKeyTableName
		,COLUMN_NAME ForeignKeyColumn
	FROM Metadata.TableKeyDefinition tkd
	WHERE COLUMN_NAME LIKE '%_bkey'
		AND replace(column_name, '_bkey', '') = STUFF(TableName, 1, 2, '')
		AND TableCatalog = (SELECT TOP 1 [NormEnvironmentName]
							FROM [Metadata].[EnvironmentVariables])
		AND KeyType = 'PK'
	) FkDim ON SrcDim.DimensionTableCatalog = FkDim.ForeignKeyTableCatalog
	AND SrcDim.DimensionSchemaName = FkDim.ForeignKeyTableSchemaName
	AND (SrcDim.ForeignKeyColumn = FkDim.ForeignKeyColumn 
			or left(SrcDim.ForeignKeyColumn, CHARINDEX('_', SrcDim.ForeignKeyColumn, 1)-1) + '_bkey' = FkDim.ForeignKeyColumn
		)

	AND fkDim.ForeignKeyColumn != 'SourceSystemKey'
GO
PRINT N'Creating [ssis].[LookupDimensionKeyColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
/*
		Todo: Handle Extended field properly. 
		If DestinationFieldExtended column B is added in a later stage,
		rows with data that has not changed will not be updated in DW/DM layer
*/
-- =============================================




CREATE VIEW [ssis].[LookupDimensionKeyColumns]
AS
SELECT TableCatalog AS DimensionCatalogName
	,SchemaName AS DimensionSchemaName
	,TableName AS DimensionName
	,Column_Name
	,KeyColumnOrder Ordinal_Position
FROM Metadata.TableKeyDefinition pkd
WHERE (pkd.KeyType = 'PK') -- or column_name ='FromDate')
	AND TableCatalog IN (
		(SELECT TOP 1 [NormEnvironmentName]
		FROM [Metadata].[EnvironmentVariables])
		, (SELECT TOP 1 [MartEnvironmentName]
			FROM [Metadata].[EnvironmentVariables]), 
			    (SELECT TOP 1 RawEnvironmentName
			    FROM [Metadata].[EnvironmentVariables])
		) -- should only be used for DW/DM layer only

UNION

SELECT DestinationTableCatalog
	,NULL AS DimensionSchemaName
	,ApplicableTable AS DimensionName
	,Column_Name
	,Ordinal_Position
FROM Metadata.DestinationFieldExtended
WHERE DestinationTableCatalog IN (
		(SELECT TOP 1 [NormEnvironmentName]
		FROM [Metadata].[EnvironmentVariables])
		, (	SELECT TOP 1 [MartEnvironmentName]
			FROM [Metadata].[EnvironmentVariables])
			, (SELECT TOP 1 RawEnvironmentName
			    FROM [Metadata].[EnvironmentVariables])
		)
	AND (
		IsIdentity = 1
		OR column_name = 'SysIsInferred'
		)
GO
PRINT N'Creating [ssis].[SQLTaskAddMissingMemberInsertValueColumns]...';


GO


-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE VIEW [ssis].[SQLTaskAddMissingMemberInsertValueColumns]
AS
SELECT Table_Catalog
	,Table_Schema
	,Table_Name
	,COLUMN_NAME
	,CASE 
		WHEN column_name = 'SysDatetimeDeletedUTC'
			THEN 'null'
		WHEN data_type LIKE '%date%'
			THEN '''1900-01-01'''
		WHEN column_name LIKE '%_bkey'
			THEN '''-1'''
		WHEN COLUMN_NAME = 'SysValidFromDateTime'
			THEN '''1900-01-01'''
		WHEN COLUMN_NAME = 'ToDate'
			THEN '''9999-12-31'''
		WHEN column_name = 'SysDatetimeInsertedUTC'
			THEN '''' + CONVERT(CHAR(10), GetDate(), 126) + ''''
		WHEN DATA_TYPE LIKE '%char%'
			OR DATA_TYPE LIKE '%text%'
			THEN '''N/A'''
		WHEN DATA_TYPE = 'varbinary'
			OR data_type = 'binary'
			THEN 'null'
		WHEN data_type IN (
				'int'
				,'bigint'
				,'money'
				,'smallmoney'
				,'decimal'
				,'tinyint'
				,'float'
				,'bit'
				,'numeric'
				)
			THEN '0'
		WHEN data_type = 'uniqueidentifier'
			THEN '''00000000-0000-0000-0000-000000000000'''
		ELSE '''-1'''
		END ValueCol
	,DestinationTableCatalog
	,'-' as DestinationSchemaName
	,data_type
	,1 AS ordNo
	,ORDINAL_POSITION
FROM Metadata.SourceField

UNION ALL

SELECT SourceTableCatalog AS Table_Catalog
	,NULL AS Table_Schema
	,applicableTable AS Table_Name
	,column_name AS Insert_Column
	,CASE 
		WHEN column_name = 'SysDatetimeInsertedUTC'
			THEN 'GETUTCDATE()'
		WHEN COLUMN_NAME = 'SysValidFromDateTime'
			THEN '''1900-01-01'''
		WHEN data_type LIKE '%date%'
			THEN 'GETUTCDATE()'
		WHEN column_name LIKE '%_bkey'
			THEN '''-1'''
		WHEN column_name = 'SysExecutionLog_key'
			THEN '?'
		WHEN COLUMN_NAME = 'ToDate'
			THEN '''9999-12-31'''
		WHEN DATA_TYPE LIKE '%char%'
			OR DATA_TYPE LIKE '%text%'
			OR data_type = 'varbinary'
			THEN '''N/A'''
		WHEN data_type IN (
				'int'
				,'bigint'
				,'money'
				,'smallmoney'
				,'decimal'
				,'tinyint'
				,'float'
				,'bit'
				,'numeric'
				)
			THEN '0'
		WHEN data_type = 'uniqueidentifier'
			THEN '''00000000-0000-0000-0000-000000000000'''
		ELSE '''-1'''
		END ValueCol
	,DestinationTableCatalog
	,DestinationSchemaName
	,data_type
	,2 AS ordNo
	,ORDINAL_POSITION
FROM [Metadata].[DestinationFieldExtended]
--where (SSISColumnSpecification IS NOT NULL)
WHERE ApplicableTable IS NULL
	AND DestinationTableCatalog IN (	(SELECT TOP 1 [NormEnvironmentName]
								FROM [Metadata].[EnvironmentVariables]), 
									    (SELECT TOP 1 RawEnvironmentName
									    FROM [Metadata].[EnvironmentVariables]))
	AND NOT SSISColumnSpecification IS NULL
	AND (
		SetFieldOnInsert = 1
		OR COLUMN_NAME IN (
			'SysValidFromDateTime'
			,'ToDate'
			)
		)
-- include table specific extended fields. setfield on insert is set to 0 but needed. 
-- AS applicable table does not have same name as source it needs to be 
-- fetched via destinationTable. dStore in DW have name dStoreV in stage

UNION ALL

SELECT dt.SourceTableCatalog AS Table_Catalog
	,dt.SourceSchemaName AS Table_Schema
	,dt.SourceTableName AS Table_Name
	,-- apply source name and not destination
	column_name AS Insert_Column
	,CASE 
		WHEN data_type LIKE '%date%'
			THEN '''1900-01-01'''
		WHEN column_name LIKE '%_bkey'
			THEN '''-1'''
		WHEN column_name LIKE '%_key'
			THEN '''-1'''
		WHEN DATA_TYPE LIKE '%char%'
			OR DATA_TYPE LIKE '%text%'
			OR data_type = 'varbinary'
			THEN '''N/A'''
		WHEN data_type IN (
				'int'
				,'bigint'
				,'money'
				,'smallmoney'
				,'decimal'
				,'tinyint'
				,'float'
				,'bit'
				,'numeric'
				)
			THEN '0'
		WHEN data_type = 'uniqueidentifier'
			THEN '''00000000-0000-0000-0000-000000000000'''
		ELSE '''-1'''
		END ValueCol
	,ext.DestinationTableCatalog
	,ext.DestinationSchemaName
	,data_type
	,2 AS ordNo
	,ORDINAL_POSITION
FROM Metadata.DestinationFieldExtended ext
JOIN Metadata.DestinationTable dt ON ext.ApplicableTable = dt.DestinationTableName
	AND ext.DestinationTableCatalog = dt.DestinationTableCatalog
	AND ext.SourceTableCatalog = dt.SourceTableCatalog
	AND ext.DestinationSchemaName = dt.DestinationSchemaName
WHERE NOT ext.ApplicableTable IS NULL
GO
PRINT N'Creating [ssis].[SQLTaskMergeUpdateColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE VIEW [ssis].[SQLTaskMergeUpdateColumns]
AS
SELECT TABLE_CATALOG
	,TABLE_SCHEMA
	,TABLE_NAME
	,DestinationTableCatalog
	,QUOTENAME(column_name) + '=src.' + QUOTENAME(column_name) UpdateCols
	,1 AS ordNo
	,ORDINAL_POSITION
FROM Metadata.SourceField f
WHERE NOT EXISTS (
		SELECT COLUMN_NAME
		FROM Metadata.TableKeyDefinition pkd
		WHERE KeyType = 'PK'
			AND f.TABLE_NAME = pkd.TableName
			AND f.COLUMN_NAME = pkd.COLUMN_NAME
		)

UNION

SELECT SourceTableCatalog AS TABLE_CATALOG
	,NULL AS TABLE_SCHEMA
	,applicableTable AS TABLE_NAME
	,DestinationTableCatalog AS DestinationTableCatalog
	,column_name + '=?' AS UpdateCols
	,2 AS ordNo
	,ORDINAL_POSITION
FROM [Metadata].[DestinationFieldExtended]
WHERE SSISColumnSpecification IS NOT NULL
	AND SetFieldOnUpdate = 1
	AND COLUMN_NAME != 'SysExecutionLog_key'
GO
PRINT N'Creating [ssis].[HashColumn]...';


GO

-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE VIEW [ssis].[HashColumn]
AS
SELECT SourceServer
	,TABLE_CATALOG
	,TABLE_SCHEMA
	,TABLE_NAME
	,
	-- Destination columns should be used when view is applied for DW and DM layer
	DestinationTableCatalog
	,DestinationSchemaName
	,DestinationTableName
	,'CONVERT(VARCHAR(40), HASHBYTES(''SHA1'',' + ColsForHashInput + '))' AS CheckSumNonPK
FROM (
	SELECT DISTINCT dt.SourceServer
		,sf.TABLE_CATALOG
		,sf.TABLE_SCHEMA
		,sf.TABLE_NAME
		,sf.DestinationTableCatalog
		,dt.DestinationSchemaName
		,dt.DestinationTableName
		,stuff((
				SELECT CASE 
						WHEN COLUMN_NAME LIKE '%_bkey'
							-- Foreign Key. Set value to '-1'
							THEN '+IsNull(CAST(' + column_name + ' as nvarchar(max)), ''-1'')'
								-- Set value to empty string
						ELSE '+IsNull(CAST(' + column_name + ' as nvarchar(max)), '''')'
						END
				FROM Metadata.SourceField x
				WHERE x.TABLE_CATALOG = sf.table_catalog
					AND x.TABLE_SCHEMA = sf.table_schema
					AND x.table_name = sf.table_name
					AND x.DestinationTableCatalog = sf.DestinationTableCatalog
					AND x.COLUMN_NAME NOT IN (
						'HistoryRecId'
						,'SourceSystemKey'
						)
					-- Primary key should always be excluded from the Hash
					AND x.COLUMN_NAME NOT IN (
						SELECT kc.Column_Name
						FROM ssis.LookupDimensionKeyColumns kc
						WHERE kc.DimensionCatalogName = dt.DestinationTableCatalog
							AND kc.DimensionSchemaName = dt.DestinationSchemaName
							AND kc.DimensionName = dt.DestinationTableName
						)
					-- SysSrcGenerationDateTime shouldn´t be included in the HASH either
					AND x.COLUMN_NAME NOT IN ('SysSrcGenerationDateTime')
				ORDER BY ordinal_position
				FOR XML path('')
				), 1, 1, '') ColsForHashInput
	FROM Metadata.SourceField sf
	JOIN Metadata.DestinationTable dt ON sf.TABLE_CATALOG = dt.SourceTableCatalog
		AND sf.TABLE_SCHEMA = dt.SourceSchemaName
		AND sf.TABLE_NAME = dt.SourceTableName
	) HashInput
GO
PRINT N'Creating [ssis].[GetDerivedColumnDynamicOverrideValue]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
--		Function used by ssis.GetDerivedColumn when a dynamic value is applied
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetDerivedColumnDynamicOverrideValue] (
	@SOURCE_CATALOG VARCHAR(max)
	,@DESTINATION_TABLE_CATALOG VARCHAR(max)
	,@DESTINATION_TABLE_NAME VARCHAR(max)
	,@DerivedColumnOverrideID INT
	)
RETURNS VARCHAR(max)
AS
BEGIN
	DECLARE @DynamicValue VARCHAR(max) = ''
		,@DerivedColumnType VARCHAR(50)
		,@DerivedColumnName NVARCHAR(255)

	SELECT @DerivedColumnType = [DerivedColumnType]
		,@DerivedColumnName = [DerivedColumnName]
	FROM [Metadata].[DerivedColumnOverride]
	WHERE Id = @DerivedColumnOverrideID

	IF @DerivedColumnType = 'dwError'
		AND @DerivedColumnName = 'SourceTableName'
	BEGIN
		SELECT @DynamicValue = CONCAT (
				'"'
				,SourceTableName
				,'"'
				)
		FROM Metadata.DestinationTable
		WHERE DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
			AND SourceTableCatalog = @SOURCE_CATALOG
			AND DestinationTableName = @DESTINATION_TABLE_NAME
	END

	IF @DerivedColumnType = 'dwError'
		AND @DerivedColumnName = 'RowData'
	BEGIN
		SELECT @DynamicValue = CONCAT (
				'"'
				,(
					SELECT ldic.ColumnName AS 'Name'
						,CONCAT (
							'"+(DT_WSTR,150)REPLACENULL('
							,ldic.ColumnName
							,', "NULL")+"'
							) AS 'Value'
					FROM [ssis].[LookupDimensionInputColumns] ldic
					WHERE tableCatalog = @DESTINATION_TABLE_CATALOG
						/* Jukka de-activated 2016-05-02
				and SchemaName = 'Avega' -- TODO !! Add SchemaName
				*/
						AND TableName = @DESTINATION_TABLE_NAME
					FOR XML path('Column')
						,root('Row')
					)
				,'"'
				)
	END

	RETURN @DynamicValue
END
GO
PRINT N'Creating [ssis].[GetDimLookupInputColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
--		Xml format <Column SourceColumn="column_name" TargetColumn="column_name"></Column>
--		Return all native key columns that where not derived from Extended Fields in previous load step
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetDimLookupInputColumns] (
	@DIMENSION_SCHEMA_NAME VARCHAR(max)
	,@DIMENSION_TABLE_NAME VARCHAR(max)
	)
RETURNS XML
AS
BEGIN
	DECLARE @DerivedColumns XML

	SELECT @DerivedColumns = (
			SELECT ColumnName AS '@SourceColumn'
				,ColumnName AS '@TargetColumn'
			FROM ssis.LookupDimensionInputColumns
			WHERE SchemaName = @DIMENSION_SCHEMA_NAME
				AND TableName = @DIMENSION_TABLE_NAME
			ORDER BY KeyColumnOrder
			FOR XML path('Column')
			)

	RETURN @DerivedColumns
END
GO
PRINT N'Creating [ssis].[GetMultiCastOutputColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	 
--		Returns the BIML code to handle outputpaths for 
--		foreign key constraints in the SSIS multicast component.
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetMultiCastOutputColumns] (
	@DESTINATION_TABLE_CATALOG VARCHAR(max)
	,@DESTINATION_TABLE_SCHEMA VARCHAR(max)
	,@DESTINATION_TABLE_NAME VARCHAR(max)
	,@MultiCastType VARCHAR(50)
	)
RETURNS XML
AS
BEGIN
	DECLARE @OutputPaths XML

	IF @MultiCastType = 'dwInfFK'
	BEGIN
		SELECT @OutputPaths = (
				SELECT fkc.ForeignKeyColumn AS '@Name'
				FROM ssis.DimensionForeignKeyColumns fkc
				WHERE fkc.DimensionTableCatalog = @DESTINATION_TABLE_CATALOG
					AND fkc.DimensionSchemaName = @DESTINATION_TABLE_SCHEMA
					AND fkc.DimensionTableName = @DESTINATION_TABLE_NAME
				ORDER BY ForeignKeyColumn
				FOR XML path('OutputPath')
				)
	END

	RETURN @OutputPaths
END
GO
PRINT N'Creating [ssis].[GetSqlTaskMergeDiffColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetSqlTaskMergeDiffColumns] (
	@SOURCE_CATALOG VARCHAR(max)
	,@SOURCE_SCHEMA_NAME VARCHAR(max)
	,@SOURCE_TABLE_NAME VARCHAR(max)
	,@DESTINATION_TABLE_CATALOG VARCHAR(max)
	)
RETURNS VARCHAR(max)
AS
BEGIN
	DECLARE @DiffColumns VARCHAR(max)

	SELECT @DiffColumns = (
			SELECT stuff((
						SELECT ' OR ' + DiffCols
						FROM ssis.SQLTaskMergeDiffColumns x
						WHERE IsNull(Table_Catalog, @SOURCE_CATALOG) = @SOURCE_CATALOG
							AND DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
							AND isnull(Table_Name, @SOURCE_TABLE_NAME) = @SOURCE_TABLE_NAME
							AND isnull(table_Schema, @SOURCE_SCHEMA_NAME) = @SOURCE_SCHEMA_NAME
						FOR XML path('')
						), 1, 3, '') DiffCols
			)

	RETURN @DiffColumns
END
GO
PRINT N'Creating [ssis].[GetSqlTaskMergeInsertValueColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetSqlTaskMergeInsertValueColumns] (
	@SOURCE_CATALOG VARCHAR(max) --= 'DW'
	,@SOURCE_SCHEMA_NAME VARCHAR(max) -- = 'DM'
	,@SOURCE_TABLE_NAME VARCHAR(max) --= 'dStoreV'
	,@DESTINATION_TABLE_CATALOG VARCHAR(max) -- = 'DM'
	,@USAGE_TYPE VARCHAR(50)
	)
RETURNS VARCHAR(max)
AS
BEGIN
	DECLARE @InsertValueColumns VARCHAR(max)

	IF @USAGE_TYPE = 'Insert'
	BEGIN
		SELECT @InsertValueColumns = (
				SELECT stuff((
							SELECT ', ' + insert_column
							FROM [ssis].[SQLTaskMergeInsertValueColumns]
							WHERE isnull(Table_Catalog, @SOURCE_CATALOG) = @SOURCE_CATALOG
								AND isnull(table_schema, @SOURCE_SCHEMA_NAME) = @SOURCE_SCHEMA_NAME
								AND DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
								AND isnull(Table_Name, @SOURCE_TABLE_NAME) = @SOURCE_TABLE_NAME
							ORDER BY ordno
								,Ordinal_position
							FOR XML PATH('')
							), 1, 1, '') InsertColumns
				)
	END

	IF @USAGE_TYPE = 'Value'
	BEGIN
		SELECT @InsertValueColumns = (
				SELECT stuff((
							SELECT ', ' + Value_Column
							FROM [ssis].[SQLTaskMergeInsertValueColumns]
							WHERE isnull(Table_Catalog, @SOURCE_CATALOG) = @SOURCE_CATALOG
								AND isnull(table_schema, @SOURCE_SCHEMA_NAME) = @SOURCE_SCHEMA_NAME
								AND DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
								AND isnull(Table_Name, @SOURCE_TABLE_NAME) = @SOURCE_TABLE_NAME
							ORDER BY ordno
								,Ordinal_position
							FOR XML PATH('')
							), 1, 1, '') InsertColumns
				)
	END

	RETURN @InsertValueColumns
END
GO
PRINT N'Creating [ssis].[GetSqlTaskMergeUpdateColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetSqlTaskMergeUpdateColumns] (
	@SOURCE_CATALOG VARCHAR(max)
	,@SOURCE_SCHEMA_NAME VARCHAR(max)
	,@SOURCE_TABLE_NAME VARCHAR(max)
	,@DESTINATION_TABLE_CATALOG VARCHAR(max)
	)
RETURNS VARCHAR(max)
AS
BEGIN
	DECLARE @UpdateColumns VARCHAR(max)

	SELECT @UpdateColumns = (
			SELECT stuff((
						SELECT ',' + UpdateCols
						FROM ssis.SQLTaskMergeUpdateColumns
						WHERE IsNull(Table_Catalog, @SOURCE_CATALOG) = @SOURCE_CATALOG
							AND DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
							AND isnull(Table_Name, @SOURCE_TABLE_NAME) = @SOURCE_TABLE_NAME
							AND isnull(table_Schema, @SOURCE_SCHEMA_NAME) = @SOURCE_SCHEMA_NAME
						ORDER BY OrdNo
							,Ordinal_position
						FOR XML path('')
						), 1, 1, '') UpdCols
			)

	RETURN @UpdateColumns
END
GO
PRINT N'Creating [ssis].[GetUnionErrorInputColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
--		Return all native key columns that where not derived from Extended Fields in previous load step
--		Xml format <Column IsUsed="false" SourceColumn="myCol" TargetColumn="myCol"></Column>
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetUnionErrorInputColumns] (
	@SOURCE_TABLE_CATALOG VARCHAR(max)
	,@DESTINATION_TABLE_CATALOG VARCHAR(max)
	,@DESTINATION_SCHEMA_NAME VARCHAR(max)
	,@DESTINATION_TABLE_NAME VARCHAR(max)
	,@USAGE_TYPE VARCHAR(50)
	)
RETURNS XML
AS
BEGIN
	DECLARE @ExtendedCols AS TABLE (
		column_name VARCHAR(128)
		,ordinal_position INT
		,r TINYINT
		,UsageType VARCHAR(50)
		)

	INSERT INTO @ExtendedCols
	VALUES (
		'CheckSumNonPK'
		,1
		,2
		,'dwDim'
		)
		,(
		'OldCheckSumNonPK'
		,2
		,2
		,'dwDim'
		)

	DECLARE @DerivedColumns XML

	SELECT @DerivedColumns = (
			SELECT 'false' AS '@IsUsed'
				,column_name AS '@SourceColumn'
				,column_name AS '@TargetColumn'
			FROM (
				SELECT COLUMN_NAME
					,ORDINAL_POSITION
					,1 AS r
				FROM [Metadata].[DestinationTableSourceField] dtsf
				WHERE [DestinationTableCatalog] = @DESTINATION_TABLE_CATALOG
					AND [DestinationSchemaName] = @DESTINATION_SCHEMA_NAME
					AND [DestinationTableName] = @DESTINATION_TABLE_NAME
					-- Exclude primay keys and column_names generated by extended fields in prev stage
					AND NOT EXISTS (
						SELECT COLUMN_NAME
						FROM Metadata.TableKeyDefinition
						WHERE TableCatalog = @DESTINATION_TABLE_CATALOG
							AND TableName = @DESTINATION_TABLE_NAME
							AND column_name = dtsf.column_name
							AND KeyType = 'PK'
						
						EXCEPT
						
						SELECT [COLUMN_NAME]
						FROM [Metadata].[DestinationFieldExtended]
						WHERE DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
							AND SourceTableCatalog = @SOURCE_TABLE_CATALOG
							AND IsNull(ApplicableTable, @DESTINATION_TABLE_NAME) = @DESTINATION_TABLE_NAME
						)
					AND (
						(
							column_name != 'HistoryRecId'
							AND @USAGE_TYPE = 'dwDim'
							)
						)
				
				UNION
				
				SELECT column_name
					,ordinal_position
					,r
				FROM @ExtendedCols
				WHERE UsageType = @USAGE_TYPE
				) Cols
			ORDER BY r
				,ORDINAL_POSITION
			FOR XML path('Column')
			)

	RETURN @DerivedColumns
END
GO
PRINT N'Creating [ssis].[GetAggregateTransformationOutputColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
--		Returns xml for Aggregate Transformation OutputPath columns
--		Format <Column Operation="GroupBy" SourceColumn=".." TargetColumn=".." IsUsed="true"></Column>
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetAggregateTransformationOutputColumns] (
	@DESTINATION_TABLE_CATALOG VARCHAR(max)
	,@DESTINATION_TABLE_SCHEMA VARCHAR(max)
	,@DESTINATION_TABLE_NAME VARCHAR(max)
	,@INCLUDE_COLUMNS VARCHAR(max)
	,-- todo: comma separated input. splitStringToTable and create internal table parameter
	@OperationType VARCHAR(50)
	)
RETURNS XML
AS
BEGIN
	DECLARE @OutputColumns XML

	SELECT @OutputColumns = (
			SELECT @OperationType AS '@Operation'
				,Column_Name AS '@SourceColumn'
				,OutPutColumnName AS '@TargetColumn'
				,'true' AS '@IsUsed'
			FROM (
				SELECT @INCLUDE_COLUMNS AS Column_Name
					, 1 AS ordinalNo
					, left(@INCLUDE_COLUMNS, charindex('_', @INCLUDE_COLUMNS, 1)-1) + '_bkey' as OutPutColumnName
				UNION
				
				SELECT dc.Column_Name
					,	2 AS ordinalNo
					, dc.Column_Name as OutPutColumnName
				FROM ssis.DerivedColumns dc
				WHERE (
						dc.Column_Name IN (
							/*'SysSrcGenerationDateTime'
							,'ToDate'
							,*/'SysIsInferred'
							,'SysExecutionLog_key'
							--,'DatetimeInsertedUTC'
							--,'ModifiedUTC'
							)
						AND @OperationType = 'GroupBy'
						)
					AND dc.DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
					AND isnull(dc.DestinationTableName, @DESTINATION_TABLE_NAME) = @DESTINATION_TABLE_NAME
				) Cols
			ORDER BY ordinalNo
				,Column_Name
			FOR XML path('Column')
			)

	RETURN @OutputColumns
END
GO
PRINT N'Creating [ssis].[GetDerivedColumns]...';


GO

-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
--		Table [Metadata].[DerivedColumnOverride] contains Extended fields values that needs
--		other than default in a specific type of Derived Column.
--		Further there are derived columns that do not exist as Extended fields for a given db-catalog
--		that needs to be populated when missing members needs to be inserted in FK related tables
-- Example:	
--
--
-- =============================================

CREATE FUNCTION [ssis].[GetDerivedColumns] (
	@SOURCE_CATALOG VARCHAR(max)
	,@DESTINATION_TABLE_CATALOG VARCHAR(max)
	,@DESTINATION_TABLE_NAME VARCHAR(max)
	,@DESTINATION_SCHEMA_NAME VARCHAR(max)
	,@DeriveType VARCHAR(10)
	)
RETURNS XML
AS
BEGIN
	DECLARE @DerivedColumns XML

	SELECT @DerivedColumns = (
			SELECT isnull(DerCols.Column_Name, dco.[DerivedColumnName]) AS 'Column/@Name'
				,isnull(DerCols.Data_Type, dco.DataType) AS 'Column/@DataType'
				,
				-- default should be false
				isnull(dco.ReplaceExisting, DerCols.ReplaceExisting) AS 'Column/@ReplaceExisting'
				,isnull(DerCols.ColMaxLength, dco.ColMaxLength) AS 'Column/@Length'
				,CASE @DeriveType
					WHEN 'dwInfFK'
						-- if inferred member to foreign tables, apply missing member
						THEN isnull(dco.OverrideValue, DerCols.ColMissingMember)
							-- use default values
					ELSE isnull(dco.OverrideValue, DerCols.Col)
					END AS 'Column'
			FROM (
				SELECT column_name
					,ColMissingMember
					,data_type
					,isnull(dc.ColMaxLength, - 1) AS ColMaxLength
					,replaceExisting
					,col
				FROM [ssis].[DerivedColumns] dc
				WHERE IsNull(SourceTableCatalog, @SOURCE_CATALOG) = @SOURCE_CATALOG
					AND DestinationTableCatalog = @DESTINATION_TABLE_CATALOG	
					
					AND (CASE WHEN dc.DestinationSchemaName = '-' THEN @DESTINATION_SCHEMA_NAME ELSE dc.DestinationSchemaName END) = @DESTINATION_SCHEMA_NAME			
						
					AND isnull(DestinationTableName, @DESTINATION_TABLE_NAME) = @DESTINATION_TABLE_NAME
					AND (
						-- Add new row when new DeriveType
						(
							setFieldOnInsert = 1
							AND @DeriveType = 'ins'
							)
						OR (
							setFieldOnUpdate = 1
							AND @DeriveType = 'upd'
							)
						OR (
							setFieldOnDelete = 1
							AND @DeriveType = 'del'
							)
						OR (
							(
								/*column_name LIKE '%_bkey'
								OR */column_name IN (
									'SysExecutionLog_key'
									,'SysDatetimeInsertedUTC'
									,'SysModifiedUTC'
									,'SysDateTimeDeletedUTC'
									)
								)
							AND @DeriveType = 'dwInit'
							)
						OR (
							(column_name IN (
								'SysIsInferred'
								--,'SysSrcGenerationDateTime'
								) OR (column_name LIKE '%_bkey' AND column_name <> REPLACE(dc.DestinationTableName, 'n_', '') + '_bkey'))
							AND @DeriveType = 'dwInf'
							)
						OR (
							(
								column_name LIKE '%_bkey'
								AND stuff(@DESTINATION_TABLE_NAME, 1, 2, '') != replace(column_name, '_bkey', '')
								)
							AND @DeriveType = 'dwInfFK'
							)
						OR (
							column_name IN (
								'SysIsInferred'
								--,'SysSrcGenerationDateTime'
								)
							AND @DeriveType = 'dwNewRow'
							)
						OR (
							column_name IN (
								'SysIsInferred'
								--,'SysSrcGenerationDateTime'
								)
							AND @DeriveType = 'dwNewVer'
							)
						)
				) DerCols
			FULL OUTER JOIN (
				SELECT DerivedColumnName
					,dtt.Biml AS DataType
					,isnull(dco.[MaxLength], - 1) AS ColMaxLength
					,CASE OverrideValue
						WHEN '<<DynamicValue>>'
							THEN ssis.GetDerivedColumnDynamicOverrideValue(@SOURCE_CATALOG, @DESTINATION_TABLE_CATALOG, @DESTINATION_TABLE_NAME, dco.Id)
						ELSE OverrideValue
						END AS OverrideValue
					,'false' AS ReplaceExisting
				FROM Metadata.DerivedColumnOverride dco
				LEFT JOIN Metadata.DataTypeTranslation dtt ON dco.DataType = dtt.SQLServer
				WHERE dco.DerivedColumnType = @DeriveType
				) dco ON dco.DerivedColumnName = DerCols.Column_name
			ORDER BY isnull(DerCols.Column_Name, dco.[DerivedColumnName])
			FOR XML path('')
			)

	-- Remove attribute Length where value = -1
	SET @DerivedColumns.modify('delete /Column/@Length[. = "-1"]')

	-- Set ReplaceExisting to false if DeriveType is missing member foreign tables
	IF @DeriveType = 'dwInfFK'
	BEGIN
		DECLARE @T TABLE (Col XML)

		INSERT INTO @T
		SELECT a.query('.')
		FROM @DerivedColumns.nodes('Column') Col(a)

		UPDATE @T
		SET Col.modify('replace value of (/Column/@ReplaceExisting)[1] with "false"')

		SET @DerivedColumns = (
				SELECT Col AS [*]
				FROM @T
				FOR XML path('')
				)
	END

	RETURN @DerivedColumns
END
GO
PRINT N'Creating [ssis].[GetOleDbCommandParameters]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
--		Returns xml for OleDb Command in Data FLow
--		<Parameter SourceColumn="customer_code" TargetColumn="Param_0" Direction="Input"/>
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetOleDbCommandParameters] (
	@SOURCE_CATALOG VARCHAR(max)
	,@DESTINATION_TABLE_CATALOG VARCHAR(max)
	,@DESTINATION_TABLE_SCHEMA VARCHAR(max)
	,@DESTINATION_TABLE_NAME VARCHAR(max)
	,@UsageType VARCHAR(50)
	)
RETURNS XML
AS
BEGIN
	DECLARE @Parameters XML
	DECLARE @ExtendedParameters AS TABLE (
		column_name VARCHAR(128)
		,ordinal_position INT
		,r TINYINT
		,UsageType VARCHAR(50)
		)

	INSERT INTO @ExtendedParameters
	VALUES (
		'ToDateOld'
		,1
		,2
		,'dwTodate'
		)
		,(
		'SysExecutionLog_key'
		,2
		,2
		,'All'
		)

	SELECT @Parameters = (
			SELECT column_name AS '@SourceColumn'
				,CONCAT (
					'Param_'
					,Cast(ROW_NUMBER() OVER (
							ORDER BY r
								,ordinal_position
							) - 1 AS VARCHAR(10))
					) AS '@TargetColumn'
				,'Input' AS '@Direction'
			FROM (
				SELECT column_name
					,ordinal_position
					,1 AS r
				FROM ssis.UpdatableColumns
				WHERE DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
					AND DestinationSchemaName = @DESTINATION_TABLE_SCHEMA
					AND DestinationTableName = @DESTINATION_TABLE_NAME
					AND @UsageType != 'dwTodate'
				
				UNION
				
				SELECT column_name
					,ordinal_position
					,r
				FROM @ExtendedParameters ep
				WHERE UsageType = @UsageType
					OR UsageType = 'All'
				
				UNION
				
				-- get the one identity column. It is derived from DestinationFieldExtended table.
				SELECT column_name
					,1 AS ORDINAL_POSITION
					,3 AS r
				FROM [Metadata].[DestinationFieldExtended]
				WHERE DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
					AND SourceTableCatalog = @SOURCE_CATALOG
					AND ApplicableTable = @DESTINATION_TABLE_NAME
					AND IsIdentity = 1
				) ParamSource
			ORDER BY r
				,ordinal_position
			FOR XML path('Parameter')
			)

	RETURN @Parameters
END
GO
PRINT N'Creating [ssis].[GetOleDbCommandUpdateColumns]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
--		Returns xml for OleDb Command in Data FLow
--		<Parameter SourceColumn="customer_code" TargetColumn="Param_0" Direction="Input"/>
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetOleDbCommandUpdateColumns] (
	@SOURCE_CATALOG VARCHAR(max)
	,@DESTINATION_TABLE_CATALOG VARCHAR(max)
	,@DESTINATION_TABLE_SCHEMA VARCHAR(max)
	,@DESTINATION_TABLE_NAME VARCHAR(max)
	,@UsageType VARCHAR(50)
	)
RETURNS VARCHAR(max)
AS
BEGIN
	DECLARE @UpdateCols VARCHAR(max)
	-- columns generated by ETL flow
	DECLARE @AdditionalColumns AS TABLE (
		column_name VARCHAR(128)
		,ordinal_position INT
		,r TINYINT
		,UsageType VARCHAR(50)
		)

	--insert into @AdditionalColumns values ('ToDate',1,3,'dwTodate')
	SELECT @UpdateCols = (
			SELECT stuff((
						SELECT ',' + col
						FROM (
							SELECT CONCAT (
									quotename(column_name)
									,' = ? '
									) col
								,ordinal_position
								,1 AS r
							FROM ssis.UpdatableColumns
							WHERE DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
								AND DestinationSchemaName = @DESTINATION_TABLE_SCHEMA
								AND DestinationTableName = @DESTINATION_TABLE_NAME
								AND @UsageType != 'dwToDate'
							
							UNION
							
							SELECT DISTINCT CONCAT (
									quotename(column_name)
									,CASE column_name
										WHEN 'SysDateTimeUpdatedUTC'
											THEN ' = GETUTCDATE()'
										WHEN 'SysModifiedUTC'
											THEN ' = GETUTCDATE()'
										WHEN 'SysIsInferred'
											THEN ' = 0'
										ELSE ' = ? '
										END
									) col
								,ordinal_position
								,2 AS r
							FROM Metadata.DestinationFieldExtended
							WHERE DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
								AND column_name IN (
									'SysExecutionLog_key'
									,'SysDateTimeUpdatedUTC'
									,'SysModifiedUTC'
									)
								OR (
									column_name = 'SysIsInferred'
									AND @UsageType = 'dwInfUpd'
									)
								OR (
									column_name = 'ToDate'
									AND @UsageType = 'dwToDate'
									)
							-- get columns generated by ETL flow
							
							UNION
							
							SELECT CONCAT (
									quotename(column_name)
									,' = ? '
									) col
								,ordinal_position
								,r
							FROM @AdditionalColumns ac
							WHERE ac.UsageType = @UsageType
							) ColumnSource
						ORDER BY r
							,ordinal_position
						FOR XML path('')
						), 1, 1, ' ')
			)

	RETURN @UpdateCols
END
GO
PRINT N'Creating [ssis].[GetDimLookupSelectQuery]...';


GO

-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
--		Returns the select query, for the lookup component, for the current lookup
--		table.
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetDimLookupSelectQuery] (
	@DIMENSION_TABLE_CATALOG VARCHAR(50)
	,@DIMENSION_SCHEMA_NAME VARCHAR(50)
	,@DIMENSION_TABLE_NAME VARCHAR(50)
	,@INCLUDE_HASH BIT = 0
	)
RETURNS VARCHAR(max)
AS
BEGIN
	DECLARE @SelectQuery VARCHAR(max)
	DECLARE @T TABLE (
		DimensionCatalogName VARCHAR(max)
		,DimensionSchemaName VARCHAR(max)
		,DimensionName VARCHAR(max)
		,ColumnList VARCHAR(max)
		)

	INSERT INTO @T (
		DimensionCatalogName
		,DimensionSchemaName
		,DimensionName
		,ColumnList
		)
	SELECT DimensionCatalogName
		,DimensionSchemaName
		,DimensionName
		,cols
	FROM (
		SELECT DISTINCT DimensionCatalogName
			,DimensionSchemaName
			,DimensionName
			,stuff((
					SELECT ', ' + QUOTENAME(COLUMN_NAME)
					FROM ssis.LookupDimensionKeyColumns
					WHERE DimensionCatalogName = ldkc.DimensionCatalogName
						AND isnull(DimensionSchemaName, ldkc.DimensionSchemaName) = ldkc.DimensionSchemaName
						AND isnull(DimensionName, ldkc.DimensionName) = ldkc.DimensionName
					ORDER BY Ordinal_Position
					FOR XML path('')
					), 1, 1, ' ') cols
		FROM ssis.LookupDimensionKeyColumns ldkc
		WHERE DimensionCatalogName = @DIMENSION_TABLE_CATALOG
			AND isnull(DimensionSchemaName, @DIMENSION_SCHEMA_NAME) = @DIMENSION_SCHEMA_NAME
			AND isnull(DimensionName, @DIMENSION_TABLE_NAME) = @DIMENSION_TABLE_NAME
		) cols
	WHERE NOT cols IS NULL

	IF @INCLUDE_HASH = 1
	BEGIN
		SELECT @SelectQuery = (
				SELECT
					--	'Select top 1 ' + t.ColumnList + ', ' + hc.[CheckSumNonPK] + ' as [CheckSumNonPK]  from ['+@DIMENSION_SCHEMA_NAME+'].['+@DIMENSION_TABLE_NAME+'] ORDER BY FromDate DESC'  as Source_Query
					'Select ' + t.ColumnList + ', ' + hc.[CheckSumNonPK] + ' as [CheckSumNonPK]  
					from [' + @DIMENSION_SCHEMA_NAME + '].[' + @DIMENSION_TABLE_NAME + '] n
						cross apply (select top 1 SysValidFromDateTime as SysValidFromDateTimeLatest  
									from [' + @DIMENSION_SCHEMA_NAME + '].[' + @DIMENSION_TABLE_NAME + '] n2
									where n2.[' + substring(@DIMENSION_TABLE_NAME, 3, 100) + '_bkey] = n.[' + substring(@DIMENSION_TABLE_NAME, 3, 100) +'_bkey]
									order by SysValidFromDateTime DESC) n2
					where n.[SysValidFromDateTime] = n2.[SysValidFromDateTimeLatest]
					' AS Source_Query
				FROM @T t
				JOIN [ssis].[HashColumn] hc ON hc.DestinationTableCatalog = t.DimensionCatalogName
					AND hc.DestinationSchemaName = t.DimensionSchemaName
					AND hc.DestinationTableName = t.DimensionName
				)
	END

	IF @INCLUDE_HASH = 0
	BEGIN
		SELECT @SelectQuery = (
				SELECT
					--	'Select top 1 ' + t.ColumnList + ' from ['+@DIMENSION_SCHEMA_NAME+'].['+@DIMENSION_TABLE_NAME+'] ORDER BY FromDate DESC'  as Source_Query
					'Select ' + t.ColumnList + ' from [' + @DIMENSION_SCHEMA_NAME + '].[' + @DIMENSION_TABLE_NAME + '] ORDER BY SysValidFromDateTime DESC' AS Source_Query
				FROM @T t
				)
	END

	RETURN @SelectQuery
END
GO
PRINT N'Creating [ssis].[GetSourceSelectQuery]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
--		Returns the select query that the source component
--		will use against the source.
-- Example:	
--
--
-- =============================================
CREATE FUNCTION [ssis].[GetSourceSelectQuery] (
	@SOURCE_SERVER VARCHAR(50)
	,@SOURCE_CATALOG VARCHAR(50)
	,@SOURCE_SCHEMA_NAME VARCHAR(50)
	,@SOURCE_TABLE_NAME VARCHAR(50)
	,@DESTINATION_TABLE_CATALOG VARCHAR(50)
	,@INCLUDE_HASH BIT = 0
	,@INCREMENTALLOAD BIT = 0
	)
RETURNS VARCHAR(max)
AS
BEGIN
	DECLARE @SelectQuery VARCHAR(max)

	IF @INCLUDE_HASH = 1
	BEGIN
		SELECT @SelectQuery = (
				SELECT 'Select' + sf.cols + ', ' + hc.[CheckSumNonPK] + ' as [CheckSumNonPK]  from [' + @SOURCE_SCHEMA_NAME + '].[' + @SOURCE_TABLE_NAME + ']' + CASE 
						WHEN isnull(dt.SourceFilterCondition, '') != ''
							THEN ' Where ' + dt.SourceFilterCondition
						ELSE ''
						END Source_Query
				FROM (
					SELECT DISTINCT TABLE_SERVER
						,TABLE_CATALOG
						,TABLE_SCHEMA
						,TABLE_NAME
						,DestinationTableCatalog
						,stuff((
								SELECT ', ' + QUOTENAME(COLUMN_NAME) [text()]
								FROM Metadata.SourceField
								WHERE TABLE_CATALOG = f.TABLE_CATALOG
									AND TABLE_SCHEMA = f.TABLE_SCHEMA
									AND TABLE_NAME = f.TABLE_NAME
								ORDER BY ordinal_position
								FOR XML path('')
									,type
								).value('.', 'NVARCHAR(MAX)'), 1, 1, ' ') cols
					FROM Metadata.SourceField f
					) sf
				JOIN Metadata.DestinationTable dt ON isnull(sf.TABLE_SERVER, '') = isnull(dt.SourceServer, '')
					AND sf.TABLE_CATALOG = dt.SourceTableCatalog
					AND sf.TABLE_SCHEMA = dt.SourceSchemaName
					AND sf.TABLE_NAME = dt.SourceTableName
					AND sf.DestinationTableCatalog = dt.DestinationTableCatalog
				JOIN [ssis].[HashColumn] hc ON isnull(hc.SourceServer, '') = isnull(dt.SourceServer, '')
					AND hc.TABLE_CATALOG = dt.SourceTableCatalog
					AND hc.TABLE_SCHEMA = dt.SourceSchemaName
					AND hc.TABLE_NAME = dt.SourceTableName
					AND hc.DestinationTableCatalog = dt.DestinationTableCatalog
				WHERE (
						dt.SourceServer = @SOURCE_SERVER
						OR TABLE_SERVER IS NULL
						)
					AND dt.SourceTableCatalog = @SOURCE_CATALOG
					AND dt.SourceSchemaName = @SOURCE_SCHEMA_NAME
					AND dt.SourceTableName = @SOURCE_TABLE_NAME
					AND dt.DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
				)
	END

	IF @INCLUDE_HASH = 0
	BEGIN
		SELECT @SelectQuery = (
				SELECT 'Select' + sf.cols + ' from [' + @SOURCE_SCHEMA_NAME + '].[' + @SOURCE_TABLE_NAME + ']' + CASE 
						WHEN isnull(dt.SourceFilterCondition, '') != ''
							THEN ' Where ' + dt.SourceFilterCondition
						ELSE ''
						END Source_Query
				FROM (
					SELECT DISTINCT TABLE_SERVER
						,TABLE_CATALOG
						,TABLE_SCHEMA
						,TABLE_NAME
						,DestinationTableCatalog
						,stuff((
								SELECT ', ' + QUOTENAME(COLUMN_NAME) [text()]
								FROM Metadata.SourceField
								WHERE TABLE_CATALOG = f.TABLE_CATALOG
									AND TABLE_SCHEMA = f.TABLE_SCHEMA
									AND TABLE_NAME = f.TABLE_NAME
								ORDER BY ordinal_position
								FOR XML path('')
									,type
								).value('.', 'NVARCHAR(MAX)'), 1, 1, ' ') cols
					FROM Metadata.SourceField f
					) sf
				JOIN Metadata.DestinationTable dt ON isnull(sf.TABLE_SERVER, '') = isnull(dt.SourceServer, '')
					AND sf.TABLE_CATALOG = dt.SourceTableCatalog
					AND sf.TABLE_SCHEMA = dt.SourceSchemaName
					AND sf.TABLE_NAME = dt.SourceTableName
					AND sf.DestinationTableCatalog = dt.DestinationTableCatalog
				WHERE (
						dt.SourceServer = @SOURCE_SERVER
						OR TABLE_SERVER IS NULL
						)
					AND dt.SourceTableCatalog = @SOURCE_CATALOG
					AND dt.SourceSchemaName = @SOURCE_SCHEMA_NAME
					AND dt.SourceTableName = @SOURCE_TABLE_NAME
					AND dt.DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
				)
	END

	IF (@INCREMENTALLOAD = 1)
	BEGIN
		IF (@SelectQuery NOT LIKE '%Where%')
			SET @SelectQuery = @SelectQuery + CHAR(10) + 'WHERE SysModifiedUTC > cast(? as datetime2(0)) '
		ELSE
			SET @SelectQuery = @SelectQuery + CHAR(10) + '	and SysModifiedUTC > cast(? as datetime2(0)) '
	END

	RETURN @SelectQuery
END
GO
PRINT N'Creating [Maintenance].[RefreshIndexes]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	Reorganizes indexes and updates statistics
-- Example:	
/* 
		EXECUTE [DevelopmentFrameworkConfig].[Maintenance].[RefreshIndexes] @DestinationTableCatalog = 'DataWarehouse'
*/
--
--
-- =============================================
CREATE PROCEDURE [Maintenance].[RefreshIndexes] @DestinationTableCatalog NVARCHAR(128)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- SQL Server 2008 script to REBUILD all indexes for all tables 
	DECLARE @TableName VARCHAR(256)
	DECLARE @FILLFACTOR INT = 100
	DECLARE @DynamicSQL NVARCHAR(max) = 'DECLARE curAllTablesInDB CURSOR FOR SELECT TABLE_CATALOG + ''.'' + TABLE_SCHEMA + 
	 ''.'' + TABLE_NAME AS TABLENAME   
	 FROM ' + @DestinationTableCatalog + '.INFORMATION_SCHEMA.TABLES WHERE 
	 TABLE_TYPE = ''BASE TABLE''
	 ORDER BY 1'

	BEGIN
		EXEC sp_executeSQL @DynamicSQL -- create tables cursor

		OPEN curAllTablesInDB

		FETCH NEXT
		FROM curAllTablesInDB
		INTO @TableName

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			SET @DynamicSQL = 'ALTER INDEX ALL ON ' + @TableName + ' REORGANIZE WITH ( LOB_COMPACTION = ON )'

			PRINT @DynamicSQL

			EXEC sp_executeSQL @DynamicSQL

			FETCH NEXT
			FROM curAllTablesInDB
			INTO @TableName
		END -- cursor WHILE

		CLOSE curAllTablesInDB

		DEALLOCATE curAllTablesInDB
	END

	-- Update statistics for optimal execution plans
	SET @DynamicSQL = 'execute ' + @DestinationTableCatalog + '.dbo.sp_updatestats'

	EXEC sp_executeSQL @DynamicSQL -- create tables cursor	
END
GO
PRINT N'Creating [Maintenance].[RefreshIndexesRebuild]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	Rebuilds indexes and updates statistics
-- Example:	
/* 
		EXECUTE [DevelopmentFrameworkConfig].[Maintenance].[RefreshIndexesRebuild] @DestinationTableCatalog = 'DataWarehouse'
*/
--
--
-- =============================================
CREATE PROCEDURE [Maintenance].[RefreshIndexesRebuild] @DestinationTableCatalog NVARCHAR(128)
	,@TableSchemaName NVARCHAR(128) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- SQL Server 2008 script to REBUILD all indexes for all tables 
	DECLARE @TableName VARCHAR(256)
	DECLARE @FILLFACTOR INT = 100
	DECLARE @DynamicSQL NVARCHAR(max) = 'DECLARE curAllTablesInDB CURSOR FOR SELECT TABLE_CATALOG + ''.'' + TABLE_SCHEMA + 
	 ''.'' + TABLE_NAME AS TABLENAME   
	 FROM ' + @DestinationTableCatalog + '.INFORMATION_SCHEMA.TABLES WHERE 
	 TABLE_TYPE = ''BASE TABLE''' + isnull(' and TABLE_SCHEMA = ''' + @TableSchemaName, ' ') + '''
	  ORDER BY 1'

	BEGIN
		EXEC sp_executeSQL @DynamicSQL -- create tables cursor

		OPEN curAllTablesInDB

		FETCH NEXT
		FROM curAllTablesInDB
		INTO @TableName

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			SET @DynamicSQL = 'ALTER INDEX ALL ON ' + @TableName + ' REBUILD PARTITION = ALL'

			PRINT @DynamicSQL

			EXEC sp_executeSQL @DynamicSQL

			FETCH NEXT
			FROM curAllTablesInDB
			INTO @TableName
		END -- cursor WHILE

		CLOSE curAllTablesInDB

		DEALLOCATE curAllTablesInDB
	END

	-- Update statistics for optimal execution plans
	SET @DynamicSQL = 'execute ' + @DestinationTableCatalog + '.dbo.sp_updatestats'

	EXEC sp_executeSQL @DynamicSQL -- create tables cursor	
END
GO
PRINT N'Creating [Metadata].[GetFieldDefaults_SP]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE PROCEDURE [Metadata].[GetFieldDefaults_SP] (
	@SourceTableCatalog SYSNAME
	,@SourceSchemaName SYSNAME
	,@SourceTableName SYSNAME
	,@DestinationTableCatalog SYSNAME
	,@DestinationSchemaName SYSNAME
	,@DestinationTableName SYSNAME
	)
AS
SELECT [COLUMN_NAME] AS ColumnName
	,CASE [DATA_TYPE]
		WHEN 'nvarchar'
			THEN 'String'
		WHEN 'varchar'
			THEN 'String'
		WHEN 'tinyint'
			THEN 'Byte'
		WHEN 'int'
			THEN 'Int32'
		WHEN 'bigint'
			THEN 'Int64'
		WHEN 'bit'
			THEN 'Boolean'
		WHEN 'smallint'
			THEN 'Int16'
		WHEN 'date'
			THEN 'DateTime'
		WHEN 'numeric'
			THEN 'Double'
		ELSE [DATA_TYPE]
		END AS DataType
	,[CHARACTER_MAXIMUM_LENGTH] AS CharLength
	,CASE 
		WHEN [DATA_TYPE] IN (
				'nvarchar'
				,'varchar'
				)
			THEN '-1'
		WHEN [DATA_TYPE] IN (
				'bigint'
				,'int'
				,'numeric'
				,'smallint'
				)
			THEN '-1'
		WHEN [DATA_TYPE] = 'bit'
			THEN 'False'
		WHEN [DATA_TYPE] LIKE 'date%'
			THEN '1900-01-01'
		END AS DefaultValue
FROM Metadata.DestinationTable dt
JOIN [Metadata].[SourceField] sf ON sf.TABLE_NAME = dt.SourceTableName
	AND sf.TABLE_SCHEMA = dt.SourceSchemaName
	AND sf.TABLE_CATALOG = dt.SourceTableCatalog
	AND sf.DestinationTableCatalog = dt.DestinationTableCatalog
WHERE dt.SourceTableCatalog = @SourceTableCatalog
	AND dt.SourceSchemaName = @SourceSchemaName
	AND dt.SourceTableName = @SourceTableName
	AND dt.DestinationTableCatalog = @DestinationTableCatalog
	AND dt.DestinationSchemaName = @DestinationSchemaName
	AND dt.DestinationTableName = @DestinationTableName
	AND NOT EXISTS (
		SELECT COLUMN_NAME
		FROM Metadata.TableKeyDefinition pkd
		WHERE KeyType = 'PK'
			AND pkd.TableCatalog = sf.DestinationTableCatalog
			AND pkd.SchemaName = dt.DestinationSchemaName
			AND pkd.TableName = dt.DestinationTableName
			AND pkd.COLUMN_NAME = sf.COLUMN_NAME
		)
	AND (
		IS_NULLABLE = 'NO'
		OR COLUMN_NAME = 'HistoryRecId'
		OR COLUMN_NAME LIKE '%_bkey'
		);
GO
PRINT N'Creating [Metadata].[CreateJob]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	Creates job to execute SSIS packages based on meta data
-- Example:	
/*	
		EXECUTE [DevelopmentFrameworkConfig].[Metadata].[CreateJob] 
				@DestinationTableCatalog = 'DataWarehouse'
				, @FilterBySchema1 = 'Navision'
				, @FilterBySchema2 = 'Navision'
				, @RunJobAsLastStep = 'NameOfJobToRun'
				, @server_name = 'LOCALHOST'	
	
*/
-- =============================================
CREATE PROCEDURE [Metadata].[CreateJob] @DestinationTableCatalog NVARCHAR(128)
	,@RunJobAsLastStep NVARCHAR(128) = NULL
	,@RunJobAsLastStep2 NVARCHAR(128) = NULL
	,@RunJobAsLastStep3 NVARCHAR(128) = NULL
	,@FilterBySchema1 NVARCHAR(20) = NULL
	,@FilterBySchema2 NVARCHAR(20) = NULL
	,@SSISPackagePath NVARCHAR(255) = 'C:\SSIS\SSISPackages\'
	,@server_name NVARCHAR(50) = 'localhost'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @SQLScript VARCHAR(max)
		,@SSISPackageName NVARCHAR(128)
		,@RowCounter INT = 0
		,@JobName NVARCHAR(128)
		,@on_success_action_var CHAR(1) = '3'

	SET @JobName = 'MainRunBIMLPackages_' + @DestinationTableCatalog + ISNULL('_' + @FilterBySchema1, '') + ISNULL('_' + @FilterBySchema2, '')
	SET @SQLScript = '
	USE [msdb]
	IF  EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = N''' + @JobName + ''')
	EXEC msdb.dbo.sp_delete_job @job_name=N''' + @JobName + ''', @delete_unused_schedule=1

	DECLARE @jobId BINARY(16)
	EXEC  msdb.dbo.sp_add_job @job_name=N''' + @JobName + ''', 
			@enabled=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=2, 
			@notify_level_netsend=2, 
			@notify_level_page=2, 
			@delete_level=0, 
			@category_name=N''[Uncategorized (Local)]'', 
			@owner_login_name=N''sa'', @job_id = @jobId OUTPUT
	select @jobId
	EXEC msdb.dbo.sp_add_jobserver @job_name=N''' + @JobName + ''', @server_name = N''' + @server_name + '''
	'

	DECLARE cTemp CURSOR
	FOR
	SELECT SSISPackageName
	FROM DevelopmentFrameworkConfig.Metadata.DestinationTable
	WHERE DestinationTableCatalog = @DestinationTableCatalog
		AND CreateTable = 1
		AND CreateSSISPackage = 1
		AND (
			DestinationSchemaName = ISNULL(@FilterBySchema1, DestinationSchemaName)
			OR DestinationSchemaName = ISNULL(@FilterBySchema2, DestinationSchemaName)
			)
	ORDER BY DestinationSchemaName
		,SSISPackageName

	OPEN cTemp

	FETCH NEXT
	FROM cTemp
	INTO @SSISPackageName

	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @RowCounter = @RowCounter + 1
		SET @SQLScript = @SQLScript + 'USE [msdb]
			EXEC msdb.dbo.sp_add_jobstep @job_name=N''' + @JobName + ''', @step_name=N''Run SSIS package ' + @SSISPackageName + ''', 
					@step_id=' + cast(@RowCounter AS VARCHAR(10)) + ', 
					@cmdexec_success_code=0, 
					@on_success_action=3, 
					@on_fail_action=3, 
					@retry_attempts=0, 
					@retry_interval=0, 
					@os_run_priority=0, @subsystem=N''SSIS'', 
					@command=N''/FILE "' + @SSISPackagePath + @SSISPackageName + '.dtsx" /CHECKPOINTING OFF /REPORTING E'', 
					@database_name=N''master'', 
					@flags=0
			'

		FETCH NEXT
		FROM cTemp
		INTO @SSISPackageName
	END

	CLOSE cTemp

	DEALLOCATE cTemp

	EXECUTE (@SQLScript)

	IF (@RunJobAsLastStep IS NOT NULL)
	BEGIN
		IF (@RunJobAsLastStep2 IS NULL)
			SET @on_success_action_var = '1'
		SET @SQLScript = 'USE [msdb]
				EXEC msdb.dbo.sp_add_jobstep @job_name=N''' + @JobName + ''', @step_name=N''Run jobb ' + @RunJobAsLastStep + ''', 
						@step_id=' + cast(@RowCounter + 1 AS VARCHAR(10)) + ', 
						@cmdexec_success_code=0, 
						@on_success_action=' + @on_success_action_var + ', 
						@on_success_step_id=0, 
						@on_fail_action=2, 
						@on_fail_step_id=0, 
						@retry_attempts=0, 
						@retry_interval=0, 
						@os_run_priority=0, @subsystem=N''TSQL'', 
						@command=N''EXECUTE msdb.dbo.sp_start_job @job_name = ''''' + @RunJobAsLastStep + ''''''', 
						@database_name=N''msdb'', 
						@flags=0
						'

		EXECUTE (@SQLScript)

		PRINT @SQLScript
	END

	IF (@RunJobAsLastStep2 IS NOT NULL)
	BEGIN
		IF (@RunJobAsLastStep3 IS NULL)
			SET @on_success_action_var = '1'
		SET @SQLScript = 'USE [msdb]
				EXEC msdb.dbo.sp_add_jobstep @job_name=N''' + @JobName + ''', @step_name=N''Run jobb ' + @RunJobAsLastStep2 + ''', 
						@step_id=' + cast(@RowCounter + 2 AS VARCHAR(10)) + ', 
						@cmdexec_success_code=0, 
						@on_success_action=' + @on_success_action_var + ', 
						@on_success_step_id=0, 
						@on_fail_action=2, 
						@on_fail_step_id=0, 
						@retry_attempts=0, 
						@retry_interval=0, 
						@os_run_priority=0, @subsystem=N''TSQL'', 
						@command=N''EXECUTE msdb.dbo.sp_start_job @job_name = ''''' + @RunJobAsLastStep2 + ''''''', 
						@database_name=N''msdb'', 
						@flags=0
						'

		EXECUTE (@SQLScript)

		PRINT @SQLScript
	END

	SET @SQLScript = 'USE [msdb]
	EXEC msdb.dbo.sp_update_job @job_name=N''' + @JobName + ''', 
			@enabled=1, 
			@start_step_id=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=2, 
			@notify_level_netsend=2, 
			@notify_level_page=2, 
			@delete_level=0, 
			@description=N'''', 
			@category_name=N''[Uncategorized (Local)]'', 
			@owner_login_name=N''sa'', 
			@notify_email_operator_name=N'''', 
			@notify_netsend_operator_name=N'''', 
			@notify_page_operator_name=N''''
	'

	EXECUTE (@SQLScript)
END
GO
PRINT N'Creating [Metadata].[CreateStoredProcedurePackage]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE PROCEDURE [Metadata].[CreateStoredProcedurePackage] @DestinationTableName NVARCHAR(128) = NULL
	,@DestinationTableCatalog NVARCHAR(128)
	,@DestinationSchemaName NVARCHAR(128)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Insert statements for procedure here
	DECLARE @TABLE_CATALOG NVARCHAR(128)
		,@TABLE_SCHEMA NVARCHAR(128)
		,@TABLE_NAME NVARCHAR(128)
		,@DestinationTableName2 NVARCHAR(128)
		,@StageSchemaName VARCHAR(128)
		,@StageTableName VARCHAR(128)
		,@StageTableCatalog VARCHAR(128)
		,@CreateStageTable BIT
		,@TABLE_SERVER NVARCHAR(128)
		,@SSISPackageName NVARCHAR(128)
		,@SSISPackageGUID NVARCHAR(128)
		,@CRLF NVARCHAR(10) = NCHAR(13)

	BEGIN TRANSACTION CreateTables

	-- Create SP Header
	BEGIN TRY
		DECLARE cTables CURSOR
		FOR
		SELECT SourceTableCatalog AS TABLE_CATALOG
			,SourceSchemaName AS TABLE_SCHEMA
			,SourceTableName AS TABLE_NAME
			,DestinationTableName AS RawTableName
			,DestinationSchemaName AS RawSchemaName
			,StageSchemaName
			,StageTableName
			,StageTableCatalog
			,CreateStageTable
			,SourceServer AS TABLE_SERVER
			,SSISPackageName
			,SSISPackageGUID
		FROM [Metadata].[DestinationTable]
		WHERE DestinationTableCatalog = @DestinationTableCatalog
			AND DestinationTableName = IsNull(@DestinationTableName, DestinationTableName)
			AND DestinationSchemaName = @DestinationSchemaName

		OPEN cTables

		FETCH NEXT
		FROM cTables
		INTO @TABLE_CATALOG
			,@TABLE_SCHEMA
			,@TABLE_NAME
			,@DestinationTableName2
			,@DestinationSchemaName
			,@StageSchemaName
			,@StageTableName
			,@StageTableCatalog
			,@CreateStageTable
			,@TABLE_SERVER
			,@SSISPackageName
			,@SSISPackageGUID

		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @UseAndExecStatment NVARCHAR(max)
				,@CreateProcedureStringHeader NVARCHAR(max)
				,@PackageVariableString NVARCHAR(max)
				,@CreateProcedureStringLogStart NVARCHAR(max)
				,@CreateProcedureStringLogic NVARCHAR(max)
				,@CreateProcedureStringLogEnd NVARCHAR(max)
				,@MergeStatement NVARCHAR(max)
				,@IndexMaintenanceStatement NVARCHAR(max)

			-- Create Header for procedure creating
			SET @CreateProcedureStringHeader = 'CREATE PROCEDURE [' + @DestinationSchemaName + '].[' + @SSISPackageName + '] AS ' + @CRLF
			SET @CreateProcedureStringHeader = @CreateProcedureStringHeader + 'BEGIN' + @CRLF
			SET @CreateProcedureStringHeader = @CreateProcedureStringHeader + '     SET NOCOUNT ON;' + @CRLF + @CRLF
			-- Create sql string for variable declaration
			SET @PackageVariableString = [Metadata].[GetPackageVariablesString]()
			-- Create sql string for getting SP meta data and Log the start of the ETL log
			SET @CreateProcedureStringLogStart = [Metadata].[GetLogStartPatternString](@SSISPackageName, @DestinationSchemaName, @SSISPackageGUID)
			-- Create sql string for the transportation of the data
			SET @MergeStatement = [Metadata].[GetSSASProcessingPatternString](@SSISPackageGUID)
			--                                                  set @MergeStatement = ''
			-- Create sql string for the index maintenance
			--                                                  set @IndexMaintenanceStatement = [Metadata].[GetIndexMaintenanceString](@DestinationTableCatalog, @DestinationSchemaName, @DestinationTableName2)
			SET @IndexMaintenanceStatement = ''
			-- Create sql string for the end of the ETL log
			SET @CreateProcedureStringLogEnd = [Metadata].[GetLogEndPatternString](@SSISPackageGUID)
			SET @UseAndExecStatment = N'USE [' + @DestinationTableCatalog + ']' + @CRLF
			SET @UseAndExecStatment = @UseAndExecStatment + 'IF EXISTS (SELECT o.* FROM sys.objects o inner join sys.schemas s on o.schema_id = s.schema_id WHERE o.type = ''P'' AND o.name = ''' + @SSISPackageName + ''' and s.name = ''' + @DestinationSchemaName + '''' + ')' + @CRLF
			SET @UseAndExecStatment = @UseAndExecStatment + '            DROP PROCEDURE [' + @DestinationSchemaName + '].[' + @SSISPackageName + ']' + @CRLF
			SET @UseAndExecStatment = @UseAndExecStatment + ' exec (@CreateProcedureStringHeader+@PackageVariableString+@CreateProcedureStringLogStart + @MergeStatement + @IndexMaintenanceStatement + @CreateProcedureStringLogEnd + '' END'')'

			EXEC sp_executesql @UseAndExecStatment
				,N'@CreateProcedureStringHeader nvarchar(max), @PackageVariableString nvarchar(max), @CreateProcedureStringLogStart nvarchar(max), @MergeStatement nvarchar(max), @IndexMaintenanceStatement nvarchar(max), @CreateProcedureStringLogEnd nvarchar(max)'
				,@CreateProcedureStringHeader = @CreateProcedureStringHeader
				,@PackageVariableString = @PackageVariableString
				,@CreateProcedureStringLogStart = @CreateProcedureStringLogStart
				,@MergeStatement = @MergeStatement
				,@IndexMaintenanceStatement = @IndexMaintenanceStatement
				,@CreateProcedureStringLogEnd = @CreateProcedureStringLogEnd

			FETCH NEXT
			FROM cTables
			INTO @TABLE_CATALOG
				,@TABLE_SCHEMA
				,@TABLE_NAME
				,@DestinationTableName2
				,@DestinationSchemaName
				,@StageSchemaName
				,@StageTableName
				,@StageTableCatalog
				,@CreateStageTable
				,@TABLE_SERVER
				,@SSISPackageName
				,@SSISPackageGUID
		END

		CLOSE cTables

		DEALLOCATE cTables

		COMMIT TRANSACTION CreateTables
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION CreateTables

		DECLARE @ErrorMessage VARCHAR(max) = ERROR_MESSAGE()

		RAISERROR (
				@ErrorMessage
				,16
				,1
				)

		CLOSE cTables

		DEALLOCATE cTables
	END CATCH
END
GO
PRINT N'Creating [Metadata].[CreateTable]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE procedure [Metadata].[CreateTable]
    @DestinationTableName nvarchar(128) = null ,
    @DestinationTableCatalog nvarchar(128) ,
    @DestinationSchemaName nvarchar(128)
as
    begin
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
        set nocount on;

	-- Insert statements for procedure here
        declare
            @TABLE_CATALOG nvarchar(128) ,
            @TABLE_SCHEMA nvarchar(128) ,
            @TABLE_NAME nvarchar(128) ,
            @DestinationTableName2 nvarchar(128)
		--, @DestinationSchemaName nvarchar(128)
            ,
            @CreateTableString varchar(max) ,
			@DropString varchar(max),
            @CreatePKString varchar(max) ,
            @PrimaryKeyString varchar(max) ,
            @IndexChecksumPrimaryKeyString varchar(max) ,
            @IndexChecksumAllNettoColumnsString varchar(max) ,
            @CreateIndexesForChecksumColumns bit ,
            @CreateTableInDatabase tinyint ,
            @CompressionType nvarchar(50) ,
            @CreateCheckSumColumns bit ,
            @StageSchemaName varchar(128) ,
            @StageTableName varchar(128) ,
            @StageTableCatalog varchar(128) ,
            @CreateStageTable bit ,
            @TABLE_SERVER nvarchar(128) ,
            @IsPartitioned bit ,
            @PartitionSchemeName nvarchar(128) ,
            @PartitionKeyColumnName nvarchar(128);


        begin transaction CreateTables;
        begin try
            declare cTables cursor
            for
                select
                    SourceTableCatalog as TABLE_CATALOG ,
                    SourceSchemaName as TABLE_SCHEMA ,
                    SourceTableName as TABLE_NAME ,
                    DestinationTableName as RawTableName ,
                    DestinationSchemaName as RawSchemaName ,
                    CreateChecksumIndexes ,
                    CreateTable ,
                    CreateChecksumColumns ,
                    CompressionType ,
                    StageSchemaName ,
                    StageTableName ,
                    StageTableCatalog ,
                    CreateStageTable ,
                    SourceServer as TABLE_SERVER ,
                    IsPartitioned ,
                    PartitionSchemeName ,
                    PartitionKeyColumnName
                from
                    [Metadata].[DestinationTable] with ( nolock )
                where
                    DestinationTableCatalog = @DestinationTableCatalog
                    and DestinationTableName = ISNULL(@DestinationTableName,
                                                      DestinationTableName)
                    and DestinationSchemaName = @DestinationSchemaName;

            open cTables;

            fetch next
		from cTables
		into @TABLE_CATALOG, @TABLE_SCHEMA, @TABLE_NAME,
                @DestinationTableName2, @DestinationSchemaName,
                @CreateIndexesForChecksumColumns, @CreateTableInDatabase,
                @CreateCheckSumColumns, @CompressionType, @StageSchemaName,
                @StageTableName, @StageTableCatalog, @CreateStageTable,
                @TABLE_SERVER, @IsPartitioned, @PartitionSchemeName,
                @PartitionKeyColumnName;

            while @@Fetch_Status = 0
                begin
			-- set PK columns to NON nullable if they are nullable
			-- before create BasteTableString
                    update
                        f
                    set
                        IS_NULLABLE = 'NO'
                    from
                        Metadata.DestinationTable d with ( nolock )
                        inner join Metadata.SourceField f with ( nolock )
                        on d.DestinationTableCatalog = f.DestinationTableCatalog
                           and d.SourceSchemaName = f.TABLE_SCHEMA
                           and d.SourceTableName = f.TABLE_NAME
                        inner join Metadata.TableKeyDefinition k with ( nolock )
                        on k.TableCatalog = d.DestinationTableCatalog
                           and k.SchemaName = d.DestinationSchemaName
                           and k.TableName = d.DestinationTableName
                           and k.COLUMN_NAME = f.COLUMN_NAME
                    where
                        d.SourceTableCatalog = @TABLE_CATALOG
                        and d.SourceSchemaName = @TABLE_SCHEMA
                        and d.SourceTableName = @TABLE_NAME
                        and k.KeyType = 'PK'
                        and f.IS_NULLABLE = 'YES';

                    set @CreateTableString = Metadata.GetCreateBaseTableString(@TABLE_CATALOG,
                                                              @TABLE_SCHEMA,
                                                              @TABLE_NAME,
                                                              @TABLE_SERVER,
                                                              @DestinationTableCatalog,
                                                              @DestinationSchemaName,
                                                              @DestinationTableName2,
                                                              @CompressionType,
                                                              default, default,
                                                              default,
                                                              @IsPartitioned,
                                                              @PartitionSchemeName,
                                                              @PartitionKeyColumnName);
                    set @CreatePKString = Metadata.GetCreatePKChecksumString(@TABLE_CATALOG,
                                                              @TABLE_SCHEMA,
                                                              @TABLE_NAME,
                                                              @DestinationTableCatalog,
                                                              @DestinationSchemaName,
                                                              @DestinationTableName2,
                                                              @CreateCheckSumColumns,
                                                              default, default,
                                                              default,
                                                              @IsPartitioned,
                                                              @PartitionSchemeName,
                                                              @PartitionKeyColumnName,
                                                              @CompressionType);

                    if @CreateTableString is not null
                        and @CreateTableInDatabase = 1
                        begin
                            exec (@CreateTableString);

                            if @CreatePKString is not null
                                exec (@CreatePKString);
                            else
                                print 'No Primary Key was created!';

                            if @CreateStageTable = 1
                                begin
                                    set @CreateTableString = Metadata.GetCreateBaseTableString(@TABLE_CATALOG,
                                                              @TABLE_SCHEMA,
                                                              @TABLE_NAME,
                                                              @TABLE_SERVER,
                                                              @DestinationTableCatalog,
                                                              @DestinationSchemaName,
                                                              @DestinationTableName,
                                                              @CompressionType,
                                                              ISNULL(@StageTableCatalog,
                                                              @DestinationTableCatalog),
                                                              @StageSchemaName,
                                                              @StageTableName,
                                                              @IsPartitioned,
                                                              @PartitionSchemeName,
                                                              @PartitionKeyColumnName);
                                    set @CreatePKString = Metadata.GetCreatePKChecksumString(@TABLE_CATALOG,
                                                              @TABLE_SCHEMA,
                                                              @TABLE_NAME,
                                                              @DestinationTableCatalog,
                                                              @DestinationSchemaName,
                                                              @DestinationTableName2,
                                                              @CreateCheckSumColumns,
                                                              ISNULL(@StageTableCatalog,
                                                              @DestinationTableCatalog),
                                                              @StageSchemaName,
                                                              @StageTableName,
                                                              @IsPartitioned,
                                                              @PartitionSchemeName,
                                                              @PartitionKeyColumnName,
                                                              @CompressionType);

                                    if @CreateTableString is not null
                                        begin
                                            exec (@CreateTableString);

                                            if @CreatePKString is not null
                                                begin
                                                    exec (@CreatePKString);
                                                end;
                                            else
                                                print 'No Primary Key for Stage table was created!';

                                            select  @CreateTableString =  Metadata.GetCreateStageViewString(@TABLE_CATALOG,
                                                              @TABLE_SCHEMA,
                                                              @TABLE_NAME,
                                                              @TABLE_SERVER,
                                                              @StageTableCatalog,
                                                              @StageSchemaName,
                                                              @StageTableName,
                                                              @DestinationTableCatalog,
                                                              @DestinationSchemaName,
                                                              @DestinationTableName);
											
											if @CreateTableString is not null
                                                begin
                                                    exec (@CreateTableString);
                                                end;
                                            else
                                                begin
                                                    print 'No view for Stage table was created!';
                                                end;
					
                                        end;
                    
                                end;

				-- Create additional nonclustered indexes for table
                            declare @ncix_index_name as nvarchar(128);

                            declare cNonClusteredIndex cursor
                            for
                                select distinct
                                    TableKeyName
                                from
                                    [Metadata].[TableKeyDefinition]
                                where
                                    TableCatalog = @DestinationTableCatalog
                                    and SchemaName = @DestinationSchemaName
                                    and TableName = @DestinationTableName2
                                    and KeyType = 'NCIX';

                            open cNonClusteredIndex;

                            fetch next
				from cNonClusteredIndex
				into @ncix_index_name;

                            declare @ncix_dml as nvarchar(1000);

                            while @@Fetch_Status = 0
                                begin
                                    declare @ncix_index_columns as nvarchar(500) = '';
                                    declare @ncix_index_included_columns as nvarchar(500) = '';
                                    declare @ncix_index_filter_predicate as nvarchar(500) = '';
                                    declare @ncix_index_storage_location as nvarchar(500) = '';
                                    declare @ncix_unique_definition nvarchar(20) = '';

                                    select
                                        @ncix_index_columns = @ncix_index_columns
                                        + COLUMN_NAME
                                        + case when a.IsAscendingOrder = 0
                                               then ' DESC'
                                               else ''
                                          end + ','
                                    from
                                        [Metadata].[TableKeyDefinition] a
                                    where
                                        TableCatalog = @DestinationTableCatalog
                                        and SchemaName = @DestinationSchemaName
                                        and TableName = @DestinationTableName2
                                        and TableKeyName = @ncix_index_name
                                        and IncludedColumn = 0
                                    order by
                                        KeyColumnOrder asc;

                                    select
                                        @ncix_index_included_columns = @ncix_index_included_columns
                                        + COLUMN_NAME + ','
                                    from
                                        [Metadata].[TableKeyDefinition]
                                    where
                                        TableCatalog = @DestinationTableCatalog
                                        and SchemaName = @DestinationSchemaName
                                        and TableName = @DestinationTableName2
                                        and TableKeyName = @ncix_index_name
                                        and IncludedColumn = 1
                                    order by
                                        KeyColumnOrder asc;

					-- Get NCIX filter predicate
                                    select
                                        @ncix_index_filter_predicate = ISNULL('WHERE '
                                                              + MAX(fp.FilterPredicate),
                                                              '')
                                    from
                                        [Metadata].[TableKeyDefinition] fp
                                    where
                                        TableCatalog = @DestinationTableCatalog
                                        and SchemaName = @DestinationSchemaName
                                        and TableName = @DestinationTableName2
                                        and TableKeyName = @ncix_index_name;

					-- Get NCIX storage location
                                    select
                                        @ncix_index_storage_location = MAX(fp.IndexStorageLocation)
                                    from
                                        [Metadata].[TableKeyDefinition] fp
                                    where
                                        TableCatalog = @DestinationTableCatalog
                                        and SchemaName = @DestinationSchemaName
                                        and TableName = @DestinationTableName2
                                        and TableKeyName = @ncix_index_name
                                        and fp.IndexStorageLocation != 'DefaultLocation';

					-- Get NCIX Unique definition
                                    select
                                        @ncix_unique_definition = case
                                                              when MAX(case
                                                              when fp.IndexIsUnique = 1
                                                              then 1
                                                              else 0
                                                              end) = 1
                                                              then 'UNIQUE'
                                                              else ''
                                                              end
                                    from
                                        [Metadata].[TableKeyDefinition] fp
                                    where
                                        TableCatalog = @DestinationTableCatalog
                                        and SchemaName = @DestinationSchemaName
                                        and TableName = @DestinationTableName2
                                        and TableKeyName = @ncix_index_name
                                        and fp.IndexIsUnique = 1;

					-- Add fill factor to the non-clustered index
                                    declare @pk_index_fill_factor varchar(180);

                                    select
                                        @pk_index_fill_factor = ISNULL(',  FILLFACTOR = '
                                                              + CAST(MAX(fp.IndexFillFactor) as varchar(5)),
                                                              '')
                                    from
                                        [Metadata].[TableKeyDefinition] fp
                                    where
                                        TableCatalog = @DestinationTableCatalog
                                        and SchemaName = @DestinationSchemaName
                                        and TableKeyName = @ncix_index_name;

                                    set @ncix_index_columns = LEFT(@ncix_index_columns,
                                                              LEN(@ncix_index_columns)
                                                              - 1);
                                    set @ncix_dml = 'CREATE  '
                                        + @ncix_unique_definition
                                        + ' NONCLUSTERED INDEX '
                                        + @ncix_index_name + ' ON ' + '['
                                        + @DestinationTableCatalog + '].['
                                        + @DestinationSchemaName + '].['
                                        + @DestinationTableName2 + ']' + '('
                                        + @ncix_index_columns + ')';

					-- Add extra text for included columns in the index
                                    if ( LEN(@ncix_index_included_columns) > 0 )
                                        begin
                                            set @ncix_index_included_columns = LEFT(@ncix_index_included_columns,
                                                              LEN(@ncix_index_included_columns)
                                                              - 1);
                                            set @ncix_dml = @ncix_dml
                                                + ' INCLUDE('
                                                + @ncix_index_included_columns
                                                + ')';
                                        end;

					-- Apply filter on index
                                    set @ncix_dml = @ncix_dml
                                        + @ncix_index_filter_predicate + ' ';
					-- Apply compression and fill factor on the non-clustered index
                                    set @ncix_dml = @ncix_dml
                                        + ' WITH (DATA_COMPRESSION = '
                                        + @CompressionType
                                        + @pk_index_fill_factor + ')';
					-- Apply storage location on the non-clustered index
                                    set @ncix_dml = @ncix_dml + ISNULL(' ON ['
                                                              + @ncix_index_storage_location
                                                              + ']', '');

                                    raiserror (
							@ncix_dml
							,10
							,1
							)
					with nowait;

                                    execute (@ncix_dml);

                                    fetch next
					from cNonClusteredIndex
					into @ncix_index_name;
                                end;

                            close cNonClusteredIndex;

                            deallocate cNonClusteredIndex;
					-- Finished creating indexes
                        end;

                    fetch next
			from cTables
			into @TABLE_CATALOG, @TABLE_SCHEMA, @TABLE_NAME,
                        @DestinationTableName2, @DestinationSchemaName,
                        @CreateIndexesForChecksumColumns,
                        @CreateTableInDatabase, @CreateCheckSumColumns,
                        @CompressionType, @StageSchemaName, @StageTableName,
                        @StageTableCatalog, @CreateStageTable, @TABLE_SERVER,
                        @IsPartitioned, @PartitionSchemeName,
                        @PartitionKeyColumnName;
                end;

            close cTables;

            deallocate cTables;

            commit transaction CreateTables;
        end try

        begin catch
            close cTables;
            deallocate cTables;
			declare @errmsg varchar(max) = CONCAT('Error: ',ERROR_MESSAGE(), ' while executing ',CHAR(13),CHAR(10),@CreateTableString);
			declare @errnum int = 51001;
			declare @errstate int = ERROR_STATE();
			print @errmsg;

			rollback transaction CreateTables;
			throw;
			
            print @CreateTableString;
            print @CreatePKString;
        end catch;
    end;
GO
PRINT N'Creating [Metadata].[GetTableMetadata]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	Gets metadata for given database
-- Example:	
-- 		EXECUTE [DevelopmentFrameworkConfig].[Metadata].[GetTableMetadata] @TABLE_CATALOG = 'DW'
--
--
-- =============================================
CREATE PROCEDURE [Metadata].[GetTableMetadata] @TABLE_CATALOG VARCHAR(max)
	,@TABLE_SCHEMA VARCHAR(max) = NULL
	,@TABLE_NAME VARCHAR(max) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @SQLScript VARCHAR(max)

	SET @SQLScript = 
		'select	isct.TABLE_TYPE as Table_Type
			, isc.TABLE_SCHEMA as Table_Schema
			, isc.TABLE_NAME as Table_Name
			, isc.COLUMN_NAME as Column_Name
			, dn.DescriptionDefinition as ColumnDisplayName
			, PrimaryKey = case
								when pk.ColumnName is not null then ''YES''
								else ''NO''
							end
			, fk.REFERENCED_TABLE_NAME as ForeignKeyTo
			, xp.DescriptionDefinition as Column_Description
			, isc.DATA_TYPE 
				+ ISNULL(''('' + cast(CHARACTER_MAXIMUM_LENGTH as varchar(10)) + '')'', '''') 
				+ ISNULL(''('' + cast(NUMERIC_PRECISION as varchar(10)) + '', '' + cast(case when isc.DATA_TYPE like ''%int%'' then null else NUMERIC_SCALE end as varchar(10)) + '')'', '''') 			
				as Data_Type
			, Data_Type_Extension = (case
										when isc.IS_NULLABLE = ''YES'' then ''NULL''
										else ''NOT NULL''
									end) + ISNULL('' DEFAULT'' + isc.COLUMN_DEFAULT, '''')
			, ev.DescriptionDefinition as Column_Example_Value
			, ss.DescriptionDefinition as SourceSystem
			, ssc.DescriptionDefinition as SourceSchema
			, son.DescriptionDefinition as SourceObjectName
			, sfn.DescriptionDefinition as SourceFieldName
			, sdt.DescriptionDefinition as SourceDataType
			, etl.DescriptionDefinition as ETLRules
			, com.DescriptionDefinition as Comment
	from ' 
		+ @TABLE_CATALOG + '.INFORMATION_SCHEMA.COLUMNS as isc
		inner join ' + @TABLE_CATALOG + '.INFORMATION_SCHEMA.TABLES isct on isc.TABLE_CATALOG = isct.TABLE_CATALOG
										and isc.TABLE_SCHEMA = isct.TABLE_SCHEMA
										and isc.TABLE_NAME = isct.TABLE_NAME
		left outer join (	SELECT SCH.name AS SchemaName
								,TBL.name AS TableName
								,COL.name AS ColumnName
								,SEP.name AS DescriptionType
								,SEP.value AS DescriptionDefinition
							FROM ' + @TABLE_CATALOG + '.sys.extended_properties SEP
								INNER JOIN ' + @TABLE_CATALOG + '.sys.columns COL ON SEP.major_id = COL.object_id 
										AND SEP.minor_id = COL.column_id 
								INNER JOIN (select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.tables
											union select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.views
											) TBL ON SEP.major_id = TBL.object_id 
								INNER JOIN ' + @TABLE_CATALOG + 
		'.sys.schemas SCH ON TBL.schema_id = SCH.schema_id
							WHERE SEP.class = 1 AND (SEP.value <> ''1'' AND SEP.value <> 1)
						) as xp on isc.COLUMN_NAME = xp.ColumnName collate Latin1_General_CI_AI
									and isc.TABLE_NAME = xp.TableName collate Latin1_General_CI_AI
									and isc.TABLE_SCHEMA = xp.SchemaName collate Latin1_General_CI_AI
									and xp.DescriptionType = ''ColumnDescription''
		left outer join (	SELECT SCH.name AS SchemaName
								,TBL.name AS TableName
								,COL.name AS ColumnName
								,SEP.name AS DescriptionType
								,SEP.value AS DescriptionDefinition
							FROM ' + @TABLE_CATALOG + '.sys.extended_properties SEP
								INNER JOIN ' + @TABLE_CATALOG + '.sys.columns COL ON SEP.major_id = COL.object_id 
										AND SEP.minor_id = COL.column_id 
								INNER JOIN (select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.tables
											union select object_id, name, schema_id from ' + @TABLE_CATALOG + 
		'.sys.views
											) TBL ON SEP.major_id = TBL.object_id 
								INNER JOIN ' + @TABLE_CATALOG + '.sys.schemas SCH ON TBL.schema_id = SCH.schema_id
							WHERE SEP.class = 1 AND (SEP.value <> ''1'' AND SEP.value <> 1)
						) as ev on isc.COLUMN_NAME = ev.ColumnName collate Latin1_General_CI_AI
									and isc.TABLE_SCHEMA = ev.SchemaName collate Latin1_General_CI_AI
									and isc.TABLE_NAME = ev.TableName collate Latin1_General_CI_AI
									and ev.DescriptionType = ''ExampleValue''
		left outer join (	SELECT SCH.name AS SchemaName
								,TBL.name AS TableName
								,COL.name AS ColumnName
								,SEP.name AS DescriptionType
								,SEP.value AS DescriptionDefinition
							FROM ' + @TABLE_CATALOG + '.sys.extended_properties SEP
								INNER JOIN ' + @TABLE_CATALOG + '.sys.columns COL ON SEP.major_id = COL.object_id 
										AND SEP.minor_id = COL.column_id 
								INNER JOIN (select object_id, name, schema_id from ' + @TABLE_CATALOG + 
		'.sys.tables
											union select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.views
											) TBL ON SEP.major_id = TBL.object_id 
								INNER JOIN ' + @TABLE_CATALOG + '.sys.schemas SCH ON TBL.schema_id = SCH.schema_id
							WHERE SEP.class = 1 AND (SEP.value <> ''1'' AND SEP.value <> 1)
						) as dn on isc.COLUMN_NAME = dn.ColumnName collate Latin1_General_CI_AI
									and isc.TABLE_SCHEMA = dn.SchemaName collate Latin1_General_CI_AI
									and isc.TABLE_NAME = dn.TableName collate Latin1_General_CI_AI
									and dn.DescriptionType = ''DisplayName''
		left outer join (	SELECT SCH.name AS SchemaName
								,TBL.name AS TableName
								,COL.name AS ColumnName
								,SEP.name AS DescriptionType
								,SEP.value AS DescriptionDefinition
							FROM ' + @TABLE_CATALOG + '.sys.extended_properties SEP
								INNER JOIN ' + @TABLE_CATALOG + 
		'.sys.columns COL ON SEP.major_id = COL.object_id 
										AND SEP.minor_id = COL.column_id 
								INNER JOIN (select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.tables
											union select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.views
											) TBL ON SEP.major_id = TBL.object_id 
								INNER JOIN ' + @TABLE_CATALOG + '.sys.schemas SCH ON TBL.schema_id = SCH.schema_id
							WHERE SEP.class = 1 AND (SEP.value <> ''1'' AND SEP.value <> 1)
						) as ss on isc.COLUMN_NAME = ss.ColumnName collate Latin1_General_CI_AI
									and isc.TABLE_SCHEMA = ss.SchemaName collate Latin1_General_CI_AI
									and isc.TABLE_NAME = ss.TableName collate Latin1_General_CI_AI
									and ss.DescriptionType = ''SourceSystem''
		left outer join (	SELECT SCH.name AS SchemaName
								,TBL.name AS TableName
								,COL.name AS ColumnName
								,SEP.name AS DescriptionType
								,SEP.value AS DescriptionDefinition
							FROM ' + @TABLE_CATALOG 
		+ '.sys.extended_properties SEP
								INNER JOIN ' + @TABLE_CATALOG + '.sys.columns COL ON SEP.major_id = COL.object_id 
										AND SEP.minor_id = COL.column_id 
								INNER JOIN (select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.tables
											union select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.views
											) TBL ON SEP.major_id = TBL.object_id 
								INNER JOIN ' + @TABLE_CATALOG + 
		'.sys.schemas SCH ON TBL.schema_id = SCH.schema_id
							WHERE SEP.class = 1 AND (SEP.value <> ''1'' AND SEP.value <> 1)
						) as ssc on isc.COLUMN_NAME = ssc.ColumnName collate Latin1_General_CI_AI
									and isc.TABLE_SCHEMA = ssc.SchemaName collate Latin1_General_CI_AI
									and isc.TABLE_NAME = ssc.TableName collate Latin1_General_CI_AI
									and ssc.DescriptionType = ''SourceSchema''
		left outer join (	SELECT SCH.name AS SchemaName
								,TBL.name AS TableName
								,COL.name AS ColumnName
								,SEP.name AS DescriptionType
								,SEP.value AS DescriptionDefinition
							FROM ' + @TABLE_CATALOG + '.sys.extended_properties SEP
								INNER JOIN ' + @TABLE_CATALOG + '.sys.columns COL ON SEP.major_id = COL.object_id 
										AND SEP.minor_id = COL.column_id 
								INNER JOIN (select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.tables
											union select object_id, name, schema_id from ' + @TABLE_CATALOG + 
		'.sys.views
											) TBL ON SEP.major_id = TBL.object_id 
								INNER JOIN ' + @TABLE_CATALOG + '.sys.schemas SCH ON TBL.schema_id = SCH.schema_id
							WHERE SEP.class = 1 AND (SEP.value <> ''1'' AND SEP.value <> 1)
						) as son on isc.COLUMN_NAME = son.ColumnName collate Latin1_General_CI_AI
									and isc.TABLE_SCHEMA = son.SchemaName collate Latin1_General_CI_AI
									and isc.TABLE_NAME = son.TableName collate Latin1_General_CI_AI
									and son.DescriptionType = ''SourceObjectName''
		left outer join (	SELECT SCH.name AS SchemaName
								,TBL.name AS TableName
								,COL.name AS ColumnName
								,SEP.name AS DescriptionType
								,SEP.value AS DescriptionDefinition
							FROM ' + @TABLE_CATALOG + '.sys.extended_properties SEP
								INNER JOIN ' + @TABLE_CATALOG + '.sys.columns COL ON SEP.major_id = COL.object_id 
										AND SEP.minor_id = COL.column_id 
								INNER JOIN (select object_id, name, schema_id from ' + @TABLE_CATALOG + 
		'.sys.tables
											union select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.views
											) TBL ON SEP.major_id = TBL.object_id 
								INNER JOIN ' + @TABLE_CATALOG + '.sys.schemas SCH ON TBL.schema_id = SCH.schema_id
							WHERE SEP.class = 1 AND (SEP.value <> ''1'' AND SEP.value <> 1)
						) as sfn on isc.COLUMN_NAME = sfn.ColumnName collate Latin1_General_CI_AI
									and isc.TABLE_SCHEMA = sfn.SchemaName collate Latin1_General_CI_AI
									and isc.TABLE_NAME = sfn.TableName collate Latin1_General_CI_AI
									and sfn.DescriptionType = ''SourceFieldName''
		left outer join (	SELECT SCH.name AS SchemaName
								,TBL.name AS TableName
								,COL.name AS ColumnName
								,SEP.name AS DescriptionType
								,SEP.value AS DescriptionDefinition
							FROM ' + @TABLE_CATALOG + '.sys.extended_properties SEP
								INNER JOIN ' + @TABLE_CATALOG + 
		'.sys.columns COL ON SEP.major_id = COL.object_id 
										AND SEP.minor_id = COL.column_id 
								INNER JOIN (select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.tables
											union select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.views
											) TBL ON SEP.major_id = TBL.object_id 
								INNER JOIN ' + @TABLE_CATALOG + '.sys.schemas SCH ON TBL.schema_id = SCH.schema_id
							WHERE SEP.class = 1 AND (SEP.value <> ''1'' AND SEP.value <> 1)
						) as sdt on isc.COLUMN_NAME = sdt.ColumnName collate Latin1_General_CI_AI
									and isc.TABLE_SCHEMA = sdt.SchemaName collate Latin1_General_CI_AI
									and isc.TABLE_NAME = sdt.TableName collate Latin1_General_CI_AI
									and sdt.DescriptionType = ''SourceDataType''
		left outer join (	SELECT SCH.name AS SchemaName
								,TBL.name AS TableName
								,COL.name AS ColumnName
								,SEP.name AS DescriptionType
								,SEP.value AS DescriptionDefinition
							FROM ' + 
		@TABLE_CATALOG + '.sys.extended_properties SEP
								INNER JOIN ' + @TABLE_CATALOG + '.sys.columns COL ON SEP.major_id = COL.object_id 
										AND SEP.minor_id = COL.column_id 
								INNER JOIN (select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.tables
											union select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.views
											) TBL ON SEP.major_id = TBL.object_id 
								INNER JOIN ' + @TABLE_CATALOG + 
		'.sys.schemas SCH ON TBL.schema_id = SCH.schema_id
							WHERE SEP.class = 1 AND (SEP.value <> ''1'' AND SEP.value <> 1)
						) as etl on isc.COLUMN_NAME = etl.ColumnName collate Latin1_General_CI_AI
									and isc.TABLE_SCHEMA = etl.SchemaName collate Latin1_General_CI_AI
									and isc.TABLE_NAME = etl.TableName collate Latin1_General_CI_AI
									and etl.DescriptionType = ''ETLRules''
		left outer join (	SELECT SCH.name AS SchemaName
								,TBL.name AS TableName
								,COL.name AS ColumnName
								,SEP.name AS DescriptionType
								,SEP.value AS DescriptionDefinition
								, TBL.*
							FROM ' + @TABLE_CATALOG + '.sys.extended_properties SEP
								INNER JOIN ' + @TABLE_CATALOG + '.sys.columns COL ON SEP.major_id = COL.object_id 
										AND SEP.minor_id = COL.column_id 
								INNER JOIN (select object_id, name, schema_id from ' + @TABLE_CATALOG + '.sys.tables
											union select object_id, name, schema_id from ' + @TABLE_CATALOG + 
		'.sys.views
											) TBL ON SEP.major_id = TBL.object_id 
								INNER JOIN ' + @TABLE_CATALOG + '.sys.schemas SCH ON TBL.schema_id = SCH.schema_id
							WHERE SEP.class = 1 AND (SEP.value <> ''1'' AND SEP.value <> 1)
						) as com on isc.COLUMN_NAME = com.ColumnName collate Latin1_General_CI_AI
									and isc.TABLE_SCHEMA = com.SchemaName collate Latin1_General_CI_AI
									and isc.TABLE_NAME = com.TableName collate Latin1_General_CI_AI
									and com.DescriptionType = ''Comment''
		left outer join (	select ccu.COLUMN_NAME as ColumnName, ccu.TABLE_NAME as TableName
							FROM ' + @TABLE_CATALOG + '.INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc         
								inner join ' + @TABLE_CATALOG + '.INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE ccu ON tc.CONSTRAINT_NAME = ccu.Constraint_name
								inner join ' + @TABLE_CATALOG + 
		'.INFORMATION_SCHEMA.COLUMNS col on  ccu.TABLE_CATALOG = col.TABLE_CATALOG
																			and ccu.TABLE_SCHEMA = col.TABLE_SCHEMA
																			and ccu.TABLE_NAME = col.TABLE_NAME
																			and ccu.COLUMN_NAME = col.COLUMN_NAME

							WHERE tc.CONSTRAINT_TYPE = ''Primary Key'') as pk on isc.COLUMN_NAME = pk.ColumnName collate Latin1_General_CI_AI
									and isc.TABLE_NAME = pk.TableName collate Latin1_General_CI_AI
		left outer join (SELECT KCU1.TABLE_NAME AS FK_TABLE_NAME      
								,KCU1.COLUMN_NAME AS FK_COLUMN_NAME      
								,KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION      
								,KCU2.CONSTRAINT_NAME AS REFERENCED_CONSTRAINT_NAME      
								,KCU2.TABLE_NAME AS REFERENCED_TABLE_NAME      
								,KCU2.COLUMN_NAME AS REFERENCED_COLUMN_NAME      
								,KCU2.ORDINAL_POSITION AS REFERENCED_ORDINAL_POSITION  
						FROM ' + @TABLE_CATALOG + '.INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC   
							LEFT JOIN ' + @TABLE_CATALOG + 
		'.INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU1 ON KCU1.CONSTRAINT_CATALOG = RC.CONSTRAINT_CATALOG       
										AND KCU1.CONSTRAINT_SCHEMA = RC.CONSTRAINT_SCHEMA      
										AND KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME   
							LEFT JOIN ' + @TABLE_CATALOG + '.INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU2 ON KCU2.CONSTRAINT_CATALOG = RC.UNIQUE_CONSTRAINT_CATALOG       
										AND KCU2.CONSTRAINT_SCHEMA = RC.UNIQUE_CONSTRAINT_SCHEMA      
										AND KCU2.CONSTRAINT_NAME = RC.UNIQUE_CONSTRAINT_NAME      
										AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION ) as fk on isc.COLUMN_NAME = fk.FK_COLUMN_NAME collate Latin1_General_CI_AI
																			and isc.TABLE_NAME = fk.FK_TABLE_NAME collate Latin1_General_CI_AI
	where	isc.TABLE_CATALOG = ''' + @TABLE_CATALOG + '''
			and isc.TABLE_SCHEMA = ' + isnull('''' + @TABLE_SCHEMA + '''', 'isc.TABLE_SCHEMA') + '
			and isc.TABLE_NAME = ' + isnull('''' + @TABLE_NAME + '''', 'isc.TABLE_NAME') + 
		'
	order by isc.TABLE_SCHEMA, isc.TABLE_NAME, isc.ORDINAL_POSITION
	'

	EXECUTE (@SQLScript)
END
GO
PRINT N'Creating [Metadata].[UpdateSourceFieldTable]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	Refreshes the meta data for the current table and database
-- Example:	
/* 
	EXECUTE [Metadata].[UpdateSourceFieldTable] @LinkedServerName = '[LOCALHOST]'
		, @SourceDatabaseName = 'Stage'
		, @SourceTableName = 'Person'
		, @DestinationTableCatalog = 'DataWarehouse'
		, @SourceSchemaName = 'DataWarehouse'
		, @SourceServer = null
							
*/--
-- =============================================
CREATE procedure [Metadata].[UpdateSourceFieldTable]
    @LinkedServerName varchar(50)
  , @SourceDatabaseName varchar(50)
  , @SourceSchemaName varchar(50)
  , @SourceTableName varchar(50)
  , @DestinationTableCatalog varchar(50)
  , @SourceServer varchar(128)
as
    begin
	declare @err_msg varchar(400);
	
	/* BEGIN Get DestinationTable metadata */
        declare @FactScdType tinyint;

        select  @FactScdType = FactScdType
        from    Metadata.DestinationTable as dt
        where   1 = 1
                and dt.SourceTableCatalog = @SourceDatabaseName
                and dt.SourceSchemaName = @SourceSchemaName
                and dt.SourceTableName = @SourceTableName
                and dt.DestinationTableCatalog = @DestinationTableCatalog
                and (@SourceServer is null or dt.SourceServer = @SourceServer);

	/* END Get DestinationTable metadata */

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
        set nocount on;

        select  *
        into    #Metadata
        from    [Metadata].[SourceField]
        where   1 = 2;

        alter table #Metadata

        drop column SourceFieldID;

        alter table #Metadata

        drop column DestinationTableCatalog;

        alter table #Metadata

        drop column TABLE_SERVER;

        declare @SQLString varchar(max) = 'EXECUTE ' + @LinkedServerName + '.'
            + @SourceDatabaseName + '.dbo.sp_executesql
		N''SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_SCHEMA = '''''
            + @SourceSchemaName + '''''' + 'AND TABLE_NAME = '''''
            + @SourceTableName + '''''' + '''';

        print @SQLString;

        insert  into #Metadata
                execute ( @SQLString
                       );

        if @DestinationTableCatalog = 'DWH_3_Fact'
            begin
                declare @SysDateTimeDeletedUTCColumnName varchar(255) = 'SysDateTimeDeletedUTC';
                if @FactScdType = 1
                    and not exists ( select *
                                     from   #Metadata as m
                                     where  m.COLUMN_NAME = @SysDateTimeDeletedUTCColumnName )
                    begin 
                        set @err_msg = CONCAT('Column ',
                                                              @SysDateTimeDeletedUTCColumnName,
                                                              ' is mandatory for FactScdType = 1');
                        raiserror (
							@err_msg
							,16
							,1
						);
						return;
                    end;
            end; 

        begin transaction Metadata;

        begin try
            delete  from [Metadata].[SourceField]
            where   DestinationTableCatalog = @DestinationTableCatalog
                    and TABLE_SCHEMA = @SourceSchemaName
                    and TABLE_NAME = @SourceTableName
                    and TABLE_CATALOG = @SourceDatabaseName
                    and ( @SourceServer is null
                          or TABLE_SERVER = @SourceServer
                        ); --addition 2013-06-12 wiol

            insert  into [Metadata].[SourceField]
                    ( [TABLE_CATALOG]
                    , [TABLE_SCHEMA]
                    , [TABLE_NAME]
                    , [COLUMN_NAME]
                    , [ORDINAL_POSITION]
                    , [COLUMN_DEFAULT]
                    , [IS_NULLABLE]
                    , [DATA_TYPE]
                    , [CHARACTER_MAXIMUM_LENGTH]
                    , [CHARACTER_OCTET_LENGTH]
                    , [NUMERIC_PRECISION]
                    , [NUMERIC_PRECISION_RADIX]
                    , [NUMERIC_SCALE]
                    , [DATETIME_PRECISION]
                    , [CHARACTER_SET_CATALOG]
                    , [CHARACTER_SET_SCHEMA]
                    , [CHARACTER_SET_NAME]
                    , [COLLATION_CATALOG]
                    , [COLLATION_SCHEMA]
                    , [COLLATION_NAME]
                    , [DOMAIN_CATALOG]
                    , [DOMAIN_SCHEMA]
                    , [DOMAIN_NAME]
                    , [TABLE_SERVER]
                    , DestinationTableCatalog
			        )
                    select  #Metadata.[TABLE_CATALOG]
                          , #Metadata.[TABLE_SCHEMA]
                          , #Metadata.[TABLE_NAME]
                          , #Metadata.[COLUMN_NAME]
                          , #Metadata.[ORDINAL_POSITION]
                          , #Metadata.[COLUMN_DEFAULT]
                          , #Metadata.[IS_NULLABLE]
                          , #Metadata.[DATA_TYPE]
                          , #Metadata.[CHARACTER_MAXIMUM_LENGTH]
                          , #Metadata.[CHARACTER_OCTET_LENGTH]
                          , #Metadata.[NUMERIC_PRECISION]
                          , #Metadata.[NUMERIC_PRECISION_RADIX]
                          , #Metadata.[NUMERIC_SCALE]
                          , #Metadata.[DATETIME_PRECISION]
                          , #Metadata.[CHARACTER_SET_CATALOG]
                          , #Metadata.[CHARACTER_SET_SCHEMA]
                          , #Metadata.[CHARACTER_SET_NAME]
                          , #Metadata.[COLLATION_CATALOG]
                          , #Metadata.[COLLATION_SCHEMA]
                          , #Metadata.[COLLATION_NAME]
                          , #Metadata.[DOMAIN_CATALOG]
                          , #Metadata.[DOMAIN_SCHEMA]
                          , #Metadata.[DOMAIN_NAME]
                          , @SourceServer
                          , @DestinationTableCatalog
                    from    #Metadata
                            left outer join Metadata.DestinationFieldExtended
                                as e
                                on #Metadata.COLUMN_NAME = e.COLUMN_NAME
                                   and e.DestinationTableCatalog = @DestinationTableCatalog
                                   and ISNULL(e.SourceTableCatalog,
                                              @SourceDatabaseName) = @SourceDatabaseName
                    where   #Metadata.COLUMN_NAME not like 'Checksum%' -- Vi tar inte med checksumma kolumner
                            and e.COLUMN_NAME is null
                            or e.COLUMN_NAME = 'SysDateTimeDeletedUTC';

		-- Mark this update as update also in the destinationtable table
            update  Metadata.DestinationTable
            set     UserNameUpdated = system_user
                  , DateTimeUpdatedUTC = GETUTCDATE()
            where   DestinationTableCatalog = @DestinationTableCatalog
                    and SourceSchemaName = @SourceSchemaName
                    and SourceTableName = @SourceTableName
                    and SourceTableCatalog = @SourceDatabaseName
                    and ( @SourceServer is null
                          or SourceServer = @SourceServer
                        );

            commit transaction Metadata;
        end try

        begin catch
            set @err_msg= 'Source field meta data not updated: '
                + ERROR_MESSAGE();

            raiserror (
				@err_msg
				,16
				,1
				);

            rollback transaction Metadata;
        end catch;

        drop table #Metadata;

        print '	Table [Metadata].[SourceField] refreshed (' + @SourceTableName
            + ')';
    end;
GO
PRINT N'Creating [Metadata].[CreateRawToRawEntity]...';


GO
CREATE proc Metadata.CreateRawToRawEntity
@sourcedb varchar(255) = 'DW_1_Raw',
@targetdb varchar(255) = 'DWH_1_Raw',
@clusteringfields varchar(255) = 'ExecutionLog_key'
as 
declare @sql_createtable varchar(max)= '';
declare @sql_createindex varchar(max)= '';
declare @sql_filltables varchar(max) = CONCAT('insert into #tables',CHAR(13),CHAR(10),'select * from ', @sourcedb, '.INFORMATION_SCHEMA.TABLES')
declare @sql_fillcolumns varchar(max) = CONCAT('insert into #columns',CHAR(13),CHAR(10),'select * from ', @sourcedb, '.INFORMATION_SCHEMA.COLUMNS')

set nocount on;

select * 
into #columns
from INFORMATION_SCHEMA.COLUMNS as c
where 1=0


select * 
into #tables
from INFORMATION_SCHEMA.TABLES as t 
where 1=0;

exec(@sql_fillcolumns);
exec(@sql_filltables);

with    rawinfo
          as ( select   TableName = CONCAT('RawTyped.[', c.TABLE_NAME, ']')
                      , ColumnDeclaration = CONCAT('[', c.COLUMN_NAME, '] ',
                                                   c.DATA_TYPE,
                                                   case when c.DATA_TYPE = 'datetime2'
                                                        then CONCAT('(',
                                                              CONVERT(varchar(2), c.DATETIME_PRECISION),
                                                              ')')
                                                        when CHARINDEX('char',
                                                              c.DATA_TYPE) > 0
                                                        then CONCAT('(',
                                                              CONVERT(varchar(2), c.CHARACTER_MAXIMUM_LENGTH),
                                                              ')')
                                                        when c.DATA_TYPE in (
                                                             'decimal',
                                                             'numerical' )
                                                        then CONCAT('(',
                                                              CONVERT(varchar(2), c.NUMERIC_PRECISION),
                                                              ',',
                                                              CONVERT(varchar(2), c.NUMERIC_SCALE),
                                                              ')')
                                                        else ''
                                                   end, ' ',
                                                   case when c.IS_NULLABLE = 'YES'
                                                        then 'null'
                                                        else 'not null'
                                                   end)
                      , c.ORDINAL_POSITION
               from     #columns as c
               where    1 = 1
                        and c.TABLE_SCHEMA = 'RawTyped_External'
             )
    select  @sql_createtable = CONCAT(@sql_createtable, CHAR(13), CHAR(10),
                                      CHAR(13), CHAR(10), 'create table ',
                                      @targetdb, '.', t1.TableName, '(',
                                      STUFF(
                   (select  CONCAT(', ', CHAR(13), CHAR(10),
                                   t2.ColumnDeclaration)
                    from    rawinfo t2
                    where   t1.TableName = t2.TableName
                    order by t2.ORDINAL_POSITION
                                      for   xml path('')
                                              , type
                   ).value('.', 'varchar(max)'), 1, 2, ''), ');', CHAR(13),
                                      CHAR(10))
    from    rawinfo t1
    group by t1.TableName;


print @sql_createtable;
exec(@sql_createtable);



select  @sql_createindex = CONCAT(@sql_createindex, 'create clustered index [CI_', c.TABLE_NAME, '] on ', @targetdb, '.RawTyped.[', c.TABLE_NAME, '](', CHAR(13), CHAR(10), @clusteringfields, CHAR(13), CHAR(10), ') with (data_compression=page);', CHAR(13), CHAR(10), CHAR(13), CHAR(10))
from    #tables as c
where   1 = 1
        and c.TABLE_SCHEMA = 'RawTyped_External';
     
print @sql_createindex;
exec(@sql_createindex);
GO
PRINT N'Creating [Metadata].[CopyMetadataReferences]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	Copies meta data references, from a given table, from a database to another
-- Example:	
--
--
-- =============================================
CREATE PROCEDURE [Metadata].[CopyMetadataReferences] @FromDatabase NVARCHAR(128)
	,@ToDatabase NVARCHAR(128)
	,@FromDatabaseSource NVARCHAR(128)
	,@ToDatabaseSource NVARCHAR(128)
	,@CurrentDestinationTableNameToCopy NVARCHAR(128)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRANSACTION

	BEGIN TRY
		DECLARE @CurrentSourceTableNameToCopy NVARCHAR(128) = (
				SELECT SourceTableName
				FROM [Metadata].[DestinationTable]
				WHERE DestinationTableName = @CurrentDestinationTableNameToCopy
					AND DestinationTableCatalog = @FromDatabase
				)

		-- Insert meta data into the SourceField table
		IF NOT EXISTS (
				SELECT 1
				FROM [Metadata].[SourceField]
				WHERE DestinationTableCatalog = @ToDatabaseSource
					AND TABLE_NAME = @CurrentSourceTableNameToCopy
				)
		BEGIN
			INSERT INTO [Metadata].[SourceField] (
				TABLE_CATALOG
				,TABLE_SCHEMA
				,TABLE_NAME
				,COLUMN_NAME
				,ORDINAL_POSITION
				,COLUMN_DEFAULT
				,IS_NULLABLE
				,DATA_TYPE
				,CHARACTER_MAXIMUM_LENGTH
				,CHARACTER_OCTET_LENGTH
				,NUMERIC_PRECISION
				,NUMERIC_PRECISION_RADIX
				,NUMERIC_SCALE
				,DATETIME_PRECISION
				,CHARACTER_SET_CATALOG
				,CHARACTER_SET_SCHEMA
				,CHARACTER_SET_NAME
				,COLLATION_CATALOG
				,COLLATION_SCHEMA
				,COLLATION_NAME
				,DOMAIN_CATALOG
				,DOMAIN_SCHEMA
				,DOMAIN_NAME
				,DestinationTableCatalog
				,TABLE_SERVER
				)
			SELECT @ToDatabaseSource
				,TABLE_SCHEMA
				,TABLE_NAME
				,COLUMN_NAME
				,ORDINAL_POSITION
				,COLUMN_DEFAULT
				,IS_NULLABLE
				,DATA_TYPE
				,CHARACTER_MAXIMUM_LENGTH
				,CHARACTER_OCTET_LENGTH
				,NUMERIC_PRECISION
				,NUMERIC_PRECISION_RADIX
				,NUMERIC_SCALE
				,DATETIME_PRECISION
				,CHARACTER_SET_CATALOG
				,CHARACTER_SET_SCHEMA
				,CHARACTER_SET_NAME
				,COLLATION_CATALOG
				,COLLATION_SCHEMA
				,COLLATION_NAME
				,DOMAIN_CATALOG
				,DOMAIN_SCHEMA
				,DOMAIN_NAME
				,@ToDatabase
				,TABLE_SERVER
			FROM [Metadata].[SourceField]
			WHERE DestinationTableCatalog = @FromDatabase
				AND TABLE_NAME = @CurrentSourceTableNameToCopy

			PRINT 'Inserted records into [Metadata].[SourceField]'
		END
		ELSE
			PRINT '[Metadata].[SourceField] skipped'

		-- Insert meta data for PK definition
		IF NOT EXISTS (
				SELECT 1
				FROM [Metadata].[SourceField]
				WHERE DestinationTableCatalog = @ToDatabase
					AND TABLE_NAME = @CurrentSourceTableNameToCopy
				)
		BEGIN
			INSERT INTO [Metadata].[TableKeyDefinition] (
				TableCatalog
				,SchemaName
				,TableName
				,TableKeyName
				,COLUMN_NAME
				,DATA_TYPE
				,KeyType
				,KeyColumnOrder
				,IncludedColumn
				)
			SELECT @ToDatabase
				,SchemaName
				,TableName
				,TableKeyName
				,COLUMN_NAME
				,DATA_TYPE
				,KeyType
				,KeyColumnOrder
				,IncludedColumn
			FROM [Metadata].[TableKeyDefinition]
			WHERE TableCatalog = @FromDatabase
				AND TableName = @CurrentDestinationTableNameToCopy
				AND KeyType = 'PK'

			PRINT 'Inserted records into [Metadata].[TableKeyDefinition]'
		END
		ELSE
			PRINT '[Metadata].[TableKeyDefinition] skipped'

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		PRINT 'Failure'

		ROLLBACK TRANSACTION
	END CATCH
END
GO
PRINT N'Creating [Metadata].[UpdateTableKeyDefinitionTable]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	Refreshes the Primary Keys (picked from the source)
-- Example:	
/* 		
	EXECUTE [Metadata].[UpdateTableKeyDefinitionTable] @LinkedServerName = '[LOCALHOST]'
		, @SourceDatabaseName = 'Stage'
		, @SourceSchemaName = 'DataWarehouse'
		, @SourceTableName = 'Person'
		, @DestinationTableCatalog = 'DataWarehouse'
		, @DestinationTableName = 'Person'
		, @DestinationSchemaName = 'DW'
*/
--
--
-- =============================================
CREATE procedure [Metadata].[UpdateTableKeyDefinitionTable]
    @LinkedServerName nvarchar(128) ,
    @SourceDatabaseName nvarchar(128) ,
    @SourceSchemaName nvarchar(128) ,
    @SourceTableName nvarchar(128) ,
    @DestinationTableCatalog nvarchar(128) ,
    @DestinationTableName nvarchar(128) ,
    @DestinationSchemaName nvarchar(128)
as
    begin
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
        set nocount on;

        select
            *
        into
            #Metadata
        from
            [Metadata].[TableKeyDefinition]
        where
            1 = 2;

        alter table #Metadata

        drop column TableKeyDefinitionRowID;

        declare @SQLString varchar(max) = 'EXECUTE ' + @LinkedServerName + '.'
            + @SourceDatabaseName + '.dbo.sp_executesql
		N''' + 'SELECT ''''' + @DestinationTableCatalog
            + ''''' as TableCatalog, ''''' + @DestinationSchemaName
            + ''''' as SchemaName
						, ''''' + @DestinationTableName
            + ''''' as TableName, ''''' + ''
            + ''''' as TableKeyName, ccu.COLUMN_NAME
						, col.DATA_TYPE
						, ''''' + 'PK'
            + ''''' as KeyType
						, 1 as KeyColumnOrder
						, 0 as IncludedColumn
                        , ''''DefaultLocation'''' as IndexStorageLocation
                        , CAST(NULL AS nvarchar(128)) AS FilterPredicate
                        , 1 As IsAscendingOrder
						, 0 as IndexIsUnique
						, null as IndexFillFactor
				FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc         
					inner join INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE ccu ON tc.CONSTRAINT_NAME = ccu.Constraint_name
					inner join INFORMATION_SCHEMA.COLUMNS col on  ccu.TABLE_CATALOG = col.TABLE_CATALOG
																and ccu.TABLE_SCHEMA = col.TABLE_SCHEMA
																and ccu.TABLE_NAME = col.TABLE_NAME
																and ccu.COLUMN_NAME = col.COLUMN_NAME

				WHERE tc.CONSTRAINT_TYPE = ''''Primary Key''''
				    and tc.CONSTRAINT_SCHEMA = ''''' + @SourceSchemaName
            + ''''' 
					and tc.TABLE_NAME = ''''' + @SourceTableName + '''''''';

        insert  into #Metadata
                execute ( @SQLString
                       );

	/* Add indexes for extended destination fields that is marked for being indexed.
	   The index creation is made in the CreateTable procedure.
	 */
        insert  into #Metadata
                ( [TableCatalog] ,
                  [SchemaName] ,
                  [TableName] ,
                  [TableKeyName] ,
                  [COLUMN_NAME] ,
                  [DATA_TYPE] ,
                  [KeyType] ,
                  [KeyColumnOrder] ,
                  [IncludedColumn] ,
                  IndexStorageLocation ,
                  FilterPredicate ,
                  IsAscendingOrder ,
                  IndexIsUnique ,
                  IndexFillFactor
		        )
                select distinct
                    dfe.DestinationTableCatalog ,
                    dt.DestinationSchemaName ,
                    DestinationTableName ,
                    'NCIDX_' + [COLUMN_NAME] + '_' + dt.DestinationSchemaName
                    + '_' + DestinationTableName ,
                    [COLUMN_NAME] ,
                    DATA_TYPE ,
                    'NCIX' ,
                    1 ,
                    0 ,
                    IndexStorageLocation = ( select
                                                case when dfe.DestinationTableCatalog = ( select top 1
                                                              [MartEnvironmentName]
                                                              from
                                                              [Metadata].[EnvironmentVariables]
                                                              )
                                                     then ( select top 1
                                                              [DefaultMartLayerIndexStorageLocation]
                                                            from
                                                              [Metadata].[EnvironmentVariables]
                                                          )
                                                     when dfe.DestinationTableCatalog = ( select top 1
                                                              [NormEnvironmentName]
                                                              from
                                                              [Metadata].[EnvironmentVariables]
                                                              )
                                                     then ( select top 1
                                                              [DefaultNormLayerIndexStorageLocation]
                                                            from
                                                              [Metadata].[EnvironmentVariables]
                                                          )
                                                     when dfe.DestinationTableCatalog = ( select top 1
                                                              [RawEnvironmentName]
                                                              from
                                                              [Metadata].[EnvironmentVariables]
                                                              )
                                                     then ( select top 1
                                                              [DefaultRawLayerIndexStorageLocation]
                                                            from
                                                              [Metadata].[EnvironmentVariables]
                                                          )
                                                     else 'DefaultLocation'
                                                end
                                           ) ,
                    null ,
                    1 ,
                    0 ,
                    null
                from
                    Metadata.[DestinationFieldExtended] dfe
                    join Metadata.DestinationTable dt
                    on dt.DestinationTableCatalog = dfe.DestinationTableCatalog
                       and ISNULL(ApplicableTable, dt.DestinationTableName) = dt.DestinationTableName
                       and ( case when ApplicableTable is null
                                  then dt.DestinationSchemaName
                                  else dfe.DestinationSchemaName
                             end ) = dt.DestinationSchemaName
		-- Only indexes for current group (or all or if group isn´t specified) will be created
                       and ( case when dfe.GroupName = 'All'
                                       or dfe.GroupName is null then 1
                                  when dfe.GroupName = dt.GroupName then 1
                                  else 0
                             end ) = 1
                where
                    CreateColumnIndex = 1
                    and dfe.DestinationTableCatalog = @DestinationTableCatalog
                    and dt.DestinationSchemaName = @DestinationSchemaName
                    and dt.DestinationTableName = @DestinationTableName;

        begin transaction PrimaryKeyDefinitionsFromSource;

        begin try
            delete from
                [Metadata].[TableKeyDefinition]
            where
                TableCatalog = @DestinationTableCatalog
                and SchemaName = @DestinationSchemaName
                and TableName = @DestinationTableName;

            insert  into [Metadata].[TableKeyDefinition]
                    select
                        *
                    from
                        #Metadata;

            commit transaction PrimaryKeyDefinitionsFromSource;

            print '	Table [Metadata].[TableKeyDefinition] refreshed ('
                + @SourceTableName + ')';
        end try

        begin catch
            raiserror (
				'Meta data not updated'
				,16
				,1
				);

            rollback transaction PrimaryKeyDefinitionsFromSource;
        end catch;

        drop table #Metadata;
    end;
GO
PRINT N'Creating [Metadata].[UpdateMetadataReferences]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	Updates meta data references, from a given table, from a database to another
-- Example:	
/* 
	EXECUTE [Metadata].[UpdateMetadataReferences]
				@FromDatabase = 'DataMart_Branch'
				, @ToDatabase = 'DataMart'
				, @FromDatabaseSource = 'DataWarehouse_Branch'
				, @ToDatabaseSource = 'DataWarehouse'
				, @CurrentDestinationTableNameToUpdate = 'Person'
*/
--
--
-- =============================================
CREATE PROCEDURE [Metadata].[UpdateMetadataReferences] @FromDatabase NVARCHAR(128)
	,@ToDatabase NVARCHAR(128)
	,@FromDatabaseSource NVARCHAR(128)
	,@ToDatabaseSource NVARCHAR(128)
	,@CurrentDestinationTableNameToUpdate NVARCHAR(128)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRANSACTION

	BEGIN TRY
		DECLARE @CurrentSourceTableNameToUpdate NVARCHAR(128) = (
				SELECT SourceTableName
				FROM [Metadata].[DestinationTable]
				WHERE DestinationTableName = @CurrentDestinationTableNameToUpdate
					AND DestinationTableCatalog = @FromDatabase
				)
		DECLARE @CurrentSSISPackageName NVARCHAR(128) = (
				SELECT SSISPackageName
				FROM [Metadata].[DestinationTable]
				WHERE DestinationTableName = @CurrentDestinationTableNameToUpdate
					AND DestinationTableCatalog = @FromDatabase
				)

		-- Update meta data table "DestinationFieldExtended" -> Target/Source attributes
		--/*
		UPDATE [Metadata].[DestinationFieldExtended]
		SET DestinationTableCatalog = @ToDatabase
			,SourceTableCatalog = @ToDatabaseSource
		--*/
		--Select * from [Metadata].[DestinationTable]
		WHERE DestinationTableCatalog = @FromDatabase
			AND ApplicableTable = @CurrentDestinationTableNameToUpdate

		-- Update meta data table "DestinationTable" -> Target attributes
		--/*
		UPDATE [Metadata].[DestinationTable]
		SET DestinationTableCatalog = @ToDatabase
			,SourceTableCatalog = @ToDatabaseSource
		--*/
		--Select * from [Metadata].[DestinationTable]
		WHERE DestinationTableCatalog = @FromDatabase
			AND DestinationTableName = @CurrentDestinationTableNameToUpdate

		-- Update meta data table "SourceField" -> Target attributes
		--/*
		UPDATE [Metadata].[SourceField]
		SET DestinationTableCatalog = @ToDatabase
		--*/
		--Select * from [Metadata].[InferredMemberExceptionDefinition]
		WHERE DestinationTableCatalog = @FromDatabase
			AND Table_Name = @CurrentSourceTableNameToUpdate

		-- Update meta data table "TableKeyDefinition" -> Target attributes
		--/*
		UPDATE [Metadata].[TableKeyDefinition]
		SET TableCatalog = @ToDatabase
		--*/
		--Select * from [Metadata].[InferredMemberExceptionDefinition]
		WHERE TableCatalog = @FromDatabase
			AND TableName = @CurrentDestinationTableNameToUpdate

		PRINT 'CurrentSSISPackageName = ' + @CurrentSSISPackageName

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		PRINT 'Failure'

		ROLLBACK TRANSACTION
	END CATCH
END
GO
PRINT N'Creating [Metadata].[RemoveMetaData]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	Removes meta data for a current target table
-- Example:	
/* 
	EXECUTE [Metadata].[RemoveMetaData]
		@DestinationTableDataBase = 'DWH_2_Norm',
		@SourceTableDataBase = 'DWH_1_Raw',
		@DestinationTableName = 'dPerson'
*/
--
--
-- =============================================
CREATE PROCEDURE [Metadata].[RemoveMetaData] @DestinationTableDataBase NVARCHAR(128)
	,@SourceTableDataBase NVARCHAR(128)
	,@DestinationTableName NVARCHAR(128)
	,@DestinationSchemaName NVARCHAR(128)
AS
BEGIN
	-- Set database variables
	DECLARE @ToDatabase NVARCHAR(128) = @DestinationTableDataBase
		,@ToDatabaseSource NVARCHAR(128) = @SourceTableDataBase
		,@CurrentDestinationTableNameToDelete NVARCHAR(128) = @DestinationTableName
	DECLARE @CurrentSourceTableNameToUpdate NVARCHAR(128) = (
			SELECT SourceTableName
			FROM [Metadata].[DestinationTable]
			WHERE DestinationTableName = @CurrentDestinationTableNameToDelete
				AND DestinationTableCatalog = @ToDatabase
				AND DestinationSchemaName = @DestinationSchemaName
			)

	DECLARE @CurrentSourceTableSchemaToUpdate NVARCHAR(128) = (
			SELECT SourceSchemaName
			FROM [Metadata].[DestinationTable]
			WHERE DestinationTableName = @CurrentDestinationTableNameToDelete
				AND DestinationTableCatalog = @ToDatabase
				AND DestinationSchemaName = @DestinationSchemaName
			)

	DECLARE @CurrentSSISPackageName NVARCHAR(128) = (
			SELECT SSISPackageName
			FROM [Metadata].[DestinationTable]
			WHERE DestinationTableName = @CurrentDestinationTableNameToDelete
				AND DestinationTableCatalog = @ToDatabase
				AND DestinationSchemaName = @DestinationSchemaName
			)

	-- Delete meta data table "DestinationFieldExtended" -> Target/Source attributes
	--/*
	PRINT ' Deleting : DestinationFieldExtended'

	DELETE
	FROM [Metadata].[DestinationFieldExtended]
	WHERE DestinationTableCatalog = @ToDatabase
		AND SourceTableCatalog = @ToDatabaseSource
		AND DestinationSchemaName = @DestinationSchemaName
		AND ApplicableTable = @CurrentDestinationTableNameToDelete

	-- Delete meta data table "DestinationTable" -> Target attributes
	PRINT ' Deleting : DestinationTable'

	DELETE
	FROM [Metadata].[DestinationTable]
	--*/
	WHERE DestinationTableCatalog = @ToDatabase
		AND SourceTableCatalog = @ToDatabaseSource
		AND DestinationTableName = @CurrentDestinationTableNameToDelete
		AND DestinationSchemaName = @DestinationSchemaName

	-- Update meta data table "SourceField" -> Target attributes
	--/*
	PRINT ' Deleting : SourceField'

	DELETE
	FROM [Metadata].[SourceField]
	WHERE DestinationTableCatalog = @ToDatabase
		AND Table_Name = @CurrentSourceTableNameToUpdate
		AND TABLE_SCHEMA = @CurrentSourceTableSchemaToUpdate

	-- Update meta data table "TableKeyDefinition" -> Target attributes
	PRINT ' Deleting : TableKeyDefinition'

	DELETE
	FROM [Metadata].[TableKeyDefinition]
	WHERE TableCatalog = @ToDatabase
		AND TableName = @CurrentDestinationTableNameToDelete
		AND SchemaName = @DestinationSchemaName
END
GO
PRINT N'Creating [ssis].[GetPackageInfo]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE procedure [ssis].[GetPackageInfo]
    @DESTINATION_TABLE_CATALOG varchar(max) ,
    @DESTINATION_SCHEMA_NAMES varchar(max) = null ,
    @SOURCE_TABLE_NAME varchar(max) = null
as
    begin
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
        set nocount on;

        select
		-- Source
            t2.SourceServer ,
            t2.SourceTableCatalog ,
            t2.SourceSchemaName ,
            t2.SourceTableName ,
            t2.SourceName ,
            SourceSQLQuery = case t2.UseStageTable
                               when 1
                               then REPLACE(t2.SourceSQLQuery,
                                            t2.StageSourceName, t2.SourceName)
							   else t2.SourceSQLQuery
                             end ,
            t2.SourceFilterCondition
		
		-- Stage
            ,
            t2.StageTableCatalog ,
            t2.StageName ,
            t2.StageFilterCondition
		-- Destination
            ,
            t2.DestinationTableCatalog ,
            t2.DestinationSchemaName ,
            t2.DestinationTableName ,
            t2.DestinationName ,
            t2.DestinationDeleteCondition
		-- SSIS
            ,
            t2.SSISPackageName ,
            t2.SSISPackageGUID ,
            t2.SSISConfigurationFrameWorkCatalog ,
            t2.DtsConfigEnvironmentVariableName ,
            t2.CDCInstanceName ,
            t2.UseSSISLoggingFrameWork ,
            t2.SSISIncrementalLoad
		-- MISC
            ,
            t2.ContainerVariables ,
            t2.BimlType ,
            t2.UseStageTable ,
            t2.StageSchemaName ,
            t2.StageTableName ,
            t2.StageSourceTableCatalog ,
            t2.StageSourceSchemaName ,
            t2.StageSourceName ,
            t2.StageSourceSqlQuery
        from
            ( select 
	-- Source
                t1.SourceServer ,
                t1.SourceTableCatalog ,
                t1.SourceSchemaName ,
                t1.SourceTableName ,
                CONCAT(QUOTENAME(t1.SourceSchemaName), '.',
                       QUOTENAME(t1.SourceTableName)) as SourceName ,
                t1.SourceSQLQuery ,
                t1.SourceFilterCondition
		
		-- Stage
                ,
                t1.StageTableCatalog ,
                CONCAT(QUOTENAME(t1.StageSchemaName), '.',
                       QUOTENAME(t1.StageTableName)) as StageName ,
                t1.StageFilterCondition
		-- Destination
                ,
                t1.DestinationTableCatalog ,
                t1.DestinationSchemaName ,
                t1.DestinationTableName ,
                CONCAT(QUOTENAME(t1.DestinationSchemaName), '.',
                       QUOTENAME(t1.DestinationTableName)) as DestinationName ,
                t1.DestinationDeleteCondition
		-- SSIS
                ,
                t1.SSISPackageName ,
                t1.SSISPackageGUID ,
                t1.SSISConfigurationFrameWorkCatalog ,
                t1.DtsConfigEnvironmentVariableName ,
                t1.CDCInstanceName ,
                t1.UseSSISLoggingFrameWork ,
                t1.SSISIncrementalLoad
		-- MISC
                ,
                t1.ContainerVariables ,
                t1.BimlType ,
                t1.UseStageTable ,
                t1.StageSchemaName ,
                t1.StageTableName ,
                t1.StageSourceTableCatalog ,
                t1.StageSourceSchemaName ,
                CONCAT(QUOTENAME(t1.StageSourceSchemaName), '.',
                       QUOTENAME(t1.SourceTableName)) as StageSourceName ,
                StageSourceSqlQuery = case t1.UseStageTable
                                        when 1 then t1.SourceSQLQuery
                                        else null
                                      end
              from
                ( select
		-- Source
                    dt.SourceServer ,
                    SourceTableCatalog = case dt.CreateStageTable
                                           when 1 then dt.StageTableCatalog
                                           else dt.SourceTableCatalog
                                         end ,
                    SourceSchemaName = case dt.CreateStageTable
                                         when 1 then dt.StageSchemaName
                                         else dt.SourceSchemaName
                                       end ,
                    dt.SourceTableName ,
                    ssis.GetSourceSelectQuery(null, dt.SourceTableCatalog,
                                              dt.SourceSchemaName,
                                              dt.SourceTableName,
                                              dt.DestinationTableCatalog, 0,
                                              dt.SSISIncrementalLoad) SourceSQLQuery ,
                    case when ISNULL(dt.SourceFilterCondition, '') = ''
                         then ''
                         else 'Where ' + dt.SourceFilterCondition
                    end SourceFilterCondition
		
		-- Stage
                    ,
                    ISNULL(dt.StageTableCatalog, dt.DestinationTableCatalog) as StageTableCatalog ,
                    case when ISNULL(dt.StageFilterCondition, '') = '' then ''
                         else 'Where ' + dt.StageFilterCondition
                    end StageFilterCondition
		-- Destination
                    ,
                    dt.DestinationTableCatalog ,
                    dt.DestinationSchemaName ,
                    dt.DestinationTableName ,
                    dt.DestinationDeleteCondition
		-- SSIS
                    ,
                    dt.SSISPackageName ,
                    dt.SSISPackageGUID ,
                    dt.SSISConfigurationFrameWorkCatalog ,
                    dt.DtsConfigEnvironmentVariableName ,
                    dt.CDCInstanceName ,
                    dt.UseSSISLoggingFrameWork ,
                    dt.SSISIncrementalLoad
		-- MISC
                    ,
                    ssis.GetContainerVariables(dt.SourceTableCatalog,
                                               dt.DestinationTableCatalog,
                                               dt.DestinationTableName,
                                               dt.GroupName) ContainerVariables ,
                    case when dt.DestinationTableCatalog in ( select top 1
                                                              [NormEnvironmentName]
                                                             from
                                                              Metadata.EnvironmentVariables
															  union 
															  select top 1
                                                              [RawEnvironmentName]
                                                             from
                                                              Metadata.EnvironmentVariables
                                                           )
                         then CONCAT(dt.DestinationTableCatalog, dt.GroupName)
                         else dt.DestinationTableCatalog
                    end as BimlType ,
                    UseStageTable = dt.CreateStageTable ,
                    dt.StageSchemaName ,
                    dt.StageTableName ,
                    StageSourceTableCatalog = case dt.CreateStageTable
                                           when 1 then dt.SourceTableCatalog
                                           else null
                                         end ,
                    StageSourceSchemaName = case dt.CreateStageTable
                                              when 1 then dt.SourceSchemaName
                                              else null
                                            end
                  from
                    Metadata.DestinationTable dt
                  where
                    dt.CreateSSISPackage = 1
                    and dt.DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
                    and dt.SourceTableName = ISNULL(@SOURCE_TABLE_NAME,
                                                    dt.SourceTableName)
                    and exists ( select
                                    1
                                 from
                                    Metadata.SplitString(@DESTINATION_SCHEMA_NAMES,
                                                         ',') x
                                 where
                                    x.Item = dt.DestinationSchemaName )
                ) as t1
            ) as t2
        order by
            t2.SSISPackageName;
    end;
GO
PRINT N'Creating [ssis].[GetPackageInfoDMDetails]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE PROCEDURE [ssis].[GetPackageInfoDMDetails] @SOURCE_SERVER VARCHAR(max)
	,@SOURCE_CATALOG VARCHAR(max)
	,@SOURCE_SCHEMA_NAME VARCHAR(max)
	,@SOURCE_TABLE_NAME VARCHAR(max) = NULL
	,@DESTINATION_TABLE_CATALOG VARCHAR(max)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @DESTINATION_SCHEMA_NAME VARCHAR(max)
		,@DESTINATION_TABLE_NAME VARCHAR(max)

	SELECT @DESTINATION_SCHEMA_NAME = dt.DestinationSchemaName
		,@DESTINATION_TABLE_NAME = dt.DestinationTableName
	FROM Metadata.DestinationTable dt
	WHERE dt.SourceTableCatalog = @SOURCE_CATALOG
		AND dt.SourceSchemaName = @SOURCE_SCHEMA_NAME
		AND dt.SourceTableName = @SOURCE_TABLE_NAME

	SELECT
		-- SQL Merge objects
		ssis.GetSrcDstKeyCondition(dt.DestinationTableCatalog, dt.DestinationSchemaName, dt.DestinationTableName, 'AND') AS SqlTaskMergeKeyCondition
		,ssis.GetSqlTaskMergeInsertValueColumns(dt.SourceTableCatalog, dt.SourceSchemaName, dt.SourceTableName, dt.DestinationTableCatalog, 'Insert') AS SqlTaskMergeInsColumns
		,ssis.GetSqlTaskMergeInsertValueColumns(dt.SourceTableCatalog, dt.SourceSchemaName, dt.SourceTableName, dt.DestinationTableCatalog, 'Value') AS SqlTaskMergeValColumns
		,ssis.GetSqlTaskMergeDiffColumns(dt.SourceTableCatalog, dt.SourceSchemaName, dt.SourceTableName, dt.DestinationTableCatalog) AS SqlTaskMergeDiffCols
		,ssis.GetSqlTaskMergeUpdateColumns(dt.SourceTableCatalog, dt.SourceSchemaName, dt.SourceTableName, dt.DestinationTableCatalog) AS SqlTaskMergeUpdCols
		,ssis.GetSqlTaskMergeParameter(dt.SourceTableCatalog, dt.DestinationTableCatalog, dt.DestinationTableName, 'DWH_3_Fact', dt.SSISIncrementalLoad) SqlTaskMergeParameters
		, dt.SSISIncrementalLoad
		, dt.FactScdType
	FROM Metadata.DestinationTable dt
	WHERE dt.SourceTableCatalog = @SOURCE_CATALOG
		AND dt.SourceSchemaName = @SOURCE_SCHEMA_NAME
		AND dt.SourceTableName = @SOURCE_TABLE_NAME
		AND dt.DestinationTableName = @DESTINATION_TABLE_NAME
END
GO
PRINT N'Creating [ssis].[GetPackageInfoDWDetails]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE procedure [ssis].[GetPackageInfoDWDetails]
    @SOURCE_SERVER varchar(max) ,
    @SOURCE_CATALOG varchar(max) ,
    @SOURCE_SCHEMA_NAME varchar(max) ,
    @SOURCE_TABLE_NAME varchar(max) = null ,
    @DESTINATION_TABLE_CATALOG varchar(max) ,
    @UseStageTable bit = 0
as
    begin
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
        set nocount on;

        declare
            @DESTINATION_SCHEMA_NAME varchar(max) ,
            @DESTINATION_TABLE_NAME varchar(max) ,
            @_SOURCE_CATALOG varchar(max) ,
            @_SOURCE_SCHEMA_NAME varchar(max) ,
            @_SOURCE_TABLE_NAME varchar(max),
			@_IncludeHash bit = 1;

        select
            @DESTINATION_SCHEMA_NAME = dt.DestinationSchemaName ,
            @DESTINATION_TABLE_NAME = dt.DestinationTableName ,
            @_SOURCE_CATALOG = dt.SourceTableCatalog ,
            @_SOURCE_SCHEMA_NAME = dt.SourceSchemaName ,
            @_SOURCE_TABLE_NAME = dt.SourceTableName,
			@_IncludeHash = case dt.GroupName when 'Fact' then 0 else  1 end
        from
            Metadata.DestinationTable dt
        where
            1 = 1
            and ( @UseStageTable = 1
                  and dt.StageTableCatalog = @SOURCE_CATALOG
                  and dt.StageSchemaName = @SOURCE_SCHEMA_NAME
                  or ( dt.SourceTableCatalog = @SOURCE_CATALOG
                       and dt.SourceSchemaName = @SOURCE_SCHEMA_NAME
                     )
                )
			and dt.SourceTableName = @SOURCE_TABLE_NAME;

        select
		-- Execute Sql Task Add unknown member objects
            umInsValCols.InsCol as UnknownMemberInsCols ,
            umInsValCols.ValCol as UnKnownMemberValCols ,
            ssis.GetSrcDstKeyCondition(@DESTINATION_TABLE_CATALOG,
                                       @DESTINATION_SCHEMA_NAME,
                                       @DESTINATION_TABLE_NAME, 'AND') as SqlTaskKeyCondition
		-- Data Flow objects
            ,
            IdColumn.IdentityColumn as DestinationIdentityColumn ,
            FkCount.FkCount as ForeignKeyCount ,
            case @UseStageTable
              when 1
              then REPLACE(ssis.GetSourceSelectQuery(null,
                                                     dt.SourceTableCatalog,
                                                     dt.SourceSchemaName,
                                                     dt.SourceTableName,
                                                     dt.DestinationTableCatalog,
                                                     @_IncludeHash, dt.SSISIncrementalLoad),
                           CONCAT(QUOTENAME(dt.SourceSchemaName), '.',
                                  QUOTENAME(dt.SourceTableName)),
                           CONCAT(QUOTENAME(dt.StageSchemaName), '.',
                                  QUOTENAME(dt.SourceTableName)))
              else ssis.GetSourceSelectQuery(null, dt.SourceTableCatalog,
                                             dt.SourceSchemaName,
                                             dt.SourceTableName,
                                             dt.DestinationTableCatalog, @_IncludeHash,
                                             dt.SSISIncrementalLoad)
            end SourceSQLQuery 
		-- Dimension Lookup objects
            ,
            ssis.GetDimLookupSelectQuery(dt.DestinationTableCatalog,
                                         dt.DestinationSchemaName,
                                         dt.DestinationTableName, 1) DimLkpSqlQuery ,
            ssis.GetDimLookupInputColumns(dt.DestinationSchemaName,
                                          dt.DestinationTableName) as DimLkpInputCols ,
            ssis.GetDimLookupOutputColumns(dt.DestinationSchemaName,
                                           dt.DestinationTableName) as DimLkpOutputCols
		-- Derived Columns
            ,
            ssis.GetDerivedColumns(dt.SourceTableCatalog,
                                   dt.DestinationTableCatalog,
                                   dt.DestinationTableName,
                                   dt.DestinationSchemaName, 'dwInit') DCInit ,
            ssis.GetDerivedColumns(dt.SourceTableCatalog,
                                   dt.DestinationTableCatalog,
                                   dt.DestinationTableName,
                                   dt.DestinationSchemaName, 'dwInf') DCInf ,
            ssis.GetDerivedColumns(dt.SourceTableCatalog,
                                   dt.DestinationTableCatalog,
                                   dt.DestinationTableName,
                                   dt.DestinationSchemaName, 'dwNewRow') DCNewRow ,
            ssis.GetDerivedColumns(dt.SourceTableCatalog,
                                   dt.DestinationTableCatalog,
                                   dt.DestinationTableName,
                                   dt.DestinationSchemaName, 'dwNewVer') DCNewVer ,
            ssis.GetDerivedColumns(dt.SourceTableCatalog,
                                   dt.DestinationTableCatalog,
                                   dt.DestinationTableName,
                                   dt.DestinationSchemaName, 'dwError') DCError
		-- Multi Cast objects
            ,
            ssis.GetMultiCastOutputColumns(dt.DestinationTableCatalog,
                                           dt.DestinationSchemaName,
                                           dt.DestinationTableName, 'dwInfFK') MCInfFK
		-- OleDb Command objects
            ,
            ssis.GetOleDbCommandParameters(dt.SourceTableCatalog,
                                           dt.DestinationTableCatalog,
                                           dt.DestinationSchemaName,
                                           dt.DestinationTableName, 'All') as OleDbCmdParams ,
            ssis.GetOleDbCommandParameters(dt.SourceTableCatalog,
                                           dt.DestinationTableCatalog,
                                           dt.DestinationSchemaName,
                                           dt.DestinationTableName, 'dwToDate') as OleDbCmdToDateParams ,
            CONCAT('Update ', QUOTENAME(dt.DestinationSchemaName), '.',
                   QUOTENAME(dt.DestinationTableName), ' Set ',
                   ssis.GetOleDbCommandUpdateColumns(dt.SourceTableCatalog,
                                                     dt.DestinationTableCatalog,
                                                     dt.DestinationSchemaName,
                                                     dt.DestinationTableName,
                                                     'dwInfUpd'), ' Where ',
                   IdColumn.IdentityColumn, ' = ?') as OleDbCmdUpdInfSql ,
            CONCAT('Update ', QUOTENAME(dt.DestinationSchemaName), '.',
                   QUOTENAME(dt.DestinationTableName), ' Set ',
                   ssis.GetOleDbCommandUpdateColumns(dt.SourceTableCatalog,
                                                     dt.DestinationTableCatalog,
                                                     dt.DestinationSchemaName,
                                                     dt.DestinationTableName,
                                                     'dwSCD1'), ' Where ',
                   IdColumn.IdentityColumn, ' = ?') as OleDbCmdUpdSCD1Sql ,
            CONCAT('Update ', QUOTENAME(dt.DestinationSchemaName), '.',
                   QUOTENAME(dt.DestinationTableName), ' Set ',
                   ssis.GetOleDbCommandUpdateColumns(dt.SourceTableCatalog,
                                                     dt.DestinationTableCatalog,
                                                     dt.DestinationSchemaName,
                                                     dt.DestinationTableName,
                                                     'dwToDate'), ' Where ',
                   IdColumn.IdentityColumn, ' = ?') as OleDbCmdUpdToDateSql
		-- Union Error objects
            ,
            ssis.GetUnionErrorInputColumns(dt.SourceTableCatalog,
                                           dt.DestinationTableCatalog,
                                           dt.DestinationSchemaName,
                                           dt.DestinationTableName, 'dwDim') UEInputColumns
	-- Union Error objects
	, case @UseStageTable
              when 1
			  then  ssis.GetSourceSelectQuery(null, dt.SourceTableCatalog,
                                             dt.SourceSchemaName,
                                             dt.SourceTableName,
                                             dt.DestinationTableCatalog, 0,
                                             dt.SSISIncrementalLoad)
			else null end as StageSqlQuery
        from
            Metadata.DestinationTable dt
            join ( select distinct
                    ivc.Table_Catalog ,
                    ivc.Table_Schema ,
                    ivc.Table_Name ,
                    ivc.DestinationTableCatalog ,
                    ivc.DestinationSchemaName ,
                    STUFF(( select
                                ',' + COLUMN_NAME
                            from
                                [ssis].[SQLTaskAddMissingMemberInsertValueColumns] x
                            where
                                x.DestinationTableCatalog = ivc.DestinationTableCatalog
                                and x.Table_Catalog = ivc.Table_Catalog
                                and ISNULL(x.Table_Name, ivc.Table_Name) = ivc.Table_Name
                                and ISNULL(x.Table_Schema, ivc.Table_Schema) = ivc.Table_Schema
                            order by
                                ordNo ,
                                ORDINAL_POSITION
                          for
                            xml path('')
                          ), 1, 1, '') InsCol ,
                    STUFF(( select
                                ',' + ValueCol
                            from
                                [ssis].[SQLTaskAddMissingMemberInsertValueColumns] x
                            where
                                x.DestinationTableCatalog = ivc.DestinationTableCatalog
                                and x.Table_Catalog = ivc.Table_Catalog
                                and ISNULL(x.Table_Name, ivc.Table_Name) = ivc.Table_Name
                                and ISNULL(x.Table_Schema, ivc.Table_Schema) = ivc.Table_Schema
                            order by
                                ordNo ,
                                ORDINAL_POSITION
                          for
                            xml path('')
                          ), 1, 1, '') ValCol
                   from
                    [ssis].[SQLTaskAddMissingMemberInsertValueColumns] ivc
                   where
                    ISNULL(ivc.Table_Catalog, @_SOURCE_CATALOG) = @_SOURCE_CATALOG
                    and ISNULL(ivc.Table_Schema, @_SOURCE_SCHEMA_NAME) = @_SOURCE_SCHEMA_NAME
                    and ISNULL(ivc.Table_Name, @_SOURCE_TABLE_NAME) = @_SOURCE_TABLE_NAME
                    and ivc.DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
                 ) umInsValCols
            on dt.SourceTableCatalog = umInsValCols.Table_Catalog
               and dt.SourceSchemaName = umInsValCols.Table_Schema
               and dt.SourceTableName = umInsValCols.Table_Name
               and dt.DestinationTableCatalog = umInsValCols.DestinationTableCatalog
		--AND dt.DestinationSchemaName = umInsValCols.DestinationSchemaName
            left join (
		-- get the one identity column for target (SurrogateKey). 
		-- It is derived from DestinationFieldExtended table.
		-- Fact table do not have identity column, left join 
                        select
                            [COLUMN_NAME] IdentityColumn ,
                            ApplicableTable
                        from
                            [Metadata].[DestinationFieldExtended]
                        where
                            DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
                            and SourceTableCatalog = @_SOURCE_CATALOG
                            and ApplicableTable = @DESTINATION_TABLE_NAME
                            and DestinationSchemaName = @DESTINATION_SCHEMA_NAME
                            and IsIdentity = 1
                      ) IdColumn
            on 1 = 1
            left join ( select
                            COUNT(1) as FkCount
                        from
                            ssis.DimensionForeignKeyColumns fkc
                        where
                            fkc.DimensionTableCatalog = @DESTINATION_TABLE_CATALOG
                            and fkc.DimensionSchemaName = @DESTINATION_SCHEMA_NAME
                            and fkc.DimensionTableName = @DESTINATION_TABLE_NAME
                      ) FkCount
            on 1 = 1
        where
            not ValCol is null;
    end;
GO
PRINT N'Creating [ssis].[GetDWForeignKeyTables]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE PROCEDURE [ssis].[GetDWForeignKeyTables] @DimensionTableCatalog VARCHAR(max)
	,@DimensionSchemaName VARCHAR(max)
	,@DimensionFactTableName VARCHAR(max)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT ForeignKeyTableName
		,ForeignKeyColumn
		,CONCAT (
			'Lookup '
			,[ForeignKeyColumn]
			) AS LkpName
		,CONCAT (
			'Select distinct '
			,[ForeignKeyTableColumnName] + ' as ' + ForeignKeyColumn
			,' From '
			,quotename(DimensionSchemaName)
			,'.'
			,quotename(ForeignKeyTableName)
			) AS LkpSelectQuery
		, CONCAT (
			'Get Distinct '
			,[ForeignKeyColumn]
			) AS AggName
		,CONCAT (
			ForeignKeyTableName
			,' ('
			, ForeignKeyColumn
			, ')'
			) AS DerivedColumnName
	FROM [ssis].[DimensionForeignKeyColumns]
	WHERE [DimensionTableCatalog] = @DimensionTableCatalog
		AND [DimensionSchemaName] = @DimensionSchemaName
		AND [DimensionTableName] = @DimensionFactTableName
END
GO
PRINT N'Creating [ssis].[GetInferredForeignKeyDataFlow]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE PROCEDURE [ssis].[GetInferredForeignKeyDataFlow] @SourceTableCatalog VARCHAR(max)
	,@DimensionTableCatalog VARCHAR(max)
	,@DimensionSchemaName VARCHAR(max)
	,@DimensionName VARCHAR(max)
	,@ForeignKeyColumn VARCHAR(max)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @iForeignKeyCount INT
		,@ForeignKeyTable VARCHAR(max)

	SELECT @iForeignKeyCount = count(1)
	FROM ssis.DimensionForeignKeyColumns
	WHERE DimensionTableCatalog = @DimensionTableCatalog
		AND DimensionSchemaName = @DimensionSchemaName
		AND DimensionTableName = @DimensionName

	SELECT @ForeignKeyTable = TableName
	FROM Metadata.TableKeyDefinition
	WHERE TableCatalog = @DimensionTableCatalog
		AND COLUMN_NAME = @ForeignKeyColumn
		AND KeyType = 'PK'

	DECLARE @T TABLE (
		DimensionTableCatalog VARCHAR(max)
		,DimensionSchemaName VARCHAR(max)
		,DimensionTableName VARCHAR(max)
		,ForeignKeyTableName VARCHAR(max)
		,ForeignKeyColumn VARCHAR(max)
		,lkpName VARCHAR(max)
		,AggName VARCHAR(max)
		)

	INSERT INTO @T
	SELECT DimensionTableCatalog
		,DimensionSchemaName
		,DimensionTableName
		,ForeignKeyTableName
		,ForeignKeyColumn
		,CONCAT (
			'Lookup '
			,[ForeignKeyColumn]
			)
		,CONCAT (
			'Get Distinct '
			,[ForeignKeyColumn]
			)
	FROM [ssis].[DimensionForeignKeyColumns]
	WHERE [DimensionTableCatalog] = @DimensionTableCatalog
		AND [DimensionSchemaName] = @DimensionSchemaName
		AND [DimensionTableName] = @DimensionName
		AND [ForeignKeyTableName] = @ForeignKeyTable
		AND [ForeignKeyColumn] = @ForeignKeyColumn

	-- Lookup
	SELECT lkpName AS '@Name'
		,'RedirectRowsToNoMatchOutput' AS '@NoMatchBehavior'
		,'Partial' AS '@CacheMode'
		-- ,'Full' AS '@CacheMode'
		,@DimensionTableCatalog AS '@OleDbConnectionName'
		,CONCAT (
			'SELECT DISTINCT '
			,[ForeignKeyColumn]
			,' FROM '
			,quotename(t.DimensionSchemaName)
			,'.'
			,quotename(t.ForeignKeyTableName)
			) AS 'DirectInput'
		,CASE 
			WHEN @iForeignKeyCount = 1
				THEN 'DC Inferred.Output'
			ELSE CONCAT (
					'MC Inferred.'
					,[ForeignKeyColumn]
					)
			END AS 'InputPath/@OutputPathName'
		,ForeignKeyColumn AS 'Inputs/Column/@SourceColumn'
		,ForeignKeyColumn AS 'Inputs/Column/@TargetColumn'
	FROM @T t
	FOR XML path('Lookup')
END
GO
PRINT N'Creating [ssis].[GetPackageInfoRawStageDetails]...';


GO

-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE PROCEDURE [ssis].[GetPackageInfoRawStageDetails] @SOURCE_SERVER VARCHAR(MAX)
	,@SOURCE_CATALOG VARCHAR(MAX)
	,@SOURCE_SCHEMA_NAME VARCHAR(MAX)
	,@SOURCE_TABLE_NAME VARCHAR(MAX) = NULL
	,@DESTINATION_TABLE_CATALOG VARCHAR(MAX)
	,@DESTINATION_SCHEMA_NAME VARCHAR(MAX)
	,@DESTINATION_TABLE_NAME VARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT InsVal.table_Catalog AS Source_Table_Catalog
		,InsVal.table_Schema AS Source_Table_Schema
		,InsVal.table_name AS Source_Table_Name
		,InsVal.DestinationTableCatalog
		,
		-- Data Flow objects
		ssis.GetDerivedColumns(insVal.table_catalog, InsVal.DestinationTableCatalog, InsVal.table_name, 'ins', 0) DerivedCols
		,
		-- Merge to Stage objects
		ssis.GetSqlTaskMergeParameter(InsVal.table_catalog, InsVal.DestinationTableCatalog, InsVal.table_name, 'Stage', 0) SqlTaskMergeParameters
		,ssis.GetSrcDstKeyCondition(@DESTINATION_TABLE_CATALOG, @DESTINATION_SCHEMA_NAME, @DESTINATION_TABLE_NAME, 'AND') AS SqlTaskMergeKeyCondition
		,InsVal.InsertColumns SqlTaskMergeInsColumns
		,InsVal.ValueColumns SqlTaskMergeInsValues
		,UpdCols.UpdCols SqlTaskMergeUpdCols
		,DiffCols.DiffCols SqlTaskMergeDiffCols
		,DelCols.DelCols SqlTaskMergeDelCols
	FROM (
		SELECT DISTINCT table_Catalog
			,table_schema
			,table_name
			,DestinationTableCatalog
			,STUFF((
					SELECT ', ' + insert_column
					FROM [ssis].[SQLTaskMergeInsertValueColumns] x
					WHERE ISNULL(x.Table_Catalog, tic.Table_Catalog) = tic.Table_Catalog
						AND ISNULL(x.table_schema, tic.table_schema) = tic.table_schema
						AND x.DestinationTableCatalog = tic.DestinationTableCatalog
						AND ISNULL(x.Table_Name, tic.Table_Name) = tic.Table_Name
					ORDER BY ordno
						,Ordinal_position
					FOR XML PATH('')
					), 1, 1, '') InsertColumns
			,STUFF((
					SELECT ', ' + value_column
					FROM [ssis].[SQLTaskMergeInsertValueColumns] x
					WHERE ISNULL(x.Table_Catalog, tic.Table_Catalog) = tic.Table_Catalog
						AND x.DestinationTableCatalog = tic.DestinationTableCatalog
						AND ISNULL(x.Table_Name, tic.Table_Name) = tic.Table_Name
						AND ISNULL(x.table_schema, tic.table_schema) = tic.table_schema
					ORDER BY ordno
						,Ordinal_position
					FOR XML PATH('')
					), 1, 1, '') ValueColumns
		FROM [ssis].[SQLTaskMergeInsertValueColumns] tic
		WHERE ISNULL(Table_Catalog, @SOURCE_CATALOG) = @SOURCE_CATALOG
			AND DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
			AND ISNULL(Table_Name, @SOURCE_TABLE_NAME) = @SOURCE_TABLE_NAME
			AND ISNULL(table_Schema, @SOURCE_SCHEMA_NAME) = @SOURCE_SCHEMA_NAME
		) InsVal
	JOIN (
		SELECT DISTINCT udc.table_Catalog
			,udc.Table_schema
			,udc.table_name
			,udc.DestinationTableCatalog
			,STUFF((
					SELECT ',' + UpdateCols
					FROM ssis.SQLTaskMergeUpdateColumns x
					WHERE ISNULL(x.table_Catalog, udc.table_catalog) = udc.Table_Catalog
						AND ISNULL(x.table_Schema, udc.table_schema) = udc.Table_Schema
						AND ISNULL(x.table_Name, udc.table_name) = udc.Table_Name
						AND x.DestinationTableCatalog = udc.DestinationTableCatalog
					ORDER BY OrdNo
						,Ordinal_position
					FOR XML PATH('')
					), 1, 1, '') UpdCols
		FROM [ssis].[SQLTaskMergeUpdateColumns] udc
		WHERE ISNULL(Table_Catalog, @SOURCE_CATALOG) = @SOURCE_CATALOG
			AND DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
			AND ISNULL(Table_Name, @SOURCE_TABLE_NAME) = @SOURCE_TABLE_NAME
			AND ISNULL(table_Schema, @SOURCE_SCHEMA_NAME) = @SOURCE_SCHEMA_NAME
		) UpdCols ON InsVal.table_catalog = UpdCols.table_catalog
		AND InsVal.table_Schema = UpdCols.table_schema
		AND InsVal.table_name = UpdCols.table_name
		AND InsVal.DestinationTableCatalog = UpdCols.DestinationTableCatalog
	JOIN (
		SELECT DISTINCT mdc.table_Catalog
			,mdc.Table_schema
			,mdc.table_name
			,mdc.DestinationTableCatalog
			,STUFF((
					SELECT ' OR ' + DiffCols
					FROM ssis.SQLTaskMergeDiffColumns x
					WHERE x.table_Catalog = mdc.Table_Catalog
						AND x.table_Schema = mdc.Table_Schema
						AND x.table_Name = mdc.Table_Name
					FOR XML PATH('')
					), 1, 3, '') DiffCols
		FROM [ssis].[SQLTaskMergeDiffColumns] mdc
		WHERE ISNULL(Table_Catalog, @SOURCE_CATALOG) = @SOURCE_CATALOG
			AND DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
			AND ISNULL(Table_Name, @SOURCE_TABLE_NAME) = @SOURCE_TABLE_NAME
			AND ISNULL(table_Schema, @SOURCE_SCHEMA_NAME) = @SOURCE_SCHEMA_NAME
		) DiffCols ON InsVal.table_Catalog = DiffCols.table_Catalog
		AND InsVal.table_Schema = DiffCols.table_Schema
		AND InsVal.table_name = DiffCols.table_name
		AND InsVal.destinationtablecatalog = DiffCols.destinationtablecatalog
	JOIN (
		-- för delete finns bara null värden för alla fält förutom destinationTableCatalog
		SELECT DISTINCT mdelc.table_Catalog
			,mdelc.Table_schema
			,mdelc.table_name
			,mdelc.DestinationTableCatalog
			,STUFF((
					SELECT ',' + DeleteCols
					FROM [ssis].[SQLTaskMergeDeleteColumns] x
					WHERE x.DestinationTableCatalog = mdelc.DestinationTableCatalog
					ORDER BY ordinal_position
					FOR XML PATH('')
					), 1, 1, '') DelCols
		FROM [ssis].[SQLTaskMergeDeleteColumns] mdelc
		WHERE DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
		) DelCols ON InsVal.destinationtablecatalog = DelCols.destinationtablecatalog
END
GO
PRINT N'Creating [ssis].[GetPackageInfoDWDetails_dbg]...';


GO

-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE procedure [ssis].[GetPackageInfoDWDetails_dbg]
    @SOURCE_SERVER varchar(max) ,
    @SOURCE_CATALOG varchar(max) ,
    @SOURCE_SCHEMA_NAME varchar(max) ,
    @SOURCE_TABLE_NAME varchar(max) = null ,
    @DESTINATION_TABLE_CATALOG varchar(max) ,
    @UseStageTable bit = 0
as
    begin
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
        set nocount on;

        declare
            @DESTINATION_SCHEMA_NAME varchar(max) ,
            @DESTINATION_TABLE_NAME varchar(max) ,
            @_SOURCE_CATALOG varchar(max) ,
            @_SOURCE_SCHEMA_NAME varchar(max) ,
            @_SOURCE_TABLE_NAME varchar(max);

        select
            @DESTINATION_SCHEMA_NAME = dt.DestinationSchemaName ,
            @DESTINATION_TABLE_NAME = dt.DestinationTableName ,
            @_SOURCE_CATALOG = dt.SourceTableCatalog ,
            @_SOURCE_SCHEMA_NAME = dt.SourceSchemaName ,
            @_SOURCE_TABLE_NAME = dt.SourceTableName
        from
            Metadata.DestinationTable dt
        where
            1 = 1
            and ( @UseStageTable = 1
                  and dt.StageTableCatalog = @SOURCE_CATALOG
                  and dt.StageSchemaName = @SOURCE_SCHEMA_NAME
                  or ( dt.SourceTableCatalog = @SOURCE_CATALOG
                       and dt.SourceSchemaName = @SOURCE_SCHEMA_NAME
                     )
                )
			and dt.SourceTableName = @SOURCE_TABLE_NAME;

        select
		-- Execute Sql Task Add unknown member objects
            umInsValCols.InsCol as UnknownMemberInsCols ,
            umInsValCols.ValCol as UnKnownMemberValCols ,
            ssis.GetSrcDstKeyCondition(@DESTINATION_TABLE_CATALOG,
                                       @DESTINATION_SCHEMA_NAME,
                                       @DESTINATION_TABLE_NAME, 'AND') as SqlTaskKeyCondition
		-- Data Flow objects
            ,
            IdColumn.IdentityColumn as DestinationIdentityColumn ,
            FkCount.FkCount as ForeignKeyCount ,
            case @UseStageTable
              when 1
              then REPLACE(ssis.GetSourceSelectQuery(null,
                                                     dt.SourceTableCatalog,
                                                     dt.SourceSchemaName,
                                                     dt.SourceTableName,
                                                     dt.DestinationTableCatalog,
                                                     1, dt.SSISIncrementalLoad),
                           CONCAT(QUOTENAME(dt.SourceSchemaName), '.',
                                  QUOTENAME(dt.SourceTableName)),
                           CONCAT(QUOTENAME(dt.StageSchemaName), '.',
                                  QUOTENAME(dt.SourceTableName)))
              else ssis.GetSourceSelectQuery(null, dt.SourceTableCatalog,
                                             dt.SourceSchemaName,
                                             dt.SourceTableName,
                                             dt.DestinationTableCatalog, 1,
                                             dt.SSISIncrementalLoad)
            end SourceSQLQuery 
		-- Dimension Lookup objects
            ,
            ssis.GetDimLookupSelectQuery(dt.DestinationTableCatalog,
                                         dt.DestinationSchemaName,
                                         dt.DestinationTableName, 1) DimLkpSqlQuery ,
            ssis.GetDimLookupInputColumns(dt.DestinationSchemaName,
                                          dt.DestinationTableName) as DimLkpInputCols ,
            ssis.GetDimLookupOutputColumns(dt.DestinationSchemaName,
                                           dt.DestinationTableName) as DimLkpOutputCols
		-- Derived Columns
            ,
            ssis.GetDerivedColumns(dt.SourceTableCatalog,
                                   dt.DestinationTableCatalog,
                                   dt.DestinationTableName,
                                   dt.DestinationSchemaName, 'dwInit') DCInit ,
            ssis.GetDerivedColumns(dt.SourceTableCatalog,
                                   dt.DestinationTableCatalog,
                                   dt.DestinationTableName,
                                   dt.DestinationSchemaName, 'dwInf') DCInf ,
            ssis.GetDerivedColumns(dt.SourceTableCatalog,
                                   dt.DestinationTableCatalog,
                                   dt.DestinationTableName,
                                   dt.DestinationSchemaName, 'dwNewRow') DCNewRow ,
            ssis.GetDerivedColumns(dt.SourceTableCatalog,
                                   dt.DestinationTableCatalog,
                                   dt.DestinationTableName,
                                   dt.DestinationSchemaName, 'dwNewVer') DCNewVer ,
            ssis.GetDerivedColumns(dt.SourceTableCatalog,
                                   dt.DestinationTableCatalog,
                                   dt.DestinationTableName,
                                   dt.DestinationSchemaName, 'dwError') DCError
		-- Multi Cast objects
            ,
            ssis.GetMultiCastOutputColumns(dt.DestinationTableCatalog,
                                           dt.DestinationSchemaName,
                                           dt.DestinationTableName, 'dwInfFK') MCInfFK
										   ,dt.DestinationTableCatalog,
                                           dt.DestinationSchemaName,
                                           dt.DestinationTableName
		-- OleDb Command objects
            ,
            ssis.GetOleDbCommandParameters(dt.SourceTableCatalog,
                                           dt.DestinationTableCatalog,
                                           dt.DestinationSchemaName,
                                           dt.DestinationTableName, 'All') as OleDbCmdParams ,
            ssis.GetOleDbCommandParameters(dt.SourceTableCatalog,
                                           dt.DestinationTableCatalog,
                                           dt.DestinationSchemaName,
                                           dt.DestinationTableName, 'dwToDate') as OleDbCmdToDateParams ,
            CONCAT('Update ', QUOTENAME(dt.DestinationSchemaName), '.',
                   QUOTENAME(dt.DestinationTableName), ' Set ',
                   ssis.GetOleDbCommandUpdateColumns(dt.SourceTableCatalog,
                                                     dt.DestinationTableCatalog,
                                                     dt.DestinationSchemaName,
                                                     dt.DestinationTableName,
                                                     'dwInfUpd'), ' Where ',
                   IdColumn.IdentityColumn, ' = ?') as OleDbCmdUpdInfSql ,
            CONCAT('Update ', QUOTENAME(dt.DestinationSchemaName), '.',
                   QUOTENAME(dt.DestinationTableName), ' Set ',
                   ssis.GetOleDbCommandUpdateColumns(dt.SourceTableCatalog,
                                                     dt.DestinationTableCatalog,
                                                     dt.DestinationSchemaName,
                                                     dt.DestinationTableName,
                                                     'dwSCD1'), ' Where ',
                   IdColumn.IdentityColumn, ' = ?') as OleDbCmdUpdSCD1Sql ,
            CONCAT('Update ', QUOTENAME(dt.DestinationSchemaName), '.',
                   QUOTENAME(dt.DestinationTableName), ' Set ',
                   ssis.GetOleDbCommandUpdateColumns(dt.SourceTableCatalog,
                                                     dt.DestinationTableCatalog,
                                                     dt.DestinationSchemaName,
                                                     dt.DestinationTableName,
                                                     'dwToDate'), ' Where ',
                   IdColumn.IdentityColumn, ' = ?') as OleDbCmdUpdToDateSql
		-- Union Error objects
            ,
            ssis.GetUnionErrorInputColumns(dt.SourceTableCatalog,
                                           dt.DestinationTableCatalog,
                                           dt.DestinationSchemaName,
                                           dt.DestinationTableName, 'dwDim') UEInputColumns
	-- Union Error objects
	, case @UseStageTable
              when 1
			  then  ssis.GetSourceSelectQuery(null, dt.SourceTableCatalog,
                                             dt.SourceSchemaName,
                                             dt.SourceTableName,
                                             dt.DestinationTableCatalog, 1,
                                             dt.SSISIncrementalLoad)
			else null end as StageSqlQuery
        from
            Metadata.DestinationTable dt
            join ( select distinct
                    ivc.Table_Catalog ,
                    ivc.Table_Schema ,
                    ivc.Table_Name ,
                    ivc.DestinationTableCatalog ,
                    ivc.DestinationSchemaName ,
                    STUFF(( select
                                ',' + COLUMN_NAME
                            from
                                [ssis].[SQLTaskAddMissingMemberInsertValueColumns] x
                            where
                                x.DestinationTableCatalog = ivc.DestinationTableCatalog
                                and x.Table_Catalog = ivc.Table_Catalog
                                and ISNULL(x.Table_Name, ivc.Table_Name) = ivc.Table_Name
                                and ISNULL(x.Table_Schema, ivc.Table_Schema) = ivc.Table_Schema
                            order by
                                ordNo ,
                                ORDINAL_POSITION
                          for
                            xml path('')
                          ), 1, 1, '') InsCol ,
                    STUFF(( select
                                ',' + ValueCol
                            from
                                [ssis].[SQLTaskAddMissingMemberInsertValueColumns] x
                            where
                                x.DestinationTableCatalog = ivc.DestinationTableCatalog
                                and x.Table_Catalog = ivc.Table_Catalog
                                and ISNULL(x.Table_Name, ivc.Table_Name) = ivc.Table_Name
                                and ISNULL(x.Table_Schema, ivc.Table_Schema) = ivc.Table_Schema
                            order by
                                ordNo ,
                                ORDINAL_POSITION
                          for
                            xml path('')
                          ), 1, 1, '') ValCol
                   from
                    [ssis].[SQLTaskAddMissingMemberInsertValueColumns] ivc
                   where
                    ISNULL(ivc.Table_Catalog, @_SOURCE_CATALOG) = @_SOURCE_CATALOG
                    and ISNULL(ivc.Table_Schema, @_SOURCE_SCHEMA_NAME) = @_SOURCE_SCHEMA_NAME
                    and ISNULL(ivc.Table_Name, @_SOURCE_TABLE_NAME) = @_SOURCE_TABLE_NAME
                    and ivc.DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
                 ) umInsValCols
            on dt.SourceTableCatalog = umInsValCols.Table_Catalog
               and dt.SourceSchemaName = umInsValCols.Table_Schema
               and dt.SourceTableName = umInsValCols.Table_Name
               and dt.DestinationTableCatalog = umInsValCols.DestinationTableCatalog
		--AND dt.DestinationSchemaName = umInsValCols.DestinationSchemaName
            left join (
		-- get the one identity column for target (SurrogateKey). 
		-- It is derived from DestinationFieldExtended table.
		-- Fact table do not have identity column, left join 
                        select
                            [COLUMN_NAME] IdentityColumn ,
                            ApplicableTable
                        from
                            [Metadata].[DestinationFieldExtended]
                        where
                            DestinationTableCatalog = @DESTINATION_TABLE_CATALOG
                            and SourceTableCatalog = @_SOURCE_CATALOG
                            and ApplicableTable = @DESTINATION_TABLE_NAME
                            and DestinationSchemaName = @DESTINATION_SCHEMA_NAME
                            and IsIdentity = 1
                      ) IdColumn
            on 1 = 1
            left join ( select
                            COUNT(1) as FkCount
                        from
                            ssis.DimensionForeignKeyColumns fkc
                        where
                            fkc.DimensionTableCatalog = @DESTINATION_TABLE_CATALOG
                            and fkc.DimensionSchemaName = @DESTINATION_SCHEMA_NAME
                            and fkc.DimensionTableName = @DESTINATION_TABLE_NAME
                      ) FkCount
            on 1 = 1
        where
            not ValCol is null;
    end;
GO
PRINT N'Creating [Metadata].[UpdateDestinationTableTable]...';


GO

-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	Refreshes meta data for the current table, from given source
-- Example:	
--
--
-- =============================================
CREATE procedure [Metadata].[UpdateDestinationTableTable] @LinkedServerName varchar(50)
	,@SourceDatabaseName nvarchar(128)
	,@SourceTableName nvarchar(128)
	,@SourceSchemaName nvarchar(128)
	,@DestinationTableCatalog nvarchar(128)
	,@DestinationSchemaName nvarchar(128)
	,@DestinationTableName nvarchar(128)
	,@CorrespondingSSISPackageName nvarchar(128)
	,@CreateTableInDatabase tinyint
	,@CreateChecksumColumns bit
	,@CreateIndexesForChecksumColumns bit
	,@CreateSSISPackage tinyint
	,@CDCInstanceName nvarchar(128)
	,@CompressionType nvarchar(50) = 'PAGE'
	,@UpdateTableKeyDefinitions bit = 0
	,@UpdateDestinationTable bit = 0
	,@UpdateSourceFieldTable bit = 1
	,@GroupName nvarchar(128) = null
	,@SSISIncrementalLoad bit = 0
	,@SourceServer nvarchar(128) = null
	,@CreateStageTable bit = 0
	,@StageTableCatalog varchar(128) = null
	,@StageSchemaName varchar(128) = null
	,@StageTableName varchar(128) = null
	,@ColumnNamesInFirstDataRow bit = null
	,@HeaderRowsToSkip smallint = null
	,@DataRowsToSkip smallint = null
	,@FlatFileType varchar(20) = null
	,@HeaderRowDelimiter varchar(5) = null
	,@RowDelimiter varchar(5) = null
	,@ColumnDelimiter varchar(10) = null
	,@TextQualifier varchar(10) = null
	,@IsUnicode bit = null
	,@DestinationDeleteCondition varchar(128) = null
	,@IsPartitioned bit = 0
	,@PartitionFunctionName nvarchar(128) = null
	,@PartitionSchemeName nvarchar(128) = null
	,@PartitionKeyColumnName nvarchar(128) = null
	,@PartitionETLStrategy nvarchar(128) = 'INSERT'
	,@FactScdType tinyint = null
as
begin
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRANSACTION ActivateTablesForDestinations

	begin try
		IF (@UpdateSourceFieldTable = 1)
		BEGIN
			DECLARE @ExecString VARCHAR(1000) = 'EXECUTE [Metadata].[UpdateSourceFieldTable] @LinkedServerName = ' + @LinkedServerName + '
									, @SourceDatabaseName = ' + @SourceDatabaseName + '
									, @SourceSchemaName = ' + @SourceSchemaName + '
									, @SourceTableName=' + @SourceTableName + '
									, @DestinationTableCatalog = ' + @DestinationTableCatalog + '
									, @SourceServer = ' + @SourceServer

			RAISERROR (
					@ExecString
					,10
					,1
					)
			WITH NOWAIT

			EXECUTE [Metadata].[UpdateSourceFieldTable] @LinkedServerName = @LinkedServerName
				,@SourceDatabaseName = @SourceDatabaseName
				,@SourceSchemaName = @SourceSchemaName
				,@SourceTableName = @SourceTableName
				,@DestinationTableCatalog = @DestinationTableCatalog
				,@SourceServer = @SourceServer

			print 'Table [Metadata].[RefreshMetadataFieldsFromSource] handled.' + CHAR(10) + '--- No more actions required ---' + CHAR(10)
		end

		IF (@UpdateDestinationTable = 1)
		BEGIN
			-- Change 2013-05-30 Jukka Askvinge
			IF EXISTS (
					SELECT 1
					FROM Metadata.DestinationTable
					WHERE SourceTableCatalog = @SourceDatabaseName
						AND SourceTableName = @SourceTableName
						AND SourceSchemaName = @SourceSchemaName
						AND DestinationTableCatalog = @DestinationTableCatalog
						AND DestinationTableName = @DestinationTableName
						AND DestinationSchemaName = @DestinationSchemaName
						AND (
							@SourceServer IS NULL
							OR SourceServer = @SourceServer
							)
					)
			BEGIN
				UPDATE Metadata.DestinationTable
				SET [SSISPackageName] = @CorrespondingSSISPackageName
					,[CreateTable] = @CreateTableInDatabase
					,[CreateChecksumColumns] = @CreateChecksumColumns
					,[CreateChecksumIndexes] = @CreateIndexesForChecksumColumns
					,[CreateSSISPackage] = @CreateSSISPackage
					,[CDCInstanceName] = @CDCInstanceName
					,[CompressionType] = @CompressionType
					,[GroupName] = isnull(@GroupName, [GroupName])
					,[SSISIncrementalLoad] = isnull(@SSISIncrementalLoad, [SSISIncrementalLoad])
					,[SourceServer] = isnull(@SourceServer, [SourceServer])
					,UserNameUpdated = SYSTEM_USER
					,DateTimeUpdatedUTC = GETUTCDATE()
					,[StageTableCatalog] = @StageTableCatalog
					,[StageSchemaName] = @StageSchemaName
					,[StageTableName] = @StageTableName
					,CreateStageTable = @CreateStageTable
					,DestinationDeleteCondition = isnull(@DestinationDeleteCondition, DestinationDeleteCondition)
					,IsPartitioned = @IsPartitioned
					,PartitionFunctionName = @PartitionFunctionName
					,PartitionSchemeName = @PartitionSchemeName
					,PartitionKeyColumnName = @PartitionKeyColumnName
					,PartitionETLStrategy = @PartitionETLStrategy
					,FactScdType = @FactScdType
				WHERE SourceTableCatalog = @SourceDatabaseName
					AND SourceTableName = @SourceTableName
					AND SourceSchemaName = @SourceSchemaName
					AND DestinationTableCatalog = @DestinationTableCatalog
					AND DestinationTableName = @DestinationTableName
					AND DestinationSchemaName = @DestinationSchemaName
					AND (
						@SourceServer IS NULL
						OR SourceServer = @SourceServer
						)

				--and SourceServer = isnull(@SourceServer, SourceServer)
				print 'Update of Metadata.DestinationTable made (' + CAST(@@ROWCOUNT as nvarchar(10)) + ' rows)'
			end
			else
			begin
				insert into Metadata.DestinationTable (
					[SourceTableCatalog]
					,[SourceSchemaName]
					,[SourceTableName]
					,[DestinationTableCatalog]
					,[DestinationSchemaName]
					,[DestinationTableName]
					,[SSISPackageName]
					,[CreateTable]
					,[CreateChecksumColumns]
					,[CreateChecksumIndexes]
					,[CreateSSISPackage]
					,[CDCInstanceName]
					,[CompressionType]
					,[GroupName]
					,[SSISIncrementalLoad]
					,SourceServer
					,[StageTableCatalog]
					,[StageSchemaName]
					,[StageTableName]
					,CreateStageTable
					,DestinationDeleteCondition
					,IsPartitioned
					,PartitionFunctionName
					,PartitionSchemeName
					,PartitionKeyColumnName
					,PartitionETLStrategy
					,FactScdType
					)
				values (
					@SourceDatabaseName
					,@SourceSchemaName
					,@SourceTableName
					,@DestinationTableCatalog
					,@DestinationSchemaName
					,@DestinationTableName
					,@CorrespondingSSISPackageName
					,@CreateTableInDatabase
					,@CreateChecksumColumns
					,@CreateIndexesForChecksumColumns
					,@CreateSSISPackage
					,@CDCInstanceName
					,@CompressionType
					,ISNULL(@GroupName, 'All')
					,@SSISIncrementalLoad
					,@SourceServer
					,@StageTableCatalog
					,@StageSchemaName
					,@StageTableName
					,@CreateStageTable
					,@DestinationDeleteCondition
					,@IsPartitioned
					,@PartitionFunctionName
					,@PartitionSchemeName
					,@PartitionKeyColumnName
					,@PartitionETLStrategy
					,@FactScdType
					)
			end

			print 'Table [Metadata].[DestinationTable] handled.' + CHAR(10) + '--- No more actions required ---' + CHAR(10)
		end

		IF (@UpdateTableKeyDefinitions = 1)
		BEGIN
			EXECUTE [Metadata].[UpdateTableKeyDefinitionTable] @LinkedServerName = @LinkedServerName
				,@SourceDatabaseName = @SourceDatabaseName
				,@SourceSchemaName = @SourceSchemaName
				,@SourceTableName = @SourceTableName
				,@DestinationTableCatalog = @DestinationTableCatalog
				,@DestinationTableName = @DestinationTableName
				,@DestinationSchemaName = @DestinationSchemaName

			PRINT 'Table [Metadata].[TableKeyDefinition] handled.'
			PRINT '--- Actions required ---'
			PRINT '-- 1. Append extra column definitions for the primary key (to [Metadata].[TableKeyDefinition]). For example "InventoryDate" for "rInventSum"'
			print '-- 2. Set sort order for the definition of the Primary key -> "KeyColumnOrder" (in table [Metadata].[TableKeyDefinition])' + CHAR(10)
		end

		DECLARE @ExecuteString VARCHAR(max)

		SET @ExecuteString = 'EXECUTE [Metadata].[CreateTable] @DestinationTableName = ''' + @DestinationTableName + '''' + ', @DestinationTableCatalog = ''' + @DestinationTableCatalog + '''' + ', @DestinationSchemaName = ''' + @DestinationSchemaName + ''''

		PRINT '--- Actions required ---'
		PRINT 'Creation of table ' + @DestinationTableName + ' needs to be handled' + CHAR(10) + 'Execute following script after actions needed above:'
		PRINT (@ExecuteString)

		if (@ColumnNamesInFirstDataRow is not null)
		begin
			insert into Metadata.SourceFile (
				[SourceTableCatalog]
				,[SourceSchemaName]
				,[SourceTableName]
				,[ColumnNamesInFirstDataRow]
				,[HeaderRowsToSkip]
				,[DataRowsToSkip]
				,[FlatFileType]
				,[HeaderRowDelimiter]
				,[RowDelimiter]
				,[ColumnDelimiter]
				,[TextQualifier]
				,[IsUnicode]
				)
			values (
				@SourceDatabaseName
				,@SourceSchemaName
				,@SourceTableName
				,@ColumnNamesInFirstDataRow
				,@HeaderRowsToSkip
				,@DataRowsToSkip
				,@FlatFileType
				,@HeaderRowDelimiter
				,@RowDelimiter
				,@ColumnDelimiter
				,@TextQualifier
				,@IsUnicode
				)

			print 'Table [Metadata].[SourceFile] handled.' + CHAR(10) + '--- No more actions required ---' + CHAR(10)
		end

		commit transaction ActivateTablesForDestinations
	end try

	begin catch
		declare @ErrorMessage varchar(max) = 'No Activation of table ' + @DestinationTableName + ' was made. Error message:' + CHAR(10) + ERROR_MESSAGE()

		raiserror (
				@ErrorMessage
				,16
				,1
				)

		rollback transaction ActivateTablesForDestinations
	end catch
end
GO
PRINT N'Creating [Metadata].[CreateTableWithFullConfig]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
-- Example:	
--
--
-- =============================================
CREATE PROCEDURE [Metadata].[CreateTableWithFullConfig] @pSourceDatabaseName VARCHAR(50)
	,@pSourceTableName VARCHAR(50)
	,@pSourceSchemaName VARCHAR(50)
	,@pDestinationTableCatalog VARCHAR(50)
	,@pDestinationSchemaName VARCHAR(50)
	,@pDestinationTableName VARCHAR(50)
	,@pSourceFilterCondition VARCHAR(50)
	,@pSSISPackageName VARCHAR(50)
	,@pSSISGroupName VARCHAR(50) = 'All'
	,@pCreateStage BIT = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	/* 1. Create table in metadata.DestinationTable. source and destination info ssis info */
	EXECUTE [Metadata].[UpdateDestinationTableTable] @LinkedServerName = NULL
		,@SourceDatabaseName = @pSourceDatabaseName
		,@SourceTableName = @pSourceTableName
		,@SourceSchemaName = @pSourceSchemaName
		,@DestinationTableCatalog = @pDestinationTableCatalog
		,@DestinationSchemaName = @pDestinationSchemaName
		,@DestinationTableName = @pDestinationTableName
		,@CorrespondingSSISPackageName = @pSSISPackageName
		,@GroupName = @pSSISGroupName
		,@CreateTableInDatabase = 1 -- IF TABLE EXISTS, IT WILL BE DROPPED AND RECREATEAD
		,@CreateChecksumColumns = 0
		,@CreateIndexesForChecksumColumns = 0
		,@CreateSSISPackage = 1
		,@CDCInstanceName = NULL
		,@CompressionType = 'PAGE'
		,@UpdateTableKeyDefinitions = 1
		,@UpdateDestinationTable = 1

	/* 2. Update landing area (Raw) information. if set raw table will be created.
		Apply source filter condition		  
		*/
	IF @pCreateStage = 1
	BEGIN
		UPDATE Metadata.DestinationTable
		SET StageTableCatalog = 'Raw'
			,SourceFilterCondition = @pSourceFilterCondition
			,StageSchemaName = @pDestinationSchemaName
			,StageTableName = @pDestinationTableName
			,CreateStageTable = 1
		WHERE SourceTableName = @pSourceTableName
	END

	/* 3. Insert data field information original proc was updated due to no linked server*/
	EXEC [Metadata].[UpdateSourceFieldTable] @LinkedServerName = NULL
		,@SourceDatabaseName = @pSourceDatabaseName
		,@SourceSchemaName = @pSourceSchemaName
		,@SourceTableName = @pSourceTableName
		,@DestinationTableCatalog = @pDestinationTableCatalog
		,@SourceServer = NULL

	/* 4. Insert primary key information.*/
	EXEC [Metadata].[UpdateTableKeyDefinitionTable] @LinkedServerName = NULL
		,@SourceDatabaseName = @pSourceDatabaseName
		,@SourceSchemaName = @pSourceSchemaName
		,@SourceTableName = @pSourceTableName
		,@DestinationTableCatalog = @pDestinationTableCatalog
		,@DestinationTableName = @pDestinationTableName
		,@DestinationSchemaName = @pDestinationSchemaName

	/* 5. Create table(s)*/
	EXEC [Metadata].[CreateTable] @pDestinationTableName
		,@pDestinationTableCatalog
		,@pDestinationSchemaName
END
GO
PRINT N'Creating [Metadata].[ReGenerateTable]...';


GO
-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	Re-creates database table from metadata
-- Example:	
/*	
	EXECUTE [DevelopmentFrameworkConfig].[Metadata].[ReGenerateTable]
				@_DestinationTableCatalog = 'DataWarehouse'
				, @_DestinationTableName = 'dPersonTradedoublerTeam'
*/
--
--
-- =============================================
CREATE PROCEDURE [Metadata].[ReGenerateTable] @_DestinationTableCatalog NVARCHAR(128)
	,@_LinkedServerName NVARCHAR(128) = '[LOCALHOST]'
	,@_DestinationTableName NVARCHAR(128)
	,@_DestinationSchemaName NVARCHAR(128)
	,@UpdateSourceFields BIT = 1
	,@VersionComment VARCHAR(128)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRANSACTION ReGenerateTable

	BEGIN TRY
		-- Generering av tabeller och metadata för EDWRaw_BIML
		DECLARE @TABLE_CATALOG NVARCHAR(128)
			,@TABLE_SCHEMA NVARCHAR(128)
			,@TABLE_NAME NVARCHAR(128)
			,@_SSISPackageName NVARCHAR(128)

		DECLARE cTemp CURSOR
		FOR
		SELECT SourceTableCatalog AS TABLE_CATALOG
			,SourceSchemaName AS TABLE_SCHEMA
			,SourceTableName AS TABLE_NAME
			,DestinationTableName
			,SSISPackageName
		FROM [Metadata].[DestinationTable] WITH (NOLOCK)
		WHERE DestinationTableCatalog = @_DestinationTableCatalog
			AND CreateTable = 1
			AND DestinationTableName LIKE @_DestinationTableName
			AND DestinationSchemaName LIKE @_DestinationSchemaName
		ORDER BY 4

		OPEN cTemp

		FETCH NEXT
		FROM cTemp
		INTO @TABLE_CATALOG
			,@TABLE_SCHEMA
			,@TABLE_NAME
			,@_DestinationTableName
			,@_SSISPackageName

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXECUTE [Metadata].[UpdateDestinationTableTable] @LinkedServerName = @_LinkedServerName
				,@SourceDatabaseName = @TABLE_CATALOG
				,@SourceTableName = @TABLE_NAME
				,@SourceSchemaName = @TABLE_SCHEMA
				,@DestinationTableCatalog = @_DestinationTableCatalog
				,@DestinationSchemaName = @_DestinationSchemaName
				,@DestinationTableName = @_DestinationTableName
				,@CreateSSISPackage = 1
				-- do not change parameters below
				,@CorrespondingSSISPackageName = @_SSISPackageName
				,@CreateTableInDatabase = 0
				,@CreateChecksumColumns = 0
				,@CDCInstanceName = NULL
				,@CreateIndexesForChecksumColumns = 0
				,@UpdateTableKeyDefinitions = 0
				,@UpdateDestinationTable = 0
				,@UpdateSourceFieldTable = @UpdateSourceFields

			RAISERROR (
					'[Metadata].[UpdateDestinationTableTable] finished successfully'
					,10
					,1
					)
			WITH NOWAIT

			EXECUTE [Metadata].[CreateTable] @DestinationTableName = @_DestinationTableName
				,@DestinationTableCatalog = @_DestinationTableCatalog
				,@DestinationSchemaName = @_DestinationSchemaName

			DECLARE @Msg NVARCHAR(200) = @_DestinationTableName + ' tabell skapad'

			RAISERROR (
					@Msg
					,10
					,1
					)
			WITH NOWAIT

			INSERT INTO [Metadata].DestinationTableLog (
				SourceTableCatalog
				,SourceSchemaName
				,SourceTableName
				,DestinationTableCatalog
				,DestinationSchemaName
				,DestinationTableName
				,VersionComment
				,UserNameInserted
				,DateTimeInsertedUTC
				)
			VALUES (
				@TABLE_CATALOG
				,@TABLE_SCHEMA
				,@TABLE_NAME
				,@_DestinationTableCatalog
				,@_DestinationSchemaName
				,@_DestinationTableName
				,@VersionComment
				,SYSTEM_USER
				,GetUTCDate()
				)

			FETCH NEXT
			FROM cTemp
			INTO @TABLE_CATALOG
				,@TABLE_SCHEMA
				,@TABLE_NAME
				,@_DestinationTableName
				,@_SSISPackageName
		END

		CLOSE cTemp

		DEALLOCATE cTemp

		COMMIT TRANSACTION ReGenerateTable
	END TRY

	BEGIN CATCH
		CLOSE cTemp

		DEALLOCATE cTemp

		ROLLBACK TRANSACTION ReGenerateTable;
		THROW ;
	END CATCH
END
GO
PRINT N'Creating [Metadata].[RemoveMultipleMetaDataObject]...';


GO
CREATE PROCEDURE Metadata.RemoveMultipleMetaDataObject
    @SourceSchema VARCHAR(50)
   ,@DestinationTableCatalog VARCHAR(50)
AS

--EXEC Metadata.RemoveMultipleMetaDataObject 'Norm', 'DWH_2_Norm'

    DECLARE @psource_DB NVARCHAR(50)
       ,@pdest_schema NVARCHAR(50)
       ,@pdest_Table NVARCHAR(50)
       	 
        
        
    DECLARE SourceTables CURSOR FAST_FORWARD READ_ONLY
    FOR
        SELECT  dt.SourceTableCatalog
               ,dt.DestinationSchemaName
               ,dt.DestinationTableName
        FROM    Metadata.DestinationTable dt
        WHERE   dt.SourceSchemaName LIKE @SourceSchema + '%' AND dt.DestinationTableCatalog = @DestinationTableCatalog
        
    OPEN SourceTables;
        
    FETCH NEXT FROM SourceTables INTO @psource_DB, @pdest_schema, @pdest_Table
                 

    WHILE @@FETCH_STATUS = 0
        BEGIN
            
		  PRINT 'EXEC Metadata.RemoveMetaData @DestinationTableDataBase = ' + @DestinationTableCatalog + ',
                @SourceTableDataBase = ' + @psource_DB +',
                @DestinationTableName = '+ @pdest_Table + ',
                @DestinationSchemaName = ' + @pdest_schema + ''

            EXEC Metadata.RemoveMetaData @DestinationTableDataBase = @DestinationTableCatalog,
                @SourceTableDataBase = @psource_DB,
                @DestinationTableName = @pdest_Table,
                @DestinationSchemaName = @pdest_schema
        
            FETCH NEXT FROM SourceTables INTO @psource_DB, @pdest_schema,
                @pdest_Table
                
        END;
        
    CLOSE SourceTables;
    DEALLOCATE SourceTables;
GO
PRINT N'Creating [Metadata].[CreateNormEntity]...';


GO

-- =============================================
--
-- Author:		Jukka Askvinge
-- Create date: 2016-06-05
-- Description:	
--	Creates  meta data and tables for dimension in the Norm layer.
--	Before you execute this procedure you must create the view in the "Staging" layer.
--	After the meta data and table are created you need to create the SSIS packet in Visual Studio (using BIML scripts)
-- Example:	
--
--
-- =============================================
CREATE procedure [Metadata].[CreateNormEntity]
    (
      @source_DB nvarchar(50)
    , @dest_db nvarchar(50)
    , @source_schema nvarchar(50)
    , @dest_schema nvarchar(50)
    , @source_table nvarchar(50)
    , @BIP nvarchar(50)
    , @GroupName nvarchar(50)
	, @FactScdType tinyint = 1
	, @CreateStageTable bit = 0
    )
as
    declare @dest_table nvarchar(50);
    declare @_GroupName nvarchar(25);
	declare @StageTableName nvarchar(50);
	declare @StageSchemaName nvarchar(50);
	declare @StageTableCatalog nvarchar(50);
	declare @DestinationTableName nvarchar(50) = '#N/A';
    

	SELECT TOP 1 @DestinationTableName = dt.DestinationTableName
	FROM   Metadata.DestinationTable dt
	WHERE  dt.SourceTableCatalog      = @source_DB
	  AND  dt.DestinationTableCatalog = @dest_db
	  AND  dt.SourceSchemaName        = @source_schema
	  AND  dt.DestinationSchemaName   = @dest_schema
	  AND  dt.SourceTableName         = @source_table


	EXEC Metadata.RemoveMetaData @DestinationTableDataBase = @dest_db -- nvarchar(128)
								 , @SourceTableDataBase = @source_DB -- nvarchar(128)
								 , @DestinationTableName = @DestinationTableName -- nvarchar(128)
								 , @DestinationSchemaName = @dest_schema -- nvarchar(128)


    if ( @GroupName not in ( 'Fact', 'Dimension', 'Datamart objects' ) )
        begin
            raiserror (
			'Error in the provided @GroupName parameter -> must be ''Fact'', ''Dimension'' or ''Data Mart objects'''
			,10
			,1
			);
            return;
        end;

    set @_GroupName = @GroupName;

    if UPPER(@dest_db) = 'DWH_2_Norm'
        begin
            set @dest_table = CONCAT('n_', @source_table);
        end;
    else
        if UPPER(@dest_db) like '%DWH_3_Fact%'
            begin
                set @dest_table = @source_table;
            end;
	else
        if UPPER(@dest_db) = 'DWH_1_Raw'
            begin
                set @dest_table = CONCAT('r_', @source_table);
            end;


    declare @_SSISPackageName nvarchar(101) = @dest_db + '_' + @dest_schema
        + '_' + @dest_table
      , @_CompressionType nvarchar(50) = ( select top 1
                                                    [DefaultTableCompressionType]
                                           from     [Metadata].[EnvironmentVariables]
                                         )
      , @_SSISIncrementalLoad bit = ( select top 1
                                                [DefaultSSISIncrementalLoad]
                                      from      [Metadata].[EnvironmentVariables]
                                    );
	if @CreateStageTable = 1
	begin
		set @StageSchemaName = 'Stage';
		set @StageTableCatalog = 'DWH_2_Norm';
		set @StageTableName = CONCAT('n_', @source_table);	 
	end 
    begin try
        execute [Metadata].[UpdateDestinationTableTable] @LinkedServerName = '[LOCALHOST]',
            @SourceDatabaseName = @source_DB, @SourceTableName = @source_table,
            @SourceSchemaName = @source_schema,
            @DestinationTableCatalog = @dest_db,
            @DestinationSchemaName = @dest_schema,
            @DestinationTableName = @dest_table,
            @CorrespondingSSISPackageName = @_SSISPackageName,
            @CreateTableInDatabase = 1, @CreateChecksumColumns = 0,
            @CreateIndexesForChecksumColumns = 0, @CreateSSISPackage = 1,
            @CDCInstanceName = null, @CompressionType = @_CompressionType,
            @UpdateTableKeyDefinitions = 1, @UpdateDestinationTable = 1,
            @UpdateSourceFieldTable = 1, @GroupName = @_GroupName,
            @SSISIncrementalLoad = @_SSISIncrementalLoad,
            @CreateStageTable = @CreateStageTable, @StageTableCatalog = @StageTableCatalog,
            @StageSchemaName = @StageSchemaName, @StageTableName = @StageTableName,
            @SourceServer = null,
			@FactScdType = @FactScdType;


        if UPPER(@dest_db) in  ('DWH_2_Norm', 'DWH_1_Raw')
            begin
		-- Create meta data, for the Norm layer, for the Primary Key (whick also will be the clustered index)
                insert  into [Metadata].[TableKeyDefinition]
                        ( TableCatalog
                        , SchemaName
                        , TableName
                        , TableKeyName
                        , COLUMN_NAME
                        , DATA_TYPE
                        , KeyType
                        , KeyColumnOrder
                        , IncludedColumn
                        , IndexStorageLocation
			            )
                        select  @dest_db
                              , @dest_schema
                              , @dest_table
                              , ''
                              , 'SysValidFromDateTime'
                              , 'Date'
                              , 'PK'
                              , 2
                              , 0
                              , ( select top 1
                                            case when @dest_db = 'DWH_1_Raw' then DefaultRawLayerDataStorageLocation else [DefaultNormLayerDataStorageLocation] end
                                  from      [Metadata].[EnvironmentVariables]
                                )
                        union all
                        select  @dest_db
                              , @dest_schema
                              , @dest_table
                              , ''
                              , @source_table + '_bkey'
                              , 'nvarchar'
                              , 'PK'
                              , 1
                              , 0
                              , ( select top 1
                                            case when @dest_db = 'DWH_1_Raw' then DefaultRawLayerDataStorageLocation else [DefaultNormLayerDataStorageLocation] end
                                  from      [Metadata].[EnvironmentVariables]
                                );

                if ( @_GroupName = 'Dimension' )
                    begin
                        insert  into [Metadata].[DestinationFieldExtended]
                                ( [COLUMN_NAME]
                                , [DATA_TYPE]
                                , [ORDINAL_POSITION]
                                , [IS_NULLABLE]
                                , [IncludeInChecksum_src]
                                , [IsIdentity]
                                , [CreateColumnIndex]
                                , [SourceTableCatalog]
                                , [DestinationTableCatalog]
                                , [DestinationSchemaName]
                                , [ApplicableTable]
                                , [SSISDataType]
                                , [SetFieldOnInsert]
                                , [SetFieldOnUpdate]
                                , [SetFieldOnDelete]
                                , [GroupName]
				                )
                                select  SUBSTRING(@dest_table, 3, 200)
                                        + '_key' as [COLUMN_NAME]
                                      , 'int' as [DATA_TYPE]
                                      , 1001 as [ORDINAL_POSITION]
                                      , 'NO' as [IS_NULLABLE]
                                      , 0 as [IncludeInChecksum_src]
                                      , 1 as [IsIdentity]
                                      , 1 as [CreateColumnIndex]
                                      , @source_DB as [SourceTableCatalog]
                                      , @dest_db as [DestinationTableCatalog]
                                      , @dest_schema as [DestinationSchemaName]
                                      , @dest_table as [ApplicableTable]
                                      , 'Int32' as [SSISDataType]
                                      , 0 as [SetFieldOnInsert]
                                      , 0 as [SetFieldOnUpdate]
                                      , 0 as [SetFieldOnDelete]
                                      , 'All' as [GroupName];
                    end;
            end;
        else
            begin
                declare @PKColumnName nvarchar(100);

                if ( RIGHT(@dest_table, 2) = '_h' )
                    set @PKColumnName = SUBSTRING(LEFT(@dest_table,
                                                       LEN(@dest_table) - 2),
                                                  3, 200) + '_key';
                else
                    set @PKColumnName = SUBSTRING(@dest_table, 3, 200)
                        + '_key';

		-- Create meta data for the "data mart" layer -> "surrogate key" will be the 
                insert  into [Metadata].[TableKeyDefinition]
                        ( TableCatalog
                        , SchemaName
                        , TableName
                        , TableKeyName
                        , COLUMN_NAME
                        , DATA_TYPE
                        , KeyType
                        , KeyColumnOrder
                        , IncludedColumn
                        , IndexStorageLocation
			            )
                        select  @dest_db
                              , @dest_schema
                              , @dest_table
                              , ''
                              , @PKColumnName
                              , 'int'
                              , 'PK'
                              , 1
                              , 0
                              , ( select top 1
                                            [DefaultMartLayerDataStorageLocation]
                                  from      [Metadata].[EnvironmentVariables]
                                );
				if (@FactScdType = 2 and @_GroupName = 'Fact')
				begin
					insert  into [Metadata].[TableKeyDefinition]
                        ( TableCatalog
                        , SchemaName
                        , TableName
                        , TableKeyName
                        , COLUMN_NAME
                        , DATA_TYPE
                        , KeyType
                        , KeyColumnOrder
                        , IncludedColumn
                        , IndexStorageLocation
			            )
					select  @dest_db
                              , @dest_schema
                              , @dest_table
                              , ''
                              , 'SysValidFromDateTime'
                              , 'Date'
                              , 'PK'
                              , 2
                              , 0
                              , ( select top 1
                                            [DefaultMartLayerDataStorageLocation]
                                  from      [Metadata].[EnvironmentVariables]
                                )
				end 
            end;

	-- Re-generates the table in the Norm database
        execute [Metadata].[ReGenerateTable] @_DestinationTableCatalog = @dest_db,
            @_DestinationTableName = @dest_table,
            @_DestinationSchemaName = @dest_schema, @UpdateSourceFields = 1,
            @VersionComment = @BIP; -- Jira No (for deployment purposes)
    end try

    begin catch
		if @@TRANCOUNT > 0 rollback;
        execute [Metadata].[RemoveMetaData] @DestinationTableDataBase = @dest_db,
            @SourceTableDataBase = @source_DB,
            @DestinationTableName = @dest_table,
            @DestinationSchemaName = @dest_schema;

        declare @ErrorMessage nvarchar(2048) = 'Error creating object Check your view for errors -> All metadata updates rollbacked'
            + CHAR(10) + ERROR_MESSAGE();
        throw 50000, @ErrorMessage, 1;
    end catch;
GO
PRINT N'Creating [Metadata].[CreateRawEntities]...';


GO





CREATE PROCEDURE [Metadata].[CreateRawEntities] @SourceSchema VARCHAR(50), @DropAndCreate BIT = 0 
AS
--EXEC [Metadata].[CreateRawEntities] @SourceSchema = 'Netsuite', @DropAndCreate = 1 -- varchar(50)
--EXECUTE Metadata.RemoveMultipleMetaDataObject @SourceSchema = 'Netsuite', @DestinationTableCatalog = 'DWH_1_Raw'

    DECLARE @psource_DB NVARCHAR(50)
       ,@pdest_db NVARCHAR(50) = 'DWH_1_Raw'
       ,@psource_schema NVARCHAR(50)
       ,@pdest_schema NVARCHAR(50)
       ,@psource_table NVARCHAR(50)
       ,@pGroupName NVARCHAR(50)
       ,@pdest_Table NVARCHAR(50)
       ,@pCreateOrRebuild NVARCHAR(50);
		 
        
    IF @DropAndCreate = 1
        BEGIN 
            EXECUTE Metadata.RemoveMultipleMetaDataObject @SourceSchema = @SourceSchema, @DestinationTableCatalog = @pdest_db             
        END 
	       
    DECLARE SourceTables CURSOR FAST_FORWARD READ_ONLY
    FOR
        SELECT  psource_DB		 = t.TABLE_CATALOG
               ,psource_schema	 = t.TABLE_SCHEMA
               ,psource_table		 = t.TABLE_NAME 
               ,pGroupName		 = CASE WHEN t.TABLE_SCHEMA LIKE '%[_]f' THEN 'Fact' ELSE 'Dimension' END
               ,pdest_schema		 = REPLACE(REPLACE(t.TABLE_SCHEMA, '_d', ''), '_f', '') +'_RawTyped'
               ,pdest_Table		 = CONCAT('r_', t.TABLE_NAME)
               ,pCreateOrRebuild	 = CASE WHEN dt.SourceTableName IS NULL THEN 'C' ELSE 'R' END
        FROM    DWH_1_Raw.INFORMATION_SCHEMA.TABLES t
        LEFT JOIN Metadata.DestinationTable dt ON t.TABLE_SCHEMA = dt.SourceSchemaName AND t.TABLE_CATALOG = dt.SourceTableCatalog AND t.TABLE_NAME = dt.SourceTableName
        WHERE   t.TABLE_TYPE = 'VIEW' AND t.TABLE_SCHEMA LIKE @SourceSchema + '%';
        
    OPEN SourceTables;
        
    FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
        @psource_table, @pGroupName, @pdest_schema, @pdest_Table, @pCreateOrRebuild;
                 

    WHILE @@FETCH_STATUS = 0
        BEGIN
        
            IF NOT EXISTS ( SELECT  *
                            FROM    DWH_1_Raw.sys.schemas
                            WHERE   name = @pdest_schema )
                BEGIN 
                        
                    EXEC('use '+ @pdest_db +'; exec sp_executesql N''create schema '+ @pdest_schema +' '' ')
				   
                END;

            IF @pCreateOrRebuild = 'R'
                BEGIN				       		  
				EXECUTE Metadata.ReGenerateTable @_DestinationTableCatalog = @pdest_db,
				    @_LinkedServerName = N'localhost', 
				    @_DestinationTableName = @pdest_Table,
				    @_DestinationSchemaName = @pdest_schema, 
				    @UpdateSourceFields = 1, -- bit
				    @VersionComment = 'AutoRebuild' 				
                END 

            IF @pCreateOrRebuild = 'C' 
                BEGIN 
                    EXECUTE Metadata.CreateNormEntity @source_DB = @psource_DB,
                        @dest_db = @pdest_db, 
				    @source_schema = @psource_schema,
                        @dest_schema = @pdest_schema,
                        @source_table = @psource_table, 
				    @BIP = N'Test',
                        @GroupName = @pGroupName;
                END 
        
            FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
                @psource_table, @pGroupName, @pdest_schema, @pdest_Table, @pCreateOrRebuild;
        END;
        
    CLOSE SourceTables;
    DEALLOCATE SourceTables;
GO
PRINT N'Creating [Metadata].[CreateNormEntities]...';


GO






CREATE PROCEDURE [Metadata].[CreateNormEntities]
    @SourceSchema VARCHAR(50)
   ,@DropAndCreate BIT = 0
AS -- EXEC Metadata.CreateNormEntities @SourceSchema = 'Norm', @DropAndCreate = 1 -- varchar(50)

    DECLARE @psource_DB NVARCHAR(50)
       ,@pdest_db NVARCHAR(50) = 'DWH_2_Norm'
       ,@psource_schema NVARCHAR(50)
       ,@pdest_schema NVARCHAR(50)
       ,@psource_table NVARCHAR(50)
       ,@pGroupName NVARCHAR(50)
       ,@pdest_Table NVARCHAR(50)
       ,@pCreateOrRebuild NVARCHAR(50);
		 
    
    
    IF @DropAndCreate = 1
        BEGIN 
            EXECUTE Metadata.RemoveMultipleMetaDataObject @SourceSchema = @SourceSchema, @DestinationTableCatalog = @pdest_db             
        END 
        
        
    DECLARE SourceTables CURSOR FAST_FORWARD READ_ONLY
    FOR
        SELECT  t.TABLE_CATALOG
               ,t.TABLE_SCHEMA
               ,t.TABLE_NAME
               ,GroupName = CASE WHEN RIGHT(t.TABLE_SCHEMA, 5) = '_Scd1'
                                 THEN 'Fact'
                                 ELSE 'Dimension'
                            END
               ,dest_schema = LTRIM(RTRIM(LEFT(t.TABLE_SCHEMA,
                                               LEN(t.TABLE_SCHEMA) - 5)))
               ,dest_Table = 'n_' + TABLE_NAME
               ,CreateOrRebuild = CASE WHEN dt.SourceTableName IS NULL
                                       THEN 'C'
                                       ELSE 'R'
                                  END
        FROM    DWH_1_Raw.INFORMATION_SCHEMA.TABLES t
        LEFT JOIN Metadata.DestinationTable dt ON t.TABLE_SCHEMA = dt.SourceSchemaName AND t.TABLE_CATALOG = dt.SourceTableCatalog AND t.TABLE_NAME = dt.SourceTableName
        WHERE   t.TABLE_TYPE = 'VIEW' AND t.TABLE_SCHEMA LIKE @SourceSchema + '%';
        
    OPEN SourceTables;
        
    FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
        @psource_table, @pGroupName, @pdest_schema, @pdest_Table,
        @pCreateOrRebuild;
                 

    WHILE @@FETCH_STATUS = 0
        BEGIN
        
            IF NOT EXISTS ( SELECT  *
                            FROM    DWH_2_Norm.sys.schemas
                            WHERE   name = @pdest_schema )
                BEGIN 
                        
                    EXEC('use '+ @pdest_db +'; exec sp_executesql N''create schema '+ @pdest_schema +' '' ')
				   
                END;

            IF @pCreateOrRebuild = 'R'
                BEGIN				       		  
                    EXECUTE Metadata.ReGenerateTable @_DestinationTableCatalog = @pdest_db,
                        @_LinkedServerName = N'localhost',
                        @_DestinationTableName = @pdest_Table,
                        @_DestinationSchemaName = @pdest_schema,
                        @UpdateSourceFields = 1, -- bit
                        @VersionComment = 'AutoRebuild' 				
                END 

            IF (@pCreateOrRebuild = 'C')
                BEGIN 
                    EXECUTE Metadata.CreateNormEntity @source_DB = @psource_DB,
                        @dest_db = @pdest_db, @source_schema = @psource_schema,
                        @dest_schema = @pdest_schema,
                        @source_table = @psource_table, @BIP = N'Test',
                        @GroupName = @pGroupName;
                END 
        
            FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
                @psource_table, @pGroupName, @pdest_schema, @pdest_Table,
                @pCreateOrRebuild;
        END;
        
    CLOSE SourceTables;
    DEALLOCATE SourceTables;
GO
PRINT N'Creating [Metadata].[CreateFactEntities]...';


GO



CREATE PROCEDURE [Metadata].[CreateFactEntities] @SourceSchema VARCHAR(50), @DropAndCreate BIT = 0 
AS
--EXEC [Metadata].[CreateFactEntities] @SourceSchema = 'Fact', @DropAndCreate = 1 -- varchar(50)
    DECLARE @psource_DB NVARCHAR(50)
       ,@pdest_db NVARCHAR(50) = 'DWH_3_Fact'
       ,@psource_schema NVARCHAR(50)
       ,@pdest_schema NVARCHAR(50)
       ,@psource_table NVARCHAR(50)
       ,@pGroupName NVARCHAR(50)
       ,@pdest_Table NVARCHAR(50)
       ,@pCreateOrRebuild NVARCHAR(50);
		 
        
    IF @DropAndCreate = 1
        BEGIN 
            EXECUTE Metadata.RemoveMultipleMetaDataObject @SourceSchema = @SourceSchema, @DestinationTableCatalog = @pdest_db             
        END 
	       
    DECLARE SourceTables CURSOR FAST_FORWARD READ_ONLY
    FOR
        SELECT  t.TABLE_CATALOG
               ,t.TABLE_SCHEMA
               ,t.TABLE_NAME
               ,GroupName = CASE WHEN LEFT(t.TABLE_NAME, 2) = 'f_'
                                     THEN 'Fact'
                                     ELSE 'Dimension'
                                END
               ,dest_schema =  t.TABLE_SCHEMA
               ,dest_Table = TABLE_NAME
               ,CreateOrRebuild = CASE WHEN dt.SourceTableName IS NULL THEN 'C'
                                    ELSE 'R'
                                  END
        FROM    DWH_2_Norm.INFORMATION_SCHEMA.TABLES t
        LEFT JOIN Metadata.DestinationTable dt ON t.TABLE_SCHEMA = dt.SourceSchemaName AND t.TABLE_CATALOG = dt.SourceTableCatalog AND t.TABLE_NAME = dt.SourceTableName
        WHERE   t.TABLE_TYPE = 'VIEW' AND t.TABLE_SCHEMA LIKE @SourceSchema;
        
    OPEN SourceTables;
        
    FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
        @psource_table, @pGroupName, @pdest_schema, @pdest_Table, @pCreateOrRebuild;
                 

    WHILE @@FETCH_STATUS = 0
        BEGIN
        
            IF NOT EXISTS ( SELECT  *
                            FROM    DWH_3_Fact.sys.schemas
                            WHERE   name = @pdest_schema )
                BEGIN 
                        
                    EXEC('use '+ @pdest_db +'; exec sp_executesql N''create schema '+ @pdest_schema +' '' ')
				   
                END;

            IF @pCreateOrRebuild = 'R'
                BEGIN				       		  
				EXECUTE Metadata.ReGenerateTable @_DestinationTableCatalog = @pdest_db,
				    @_LinkedServerName = N'localhost', 
				    @_DestinationTableName = @pdest_Table,
				    @_DestinationSchemaName = @pdest_schema, 
				    @UpdateSourceFields = 1, -- bit
				    @VersionComment = 'AutoRebuild' 				
                END 

            IF @pCreateOrRebuild = 'C' 
                BEGIN 
                    EXECUTE Metadata.CreateNormEntity @source_DB = @psource_DB,
                        @dest_db = @pdest_db, @source_schema = @psource_schema,
                        @dest_schema = @pdest_schema,
                        @source_table = @psource_table, @BIP = N'Test',
                        @GroupName = @pGroupName, @FactScdType = 1;
                END 
        
            FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
                @psource_table, @pGroupName, @pdest_schema, @pdest_Table, @pCreateOrRebuild;
        END;
        
    CLOSE SourceTables;
    DEALLOCATE SourceTables;


/*

	   
        DECLARE @psource_DB NVARCHAR(50)
           ,@pdest_db NVARCHAR(50) = 'DWH_3_Fact'
           ,@psource_schema NVARCHAR(50)
           ,@pdest_schema NVARCHAR(50)
           ,@psource_table NVARCHAR(50)
           ,@pGroupName NVARCHAR(50)
           ,@pdest_Table NVARCHAR(50);
		 
        

        
        DECLARE SourceTables CURSOR FAST_FORWARD READ_ONLY
        FOR
            SELECT  t.TABLE_CATALOG
                   ,t.TABLE_SCHEMA
                   ,t.TABLE_NAME
                   ,GroupName = CASE WHEN LEFT(t.TABLE_NAME, 2) = 'f_'
                                     THEN 'Fact'
                                     ELSE 'Dimension'
                                END
                   ,dest_schema = t.TABLE_SCHEMA
                   ,dest_Table = TABLE_NAME
            FROM    DWH_2_Norm.INFORMATION_SCHEMA.TABLES t
            WHERE   t.TABLE_TYPE = 'VIEW'
                    AND t.TABLE_SCHEMA LIKE @SourceSchema + '%';
        
        OPEN SourceTables;
        
        FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
            @psource_table, @pGroupName, @pdest_schema, @pdest_Table;
                 

        WHILE @@FETCH_STATUS = 0
            BEGIN
        
                IF NOT EXISTS ( SELECT  *
                                FROM    DWH_2_Norm.sys.schemas
                                WHERE   name = @pdest_schema )
                    BEGIN 
                        
                        exec('use '+ @pdest_db +'; exec sp_executesql N''create schema '+ @pdest_schema +' '' ')
				   
                    END;

                
			 	
                EXECUTE Metadata.RemoveMetaData @DestinationTableDataBase = @pdest_db,
                    @SourceTableDataBase = @psource_DB,
                    @DestinationTableName = @pdest_Table,
                    @DestinationSchemaName = @pdest_schema;

                EXECUTE DevelopmentFrameworkConfig.Metadata.CreateNormEntity @source_DB = @psource_DB,
                    @dest_db = @pdest_db, @source_schema = @psource_schema,
                    @dest_schema = @pdest_schema,
                    @source_table = @psource_table, @BIP = N'Test',
                    @GroupName = @pGroupName;
           
        
                FETCH NEXT FROM SourceTables INTO @psource_DB, @psource_schema,
                    @psource_table, @pGroupName, @pdest_schema, @pdest_Table;
            END;
        
        CLOSE SourceTables;
        DEALLOCATE SourceTables;
	   */
GO
PRINT N'Creating [Metadata].[DestinationTableLog].[DestinationTableLogID].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1, 2, 3', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'DestinationTableLogID';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[DestinationTableLogID].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'System generated identity of the current row', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'DestinationTableLogID';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[SourceTableCatalog].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'DWH_1_Raw', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'SourceTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[SourceTableCatalog].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The source of the database that was used to modify the target/destination', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'SourceTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[SourceSchemaName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'Norm_Scd2', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'SourceSchemaName';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[SourceSchemaName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The source of the schema that was used to modify the target/destination', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'SourceSchemaName';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[SourceTableName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'Country', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'SourceTableName';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[SourceTableName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The source of the table that was used to modify the target/destination', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'SourceTableName';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[DestinationTableCatalog].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'DWH_2_Norm', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'DestinationTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[DestinationTableCatalog].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The destination of the database that was modified', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'DestinationTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[DestinationSchemaName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'Norm', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'DestinationSchemaName';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[DestinationSchemaName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The schema of the object that was modified', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'DestinationSchemaName';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[DestinationTableName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'n_Country', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'DestinationTableName';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[DestinationTableName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The destination of the table that was modified', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'DestinationTableName';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[VersionComment].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'FSSC-1026', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'VersionComment';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[VersionComment].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The schema of the object that was modified', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'VersionComment';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[UserNameInserted].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'spotify\jukkaaskvinge', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'UserNameInserted';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[UserNameInserted].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The name of the user that modified', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'UserNameInserted';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[DateTimeInsertedUTC].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '2016-11-18 13:40:23.012', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'DateTimeInsertedUTC';


GO
PRINT N'Creating [Metadata].[DestinationTableLog].[DateTimeInsertedUTC].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Log date time', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableLog', @level2type = N'COLUMN', @level2name = N'DateTimeInsertedUTC';


GO
PRINT N'Creating [Metadata].[DataTypeTranslation].[Id].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1,2,3', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DataTypeTranslation', @level2type = N'COLUMN', @level2name = N'Id';


GO
PRINT N'Creating [Metadata].[DataTypeTranslation].[Id].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'System generated identity of the current row', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DataTypeTranslation', @level2type = N'COLUMN', @level2name = N'Id';


GO
PRINT N'Creating [Metadata].[DataTypeTranslation].[SQLServer].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'datetime2', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DataTypeTranslation', @level2type = N'COLUMN', @level2name = N'SQLServer';


GO
PRINT N'Creating [Metadata].[DataTypeTranslation].[SQLServer].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Data type name used in MS SQL Server', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DataTypeTranslation', @level2type = N'COLUMN', @level2name = N'SQLServer';


GO
PRINT N'Creating [Metadata].[DataTypeTranslation].[SSIS].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'DT_DBTIMESTAMP2', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DataTypeTranslation', @level2type = N'COLUMN', @level2name = N'SSIS';


GO
PRINT N'Creating [Metadata].[DataTypeTranslation].[SSIS].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Data type name used in SSIS', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DataTypeTranslation', @level2type = N'COLUMN', @level2name = N'SSIS';


GO
PRINT N'Creating [Metadata].[DataTypeTranslation].[Biml].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'DateTime2', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DataTypeTranslation', @level2type = N'COLUMN', @level2name = N'Biml';


GO
PRINT N'Creating [Metadata].[DataTypeTranslation].[Biml].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Data type name used in BIML', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DataTypeTranslation', @level2type = N'COLUMN', @level2name = N'Biml';


GO
PRINT N'Creating [Metadata].[DataTypeTranslation].[DataTypeGroup].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'Date', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DataTypeTranslation', @level2type = N'COLUMN', @level2name = N'DataTypeGroup';


GO
PRINT N'Creating [Metadata].[DataTypeTranslation].[DataTypeGroup].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Group name of the data type', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DataTypeTranslation', @level2type = N'COLUMN', @level2name = N'DataTypeGroup';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[Id].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1,2,3', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'Id';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[Id].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'System generated identity of the current row', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'Id';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[DerivedColumnType].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'dwInfFK, dwInit, dwError', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'DerivedColumnType';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[DerivedColumnType].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Indicator of where this derived column, and the value for that, will reside. This indicator is used as parameter when creating derived column components in the created SSIS packages', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'DerivedColumnType';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[DerivedColumnName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'SysSrcGenerationDateTime, PackageName', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'DerivedColumnName';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[DerivedColumnName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Name of the derived column', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'DerivedColumnName';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[OverrideValue].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '@[System::PackageName], GETUTCDATE()', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'OverrideValue';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[OverrideValue].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The value, expressed in SSIS code, for the expression', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'OverrideValue';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[DataType].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'datetime, nvarchar', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'DataType';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[DataType].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Data type of the derived column', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'DataType';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[Comment].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'Extended field in Stage. To be populated in DW for missing Foreign Key members', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'Comment';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[Comment].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Just a comment column -> not used in the code', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'Comment';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[ApplicableTable].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'n_Country', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'ApplicableTable';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[ApplicableTable].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Indicates if the derived column need to be specific to one integration', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'ApplicableTable';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[MaxLength].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '100', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'MaxLength';


GO
PRINT N'Creating [Metadata].[DerivedColumnOverride].[MaxLength].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The length of the derived column when using character types', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DerivedColumnOverride', @level2type = N'COLUMN', @level2name = N'MaxLength';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceTableCatalog].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'EDWHistory, EDWRaw', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceTableCatalog].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The database the current source meta data belongs to', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceSchemaName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'dbo, AX', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceSchemaName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceSchemaName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The schema the current source meta data belongs to', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceSchemaName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceTableName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'INVENTSUM, INVENTTABLE', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceTableName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceTableName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The table name the current source meta data belongs to', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceTableName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceFile].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'SMDTOTAL, SMDDSALE', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceFile';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceFile].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Identification of the source file. Should always be the name of the file, excluding the file extension.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceFile';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DestinationTableCatalog].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'EDWHistory_BIML', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DestinationTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DestinationTableCatalog].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The database for current table during the creation process of tables and SSIS packages.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DestinationTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DestinationSchemaName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'AX, dbo', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DestinationSchemaName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DestinationSchemaName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Schema name for the current table.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DestinationSchemaName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DestinationTableName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'hInventItemPriceSim', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DestinationTableName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DestinationTableName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Name of the table in the destination database', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DestinationTableName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[StageTableCatalog].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'EDWRaw, Stage', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'StageTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationTable].[StageTableCatalog].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Name of the database where the staging table exists/will exist', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'StageTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationTable].[StageSchemaName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'AX, CRM', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'StageSchemaName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[StageSchemaName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Name of the schema where the staging table exists/will exist', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'StageSchemaName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[StageTableName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'rCustTable, rFilteredAccount, sCustomer', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'StageTableName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[StageTableName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Name of the table where the staging table exists/will exist', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'StageTableName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CompressionType].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'NONE, ROW, PAGE', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CompressionType';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CompressionType].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Type of compression that will be used, when creating clustered indexes and non-clustered indexes', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CompressionType';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SSISPackageName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'hInventSum, rAssesBook', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SSISPackageName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SSISPackageName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The name of the SSIS package, that will be used in the creation process', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SSISPackageName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SSISPackageGUID].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'A56E68EF-8174-4281-8901-B6CCD49D41FD', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SSISPackageGUID';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SSISPackageGUID].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Unique identifier that will be used when creating SSIS packages via BIML', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SSISPackageGUID';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SSISIncrementalLoad].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SSISIncrementalLoad';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SSISIncrementalLoad].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Flag to indicate whether a design pattern for incremental load will be used. Otherwise the full load design pattern will be used.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SSISIncrementalLoad';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CreateTable].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CreateTable';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CreateTable].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Flag to indicate whether the current table will be created, physically in the database, or not.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CreateTable';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CreateStageTable].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CreateStageTable';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CreateStageTable].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Flag to indicate whether a staging table will be created or not.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CreateStageTable';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CreateChecksumColumns].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CreateChecksumColumns';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CreateChecksumColumns].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Flag to indicate whether checksum columns will be created, during the table creation process, or not. Two checksum columns will be created; CheckSumNonPKColumns_dst and CheckSumNonPKColumns_src. CheckSumNonPKColumns_dst is used as a check sum column when the current table act as a DESTINATION. CheckSumNonPKColumns_src is used as a check sum column when the current table act as a SOURCE.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CreateChecksumColumns';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CreateChecksumIndexes].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CreateChecksumIndexes';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CreateChecksumIndexes].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Flag to indicate whether an index will be created on the checksum column ChecksumPrimaryKey, during the table creation process, or not.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CreateChecksumIndexes';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CreateSSISPackage].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CreateSSISPackage';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CreateSSISPackage].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Flag to indicate whether the an SSIS package will be created, physically in the file system, or not.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CreateSSISPackage';


GO
PRINT N'Creating [Metadata].[DestinationTable].[UseSSISLoggingFrameWork].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'UseSSISLoggingFrameWork';


GO
PRINT N'Creating [Metadata].[DestinationTable].[UseSSISLoggingFrameWork].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Flag to indicate whether a logging framework will be used or not', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'UseSSISLoggingFrameWork';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SSISConfigurationFrameWorkCatalog].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'DWGeneralAndLogging, Stage', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SSISConfigurationFrameWorkCatalog';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SSISConfigurationFrameWorkCatalog].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Name of the database where the configuration to the SSIS packages will be collected from (normally the database name where the table [SSIS Configurations] is located)', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SSISConfigurationFrameWorkCatalog';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DtsConfigEnvironmentVariableName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'SSISConfig, ETL_Config', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DtsConfigEnvironmentVariableName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DtsConfigEnvironmentVariableName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The name of the environment variable that will be used in SSIS packages', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DtsConfigEnvironmentVariableName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CDCInstanceName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'CDC_INVENTTABLE', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CDCInstanceName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[CDCInstanceName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The name of the CDC instance that the current destination table has as its source.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'CDCInstanceName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceSelectClause].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'select Foo, Bar from dbo.Time', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceSelectClause';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceSelectClause].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The Select clause used in the source data extraction. Normally the complete table will be extracted from the source, as a first step in the ETL process.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceSelectClause';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceFilterCondition].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'src.[DATAAREAID] IN (SELECT DataAreaKey FROM DevelopmentFrameworkConfig_TD.[Parameters].[AXDataArea] WHERE Loaddata = 1)', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceFilterCondition';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceFilterCondition].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Filter condition that will be used when extracting data from the source table. The syntax must be in the source language, which means for example T-SQL on SQL Server sources and P/L SQL on Oracle sources. Note that the source column need to be prefixed with src., because the SSIS source extract script uses aliases for the source and destination tables.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceFilterCondition';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DestinationDeleteCondition].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'InventoryDate = CAST(getdate() as date)', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DestinationDeleteCondition';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DestinationDeleteCondition].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Delete condition at the destination table when creating an SSIS package for the ETL flow between the source table and the destination table. This condition will be used as a pre-execution phase to the data flow.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DestinationDeleteCondition';


GO
PRINT N'Creating [Metadata].[DestinationTable].[GroupName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'Dimension - CRM', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'GroupName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[GroupName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Name of the group that this destination object will belong to.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'GroupName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DestinationTableID].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '10001', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DestinationTableID';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DestinationTableID].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'System generated identity of the current row', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DestinationTableID';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceServer].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'GOT, KUN', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceServer';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceServer].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'A tag to separate definitions when SourceTableCatalog not is enough to uniquely identify meta data', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceServer';


GO
PRINT N'Creating [Metadata].[DestinationTable].[UserNameInserted].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'spotify\jukkaaskvinge', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'UserNameInserted';


GO
PRINT N'Creating [Metadata].[DestinationTable].[UserNameInserted].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Identification of who inserted the current row (system set)', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'UserNameInserted';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DateTimeInsertedUTC].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '2013-08-21 14:34:45', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DateTimeInsertedUTC';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DateTimeInsertedUTC].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'DateTime of when the current row was inserted  (system set)', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DateTimeInsertedUTC';


GO
PRINT N'Creating [Metadata].[DestinationTable].[UserNameUpdated].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'spotify\toba', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'UserNameUpdated';


GO
PRINT N'Creating [Metadata].[DestinationTable].[UserNameUpdated].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Identification of who made the last update on the current row (system set)', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'UserNameUpdated';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DateTimeUpdatedUTC].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '2013-08-21 14:34:45', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DateTimeUpdatedUTC';


GO
PRINT N'Creating [Metadata].[DestinationTable].[DateTimeUpdatedUTC].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'DateTime of when the current row was last updated (system set)', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'DateTimeUpdatedUTC';


GO
PRINT N'Creating [Metadata].[DestinationTable].[StageFilterCondition].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '[tStart] > dateadd(day, -10, getutcdate())', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'StageFilterCondition';


GO
PRINT N'Creating [Metadata].[DestinationTable].[StageFilterCondition].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Filter condition that will be used when extracting data from the staging table, when staging table is used for the ETL.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'StageFilterCondition';


GO
PRINT N'Creating [Metadata].[DestinationTable].[IsPartitioned].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'IsPartitioned';


GO
PRINT N'Creating [Metadata].[DestinationTable].[IsPartitioned].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Indicates whether the current destination table will be created with partitions or not', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'IsPartitioned';


GO
PRINT N'Creating [Metadata].[DestinationTable].[PartitionFunctionName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'pf_PartitionByDate', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'PartitionFunctionName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[PartitionFunctionName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Name of the partition function to use, when creating a partitioned table', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'PartitionFunctionName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[PartitionSchemeName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'ps_PartitionByDate', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'PartitionSchemeName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[PartitionSchemeName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Name of the partition function to use, when creating a partitioned table', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'PartitionSchemeName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[PartitionKeyColumnName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'SysDatetimeInsertedUTC', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'PartitionKeyColumnName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[PartitionKeyColumnName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Name of the partition key (column name) to use, when creating a partitioned table', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'PartitionKeyColumnName';


GO
PRINT N'Creating [Metadata].[DestinationTable].[PartitionETLStrategy].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'Partition Switching', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'PartitionETLStrategy';


GO
PRINT N'Creating [Metadata].[DestinationTable].[PartitionETLStrategy].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Not currently used in any code -> could be used to indicate a specific ETL design pattern, e.g. Partition switching', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'PartitionETLStrategy';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceMaxRecursion].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceMaxRecursion';


GO
PRINT N'Creating [Metadata].[DestinationTable].[SourceMaxRecursion].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = '', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'SourceMaxRecursion';


GO
PRINT N'Creating [Metadata].[DestinationTable].[IsMigrationPackage].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'IsMigrationPackage';


GO
PRINT N'Creating [Metadata].[DestinationTable].[IsMigrationPackage].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Indicates if an integration is a migration package or not -> not used specifically in any code. To be used wherever you want', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'IsMigrationPackage';


GO
PRINT N'Creating [Metadata].[DestinationTable].[ETLLookupCacheMode].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'FULL, PARTIAL', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'ETLLookupCacheMode';


GO
PRINT N'Creating [Metadata].[DestinationTable].[ETLLookupCacheMode].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Not currently used in any code -> could be used to indicate if a specific cache mode should be used for lookups in the SSIS packages', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'ETLLookupCacheMode';


GO
PRINT N'Creating [Metadata].[DestinationTable].[RequireTransaction].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'RequireTransaction';


GO
PRINT N'Creating [Metadata].[DestinationTable].[RequireTransaction].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Not specifically used in any code -> could be used as a gate keeper for the integration to continue or not', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'RequireTransaction';


GO
PRINT N'Creating [Metadata].[DestinationTable].[EmptyTargetTable].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'EmptyTargetTable';


GO
PRINT N'Creating [Metadata].[DestinationTable].[EmptyTargetTable].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = '', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'EmptyTargetTable';


GO
PRINT N'Creating [Metadata].[DestinationTable].[ETLLookupCacheFilter].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'ETLLookupCacheFilter';


GO
PRINT N'Creating [Metadata].[DestinationTable].[ETLLookupCacheFilter].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = '', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'ETLLookupCacheFilter';


GO
PRINT N'Creating [Metadata].[DestinationTable].[IsInProduction].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'IsInProduction';


GO
PRINT N'Creating [Metadata].[DestinationTable].[IsInProduction].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Indicates if an integration is in production or not -> not used specifically in any code. To be used wherever you want', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'IsInProduction';


GO
PRINT N'Creating [Metadata].[DestinationTable].[FactScdType].[ExempleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExempleValue', @value = N'null, 0, 1', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'FactScdType';


GO
PRINT N'Creating [Metadata].[DestinationTable].[FactScdType].[ColumnDefinition]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDefinition', @value = N'Specifies what type of SCD handling to be used for fact tables. For norm tables set this column to null. ', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTable', @level2type = N'COLUMN', @level2name = N'FactScdType';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[COLUMN_NAME].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'SourceSystemID', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'COLUMN_NAME';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[COLUMN_NAME].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Name of the column, when creating tables and SSIS packages', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'COLUMN_NAME';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[DATA_TYPE].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'int', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'DATA_TYPE';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[DATA_TYPE].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The data type for the current column -> The syntax for the data type must match SQL Server 2008 R2 T-SQL syntax.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'DATA_TYPE';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[CHARACTER_MAXIMUM_LENGTH].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'27', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'CHARACTER_MAXIMUM_LENGTH';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[CHARACTER_MAXIMUM_LENGTH].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The maximum length of the current column, if the data type of the column is char, varchar, nchar or nvarchar', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'CHARACTER_MAXIMUM_LENGTH';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[DATETIME_PRECISION].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '0, 1, 2', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'DATETIME_PRECISION';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[DATETIME_PRECISION].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The precision for the datetime2 data type in SQL Server', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'DATETIME_PRECISION';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[ORDINAL_POSITION].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'1007', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'ORDINAL_POSITION';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[ORDINAL_POSITION].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The ordinal position where the column will be materialized in the table.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'ORDINAL_POSITION';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[NUMERIC_PRECISION].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '10, 18, 15', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'NUMERIC_PRECISION';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[NUMERIC_PRECISION].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The precision for the column if the data type is decimal', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'NUMERIC_PRECISION';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[NUMERIC_SCALE].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '3, 4, 5', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'NUMERIC_SCALE';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[NUMERIC_SCALE].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Number of decimals for the column if the data type is decimal', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'NUMERIC_SCALE';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[IS_NULLABLE].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'YES, NO', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'IS_NULLABLE';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[IS_NULLABLE].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Flag to indicate whether the current column is nullable or not.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'IS_NULLABLE';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[IncludeInChecksum_src].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'IncludeInChecksum_src';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[IncludeInChecksum_src].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Flag to indicate whether the current column shall be included in the checksum or not', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'IncludeInChecksum_src';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[TableColumnSpecification].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'convert(nvarchar(27), (case    when DatetimeDeleted > isnull(DatetimeUpdated, convert(DATETIME, ''1900-01-01'', 20)) and DatetimeDeleted > isnull(DatetimeInserted, convert(DATETIME, ''1900-01-01'', 20)) then DatetimeDeleted   when DatetimeUpdated > isnull(DatetimeDeleted, convert(DATETIME, ''1900-01-01'', 20)) and DatetimeUpdated > isnull(DatetimeInserted, convert(DATETIME, ''1900-01-01'', 20)) then DatetimeUpdated          else DatetimeInserted   end), 121) PERSISTED', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'TableColumnSpecification';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[TableColumnSpecification].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The specification that will be used for calculated columns, during the creation process of tables.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'TableColumnSpecification';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[IsIdentity].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'IsIdentity';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[IsIdentity].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Flag to indicate whether current column is an identity column or not.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'IsIdentity';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[CreateColumnIndex].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'CreateColumnIndex';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[CreateColumnIndex].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Flag to indicate whether an index will be created on the current column, during the table creation process, or not.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'CreateColumnIndex';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SourceTableCatalog].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'EDWHistory, SMNE_DW, ApplLayer', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SourceTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SourceTableCatalog].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Name of the source database.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SourceTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[DestinationTableCatalog].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'EDWHistory_BIML', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'DestinationTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[DestinationTableCatalog].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Name of the database. When a table is created this column is used to get all extra columns that will be created during the creation process for a table in current database.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'DestinationTableCatalog';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[DestinationSchemaName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'norm', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'DestinationSchemaName';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[DestinationSchemaName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The schema name that this extended field will be created for', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'DestinationSchemaName';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[ApplicableTable].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'hInventSum', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'ApplicableTable';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[ApplicableTable].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Table name for which the current field will be appended. If NULL then column will be appended for all objects in the specified database.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'ApplicableTable';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SSISDataType].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'String', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SSISDataType';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SSISDataType].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The data type used in the SSIS package, for the current extended column', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SSISDataType';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SSISDataTypeLength].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'10', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SSISDataTypeLength';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SSISDataTypeLength].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The length of the data type in the SSIS package', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SSISDataTypeLength';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SSISColumnSpecification].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'@[User::SysExecutionLog_key], 25, GETDATE()', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SSISColumnSpecification';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SSISColumnSpecification].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The column specification for the extended column. Specification need to be written with SSIS syntax.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SSISColumnSpecification';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SetFieldOnInsert].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SetFieldOnInsert';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SetFieldOnInsert].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'A flag that indicates if current extended column will be set on inserts into the table', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SetFieldOnInsert';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SetFieldOnUpdate].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SetFieldOnUpdate';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SetFieldOnUpdate].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'A flag that indicates if current extended column will be set on updates of the table', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SetFieldOnUpdate';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SetFieldOnDelete].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SetFieldOnDelete';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[SetFieldOnDelete].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'A flag that indicates if current extended column will be set on deletes from the table', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'SetFieldOnDelete';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[GroupName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'Dimension - CRM', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'GroupName';


GO
PRINT N'Creating [Metadata].[DestinationFieldExtended].[GroupName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Name of the group that this extended field will belong to.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationFieldExtended', @level2type = N'COLUMN', @level2name = N'GroupName';


GO
PRINT N'Creating [Metadata].[DestinationTableGroup].[GroupName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'Dimension - CRM', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableGroup', @level2type = N'COLUMN', @level2name = N'GroupName';


GO
PRINT N'Creating [Metadata].[DestinationTableGroup].[GroupName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Name of the group.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'DestinationTableGroup', @level2type = N'COLUMN', @level2name = N'GroupName';


GO
PRINT N'Creating [Metadata].[SourceField].[TABLE_CATALOG].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'EDWRaw_BIML', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'TABLE_CATALOG';


GO
PRINT N'Creating [Metadata].[SourceField].[TABLE_CATALOG].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'TABLE_CATALOG';


GO
PRINT N'Creating [Metadata].[SourceField].[TABLE_SCHEMA].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'AX, dbo', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'TABLE_SCHEMA';


GO
PRINT N'Creating [Metadata].[SourceField].[TABLE_SCHEMA].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'TABLE_SCHEMA';


GO
PRINT N'Creating [Metadata].[SourceField].[TABLE_NAME].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'rCustTable', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'TABLE_NAME';


GO
PRINT N'Creating [Metadata].[SourceField].[TABLE_NAME].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'TABLE_NAME';


GO
PRINT N'Creating [Metadata].[SourceField].[COLUMN_NAME].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'PDSFREIGHTACCRUED', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'COLUMN_NAME';


GO
PRINT N'Creating [Metadata].[SourceField].[COLUMN_NAME].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Name of the column in the source table', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'COLUMN_NAME';


GO
PRINT N'Creating [Metadata].[SourceField].[ORDINAL_POSITION].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'5, 8, 10', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'ORDINAL_POSITION';


GO
PRINT N'Creating [Metadata].[SourceField].[ORDINAL_POSITION].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'ORDINAL_POSITION';


GO
PRINT N'Creating [Metadata].[SourceField].[COLUMN_DEFAULT].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'((0))', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'COLUMN_DEFAULT';


GO
PRINT N'Creating [Metadata].[SourceField].[COLUMN_DEFAULT].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'COLUMN_DEFAULT';


GO
PRINT N'Creating [Metadata].[SourceField].[IS_NULLABLE].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'YES, NO', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'IS_NULLABLE';


GO
PRINT N'Creating [Metadata].[SourceField].[IS_NULLABLE].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'-- See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns --', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'IS_NULLABLE';


GO
PRINT N'Creating [Metadata].[SourceField].[DATA_TYPE].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'nvarchar, decimal, int', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'DATA_TYPE';


GO
PRINT N'Creating [Metadata].[SourceField].[DATA_TYPE].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'-- See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns --', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'DATA_TYPE';


GO
PRINT N'Creating [Metadata].[SourceField].[CHARACTER_MAXIMUM_LENGTH].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'10', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'CHARACTER_MAXIMUM_LENGTH';


GO
PRINT N'Creating [Metadata].[SourceField].[CHARACTER_MAXIMUM_LENGTH].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The maximum length of the current column, if the data type of the column is char, varchar, nchar or nvarchar', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'CHARACTER_MAXIMUM_LENGTH';


GO
PRINT N'Creating [Metadata].[SourceField].[CHARACTER_OCTET_LENGTH].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'20', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'CHARACTER_OCTET_LENGTH';


GO
PRINT N'Creating [Metadata].[SourceField].[CHARACTER_OCTET_LENGTH].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'CHARACTER_OCTET_LENGTH';


GO
PRINT N'Creating [Metadata].[SourceField].[NUMERIC_PRECISION].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'10', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'NUMERIC_PRECISION';


GO
PRINT N'Creating [Metadata].[SourceField].[NUMERIC_PRECISION].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'NUMERIC_PRECISION';


GO
PRINT N'Creating [Metadata].[SourceField].[NUMERIC_PRECISION_RADIX].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'10', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'NUMERIC_PRECISION_RADIX';


GO
PRINT N'Creating [Metadata].[SourceField].[NUMERIC_PRECISION_RADIX].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'NUMERIC_PRECISION_RADIX';


GO
PRINT N'Creating [Metadata].[SourceField].[NUMERIC_SCALE].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'NUMERIC_SCALE';


GO
PRINT N'Creating [Metadata].[SourceField].[NUMERIC_SCALE].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'NUMERIC_SCALE';


GO
PRINT N'Creating [Metadata].[SourceField].[DATETIME_PRECISION].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'3', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'DATETIME_PRECISION';


GO
PRINT N'Creating [Metadata].[SourceField].[DATETIME_PRECISION].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'-- See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns --', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'DATETIME_PRECISION';


GO
PRINT N'Creating [Metadata].[SourceField].[CHARACTER_SET_CATALOG].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'CHARACTER_SET_CATALOG';


GO
PRINT N'Creating [Metadata].[SourceField].[CHARACTER_SET_CATALOG].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'CHARACTER_SET_CATALOG';


GO
PRINT N'Creating [Metadata].[SourceField].[CHARACTER_SET_SCHEMA].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'CHARACTER_SET_SCHEMA';


GO
PRINT N'Creating [Metadata].[SourceField].[CHARACTER_SET_SCHEMA].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'CHARACTER_SET_SCHEMA';


GO
PRINT N'Creating [Metadata].[SourceField].[CHARACTER_SET_NAME].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'UNICODE', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'CHARACTER_SET_NAME';


GO
PRINT N'Creating [Metadata].[SourceField].[CHARACTER_SET_NAME].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'CHARACTER_SET_NAME';


GO
PRINT N'Creating [Metadata].[SourceField].[COLLATION_CATALOG].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'COLLATION_CATALOG';


GO
PRINT N'Creating [Metadata].[SourceField].[COLLATION_CATALOG].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'COLLATION_CATALOG';


GO
PRINT N'Creating [Metadata].[SourceField].[COLLATION_SCHEMA].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'COLLATION_SCHEMA';


GO
PRINT N'Creating [Metadata].[SourceField].[COLLATION_SCHEMA].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'COLLATION_SCHEMA';


GO
PRINT N'Creating [Metadata].[SourceField].[COLLATION_NAME].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'Finnish_Swedish_CI_AS', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'COLLATION_NAME';


GO
PRINT N'Creating [Metadata].[SourceField].[COLLATION_NAME].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'COLLATION_NAME';


GO
PRINT N'Creating [Metadata].[SourceField].[DOMAIN_CATALOG].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'DOMAIN_CATALOG';


GO
PRINT N'Creating [Metadata].[SourceField].[DOMAIN_CATALOG].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'-- See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns --', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'DOMAIN_CATALOG';


GO
PRINT N'Creating [Metadata].[SourceField].[DOMAIN_SCHEMA].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'DOMAIN_SCHEMA';


GO
PRINT N'Creating [Metadata].[SourceField].[DOMAIN_SCHEMA].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'-- See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns --', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'DOMAIN_SCHEMA';


GO
PRINT N'Creating [Metadata].[SourceField].[DOMAIN_NAME].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'DOMAIN_NAME';


GO
PRINT N'Creating [Metadata].[SourceField].[DOMAIN_NAME].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'-- See documentation of this field in Microsofts documentation of INFORMATION_SCHEMA.Columns --', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'DOMAIN_NAME';


GO
PRINT N'Creating [Metadata].[SourceField].[DestinationTableCatalog].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'EDWHistory_BIML', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'DestinationTableCatalog';


GO
PRINT N'Creating [Metadata].[SourceField].[DestinationTableCatalog].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Name of the database where the destination table will be created', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'DestinationTableCatalog';


GO
PRINT N'Creating [Metadata].[SourceField].[TABLE_SERVER].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'GOT, KUN', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'TABLE_SERVER';


GO
PRINT N'Creating [Metadata].[SourceField].[TABLE_SERVER].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'A tag to separate definitions when SourceTableCatalog not is enough to uniquely identify meta data', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'TABLE_SERVER';


GO
PRINT N'Creating [Metadata].[SourceField].[SourceFieldID].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'10001', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'SourceFieldID';


GO
PRINT N'Creating [Metadata].[SourceField].[SourceFieldID].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'System generated identity of the current row', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceField', @level2type = N'COLUMN', @level2name = N'SourceFieldID';


GO
PRINT N'Creating [Metadata].[SourceFile].[SourceTableCatalog].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'EDWHistory, SMNE_DW, ApplLayer', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'SourceTableCatalog';


GO
PRINT N'Creating [Metadata].[SourceFile].[SourceTableCatalog].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Name of the source database.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'SourceTableCatalog';


GO
PRINT N'Creating [Metadata].[SourceFile].[SourceSchemaName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'dbo, AX', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'SourceSchemaName';


GO
PRINT N'Creating [Metadata].[SourceFile].[SourceSchemaName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Name of the source schema.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'SourceSchemaName';


GO
PRINT N'Creating [Metadata].[SourceFile].[SourceTableName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'Account, Customer, rCustomer, hCustomer', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'SourceTableName';


GO
PRINT N'Creating [Metadata].[SourceFile].[SourceTableName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Name of the source table.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'SourceTableName';


GO
PRINT N'Creating [Metadata].[SourceFile].[ColumnNamesInFirstDataRow].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'ColumnNamesInFirstDataRow';


GO
PRINT N'Creating [Metadata].[SourceFile].[ColumnNamesInFirstDataRow].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Flag to indicate if the source file have column names in the first data row', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'ColumnNamesInFirstDataRow';


GO
PRINT N'Creating [Metadata].[SourceFile].[HeaderRowsToSkip].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'3', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'HeaderRowsToSkip';


GO
PRINT N'Creating [Metadata].[SourceFile].[HeaderRowsToSkip].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Number of header rows to skip in the source file', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'HeaderRowsToSkip';


GO
PRINT N'Creating [Metadata].[SourceFile].[DataRowsToSkip].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'1', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'DataRowsToSkip';


GO
PRINT N'Creating [Metadata].[SourceFile].[DataRowsToSkip].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Number of data rows to skip in the source file', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'DataRowsToSkip';


GO
PRINT N'Creating [Metadata].[SourceFile].[FlatFileType].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'FixedWidth, Delimited', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'FlatFileType';


GO
PRINT N'Creating [Metadata].[SourceFile].[FlatFileType].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Type of file of the source file', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'FlatFileType';


GO
PRINT N'Creating [Metadata].[SourceFile].[HeaderRowDelimiter].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'CRLF', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'HeaderRowDelimiter';


GO
PRINT N'Creating [Metadata].[SourceFile].[HeaderRowDelimiter].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Delimiter of the header row in the source file', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'HeaderRowDelimiter';


GO
PRINT N'Creating [Metadata].[SourceFile].[RowDelimiter].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'CRLF', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'RowDelimiter';


GO
PRINT N'Creating [Metadata].[SourceFile].[RowDelimiter].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Delimiter of the data row in the source file', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'RowDelimiter';


GO
PRINT N'Creating [Metadata].[SourceFile].[ColumnDelimiter].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N';, ¤, |', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'ColumnDelimiter';


GO
PRINT N'Creating [Metadata].[SourceFile].[ColumnDelimiter].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The column delimiter in the source file (if type Delimited is used)', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'ColumnDelimiter';


GO
PRINT N'Creating [Metadata].[SourceFile].[TextQualifier].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'TextQualifier';


GO
PRINT N'Creating [Metadata].[SourceFile].[TextQualifier].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'TextQualifier';


GO
PRINT N'Creating [Metadata].[SourceFile].[IsUnicode].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'IsUnicode';


GO
PRINT N'Creating [Metadata].[SourceFile].[IsUnicode].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Flag to indicate if the source file is created in unicode character set', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'SourceFile', @level2type = N'COLUMN', @level2name = N'IsUnicode';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[TableCatalog].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'EDWHistory, EDWRaw', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'TableCatalog';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[TableCatalog].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The name of the database for the table where the key belongs.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'TableCatalog';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[SchemaName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'AX', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'SchemaName';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[SchemaName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The name of the schema for the table where the key belongs.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'SchemaName';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[TableName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'hInventSum, rAssesBook', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'TableName';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[TableName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The name of the table where the key belongs.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'TableName';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[TableKeyName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'NCIDX_Modified_hCustInvoiceJour', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'TableKeyName';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[TableKeyName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The name of the key/index to create', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'TableKeyName';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[COLUMN_NAME].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'ACCOUNTNUM', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'COLUMN_NAME';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[COLUMN_NAME].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Name of the column, that will be used in the definition of the primary key or an index', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'COLUMN_NAME';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[DATA_TYPE].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'nvarchar', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'DATA_TYPE';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[DATA_TYPE].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'The data type for the current column -> The syntax for the data type must match SQL Server 2008 R2 T-SQL syntax.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'DATA_TYPE';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[KeyType].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'PK, NCIDX', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'KeyType';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[KeyType].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Type of key that will be created.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'KeyType';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[KeyColumnOrder].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'1, 2, 3', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'KeyColumnOrder';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[KeyColumnOrder].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Column order in which the primary key will be built.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'KeyColumnOrder';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[IncludedColumn].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'IncludedColumn';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[IncludedColumn].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Flag to indicate if the non-clustred index should be treated as an included column or not', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'IncludedColumn';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[TableKeyDefinitionRowID].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1,2,3', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'TableKeyDefinitionRowID';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[TableKeyDefinitionRowID].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'System generated identity of the current row', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'TableKeyDefinitionRowID';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[IndexStorageLocation].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'[FileGroup_Facts_DW_Clicks]', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'IndexStorageLocation';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[IndexStorageLocation].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Specifies the partition scheme or filegroup on which the table is stored', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'IndexStorageLocation';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[FilterPredicate].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'WHERE StartDate > ''20000101'' AND EndDate <= ''20000630''', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'FilterPredicate';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[FilterPredicate].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Filtered index predicate for which rows to include in the index', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'FilterPredicate';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[IsAscendingOrder].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = N'1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'IsAscendingOrder';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[IsAscendingOrder].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = N'Indicates whether the index attribute shall be sorted in ascending or descending order. 1 means ascending while 0 means descending.', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'IsAscendingOrder';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[IndexIsUnique].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'IndexIsUnique';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[IndexIsUnique].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'Indicator if the current index will be created as an unique index or not', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'IndexIsUnique';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[IndexFillFactor].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '70, 80, 90, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'IndexFillFactor';


GO
PRINT N'Creating [Metadata].[TableKeyDefinition].[IndexFillFactor].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The fill factor (between 0 and 100) that will be used when creating indexes', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'TableKeyDefinition', @level2type = N'COLUMN', @level2name = N'IndexFillFactor';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[Id].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1,2,3', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'Id';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[Id].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'System generated identity of the current row', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'Id';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[StagingEnvironmentName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'DWH_1_Raw', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'StagingEnvironmentName';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[StagingEnvironmentName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The name (the default one) of the database that will be used as staging layer', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'StagingEnvironmentName';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[NormEnvironmentName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'DWH_2_Norm', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'NormEnvironmentName';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[NormEnvironmentName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The name (the default one) of the database that will be used as norm layer', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'NormEnvironmentName';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[MartEnvironmentName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'DWH_3_Fact', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'MartEnvironmentName';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[MartEnvironmentName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The name (the default one) of the database that will be used as mart layer', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'MartEnvironmentName';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultTableCompressionType].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'PAGE, ROW, NONE', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultTableCompressionType';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultTableCompressionType].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The type of compression (the default one) to use when creating tables', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultTableCompressionType';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultSSISIncrementalLoad].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = '1, 0', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultSSISIncrementalLoad';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultSSISIncrementalLoad].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The indicator (the default one) whether the integrations should use incremental load or not', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultSSISIncrementalLoad';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultSSISConfigurationFrameWorkCatalog].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'DWH_0_Admin', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultSSISConfigurationFrameWorkCatalog';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultSSISConfigurationFrameWorkCatalog].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The name (the default one) where the configurations and logging tables/functions/stored procedures resides (in run time)', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultSSISConfigurationFrameWorkCatalog';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultDtsConfigEnvironmentVariableName].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'J_dwautogen_SSISAdminConfig', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultDtsConfigEnvironmentVariableName';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultDtsConfigEnvironmentVariableName].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The name (the default one) of the environment variable that will be used in SSIS packages', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultDtsConfigEnvironmentVariableName';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultNormLayerIndexStorageLocation].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'Norm_Index', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultNormLayerIndexStorageLocation';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultNormLayerIndexStorageLocation].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The name (the default one) of the file group that will be used when creating non clustered indexes in the destination/target table in the norm layer', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultNormLayerIndexStorageLocation';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultNormLayerDataStorageLocation].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'Norm_Data', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultNormLayerDataStorageLocation';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultNormLayerDataStorageLocation].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The name (the default one) of the efile group that will be used when creating the destination/target table in the norm layer', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultNormLayerDataStorageLocation';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultMartLayerIndexStorageLocation].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'Fact_Index', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultMartLayerIndexStorageLocation';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultMartLayerIndexStorageLocation].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The name (the default one) of the file group that will be used when creating non clustered indexes in the destination/target table in the mart layer', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultMartLayerIndexStorageLocation';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultMartLayerDataStorageLocation].[ExampleValue]...';


GO
EXECUTE sp_addextendedproperty @name = N'ExampleValue', @value = 'Fact_Data', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultMartLayerDataStorageLocation';


GO
PRINT N'Creating [Metadata].[EnvironmentVariables].[DefaultMartLayerDataStorageLocation].[ColumnDescription]...';


GO
EXECUTE sp_addextendedproperty @name = N'ColumnDescription', @value = 'The name (the default one) of the efile group that will be used when creating the destination/target table in the mart layer', @level0type = N'SCHEMA', @level0name = N'Metadata', @level1type = N'TABLE', @level1name = N'EnvironmentVariables', @level2type = N'COLUMN', @level2name = N'DefaultMartLayerDataStorageLocation';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/


SELECT id = 1, SQLServer = N'bigint', SSIS = N'DT_I8', Biml = N'Int64', DataTypeGroup = N'Numeric'
INTO #DataTypeTranslation 
UNION ALL SELECT 2, N'binary', N'DT_BYTES', N'Binary', N'Binary'
UNION ALL SELECT 3, N'bit', N'DT_BOOL', N'Boolean', N'Boolean'
UNION ALL SELECT 4, N'char', N'DT_STR', N'AnsiStringFixedLength', N'Text'
UNION ALL SELECT 5, N'date', N'DT_DBDATE', N'Date', N'Date'
UNION ALL SELECT 6, N'datetime', N'DT_DBTIMESTAMP', N'DateTime', N'Date'
UNION ALL SELECT 7, N'datetime2', N'DT_DBTIMESTAMP2', N'DateTime2', N'Date'
UNION ALL SELECT 8, N'datetimeoffset', N'DT_DBTIMESTAMPOFFSET', N'DateTimeOffset', N'Date'
UNION ALL SELECT 9, N'decimal', N'DT_DECIMAL', N'Decimal', N'Numeric'
UNION ALL SELECT 10, N'float', N'DT_R8', N'Double', N'Numeric'
UNION ALL SELECT 11, N'image', N'DT_IMAGE', N'Binary', N'Binary'
UNION ALL SELECT 12, N'int', N'DT_I4', N'Int32', N'Numeric'
UNION ALL SELECT 13, N'money', N'DT_CY', N'Currency', N'Numeric'
UNION ALL SELECT 14, N'nchar', N'DT_WSTR', N'StringFixedLength', N'Text'
UNION ALL SELECT 15, N'ntext', N'DT_NTEXT', N'String', N'Text'
UNION ALL SELECT 16, N'numeric', N'DT_NUMERIC', N'Decimal', N'Numeric'
UNION ALL SELECT 17, N'nvarchar', N'DT_WSTR', N'String', N'Text'
UNION ALL SELECT 18, N'real', N'DT_R4', N'Single', N'Numeric'
UNION ALL SELECT 19, N'smalldatetime', N'DT_DBTIMESTAMP', N'DateTime', N'Date'
UNION ALL SELECT 20, N'smallint', N'DT_I2', N'Int16', N'Numeric'
UNION ALL SELECT 21, N'smallmoney', N'DT_CY', N'Currency', N'Numeric'
UNION ALL SELECT 22, N'sql_variant', N'DT_WSTR', N'Object', N'Object'
UNION ALL SELECT 23, N'text', N'DT_TEXT', N'AnsiString', N'Text'
UNION ALL SELECT 24, N'time', N'DT_DBTIME2', N'Time', N'Date'
UNION ALL SELECT 25, N'tinyint', N'DT_UI1', N'Byte', N'Numeric'
UNION ALL SELECT 26, N'uniqueidentifier', N'DT_GUID', N'Guid', N'Guid'
UNION ALL SELECT 27, N'varbinary', N'DT_BYTES', N'Binary', N'Binary'
UNION ALL SELECT 28, N'varchar', N'DT_STR', N'AnsiString', N'Text'
UNION ALL SELECT 29, N'xml', N'DT_WSTR', N'Xml', N'XML'


SET IDENTITY_INSERT Metadata.DataTypeTranslation ON

INSERT Metadata.DataTypeTranslation (Id, SQLServer, SSIS, Biml, DataTypeGroup)
SELECT dtt.id
       , dtt.SQLServer
       , dtt.SSIS
       , dtt.Biml
       , dtt.DataTypeGroup
FROM   #DataTypeTranslation dtt
WHERE  dtt.id NOT IN (SELECT Id FROM Metadata.DataTypeTranslation)

SET IDENTITY_INSERT Metadata.DataTypeTranslation OFF



SELECT 3 [Id], N'dwInfFK' [DerivedColumnType], N'HistoryRecId' [DerivedColumnName], N'-1' [OverrideValue], N'bigint' [DataType], N'Extended field in Stage. To be populated in DW for missing Foreign Key members' [Comment], NULL [ApplicableTable], NULL [MaxLength]
INTO #DerivedColumnOverride
UNION ALL SELECT 6, N'dwInfFK', N'SourceSystemKey', N'-1', N'int', NULL, NULL, NULL
UNION ALL SELECT 13, N'dwError', N'DateTimeError', N'GETUTCDATE()', N'datetime', NULL, NULL, NULL
UNION ALL SELECT 14, N'dwError', N'DWID', N'@[User::DWID]', N'int', NULL, NULL, NULL
UNION ALL SELECT 15, N'dwError', N'PackageName', N'@[System::PackageName]', N'nvarchar', NULL, NULL, 100
UNION ALL SELECT 16, N'dwError', N'SourceTableName', N'<<DynamicValue>>', N'nvarchar', NULL, NULL, 50
UNION ALL SELECT 17, N'dwError', N'RowData', N'<<DynamicValue>>', N'nvarchar', NULL, NULL, 4000
UNION ALL SELECT 18, N'dwInf', N'SysIsInferred', N'1', NULL, NULL, NULL, NULL
UNION ALL SELECT 19, N'dwInfFK', N'SysSrcGenerationDateTime', N'(DT_DBTIMESTAMP2, 0) ((DT_DBDATE)"1900-01-01")', N'datetime', NULL, NULL, NULL
UNION ALL SELECT 20, N'dwInfFK', N'SysValidFromDateTime', N'(DT_DBTIMESTAMP2,0)(SUBSTRING((DT_WSTR,100)GETUTCDATE(),1,19))', N'datetime', NULL, NULL, NULL
UNION ALL SELECT 21, N'dwInfFK', N'SysDatetimeInsertedUTC', N'(DT_DBTIMESTAMP2,0)(SUBSTRING((DT_WSTR,100)GETUTCDATE(),1,19))', N'datetime', NULL, NULL, NULL
UNION ALL SELECT 22, N'dwInfFK', N'SysModifiedUTC', N'(DT_DBTIMESTAMP2,0)(SUBSTRING((DT_WSTR,100)GETUTCDATE(),1,19))', N'datetime', NULL, NULL, NULL
UNION ALL SELECT 24, N'dwInit', N'SysDateTimeDeletedUTC', N'ISNULL([SysDatetimeDeletedUTC])? [SysDatetimeDeletedUTC] : (DT_DBTIMESTAMP2,0)(SUBSTRING((DT_WSTR,100)GETUTCDATE(),1,19))', N'datetime', NULL, NULL, NULL



SET IDENTITY_INSERT [Metadata].[DerivedColumnOverride] ON 

INSERT INTO Metadata.DerivedColumnOverride
        (Id 
		, DerivedColumnType
        , DerivedColumnName
        , OverrideValue
        , DataType
        , Comment
        , ApplicableTable
        , MaxLength )
SELECT dco.Id
     , dco.DerivedColumnType
     , dco.DerivedColumnName
     , dco.OverrideValue
     , dco.DataType
     , dco.Comment
     , dco.ApplicableTable
     , dco.MaxLength 
FROM #DerivedColumnOverride dco
WHERE dco.Id NOT IN (SELECT dco2.Id FROM Metadata.DerivedColumnOverride dco2)

SET IDENTITY_INSERT [Metadata].[DerivedColumnOverride] OFF


SELECT N'All' AS GroupName
INTO #DestinationTableGroup
UNION SELECT N'Datamart objects'
UNION SELECT N'Dimension'
UNION SELECT N'Fact'

INSERT INTO Metadata.DestinationTableGroup
        ( GroupName )
SELECT dtg.GroupName
FROM #DestinationTableGroup dtg
WHERE dtg.GroupName NOT IN (SELECT dtg2.GroupName FROM Metadata.DestinationTableGroup dtg2)

SELECT Id = 1
       , StagingEnvironmentName = 'DWH_1_Raw'
       , NormEnvironmentName = 'DWH_2_Norm'
       , MartEnvironmentName = 'DWH_3_Fact'
       , DefaultTableCompressionType = 'PAGE'
       , DefaultSSISIncrementalLoad = 1
       , DefaultSSISConfigurationFrameWorkCatalog = N'DWH_0_Admin'
       , DefaultDtsConfigEnvironmentVariableName = N'J_dwautogen_SSISAdminConfig'
       , DefaultNormLayerIndexStorageLocation = N'Norm_Index'
       , DefaultNormLayerDataStorageLocation = N'Norm_Data'
       , DefaultMartLayerIndexStorageLocation = N'Fact_Index'
       , DefaultMartLayerDataStorageLocation = N'Fact_Data'
       , RawEnvironmentName = 'DWH_1_Raw'
       , DefaultRawLayerIndexStorageLocation = 'PRIMARY'
       , DefaultRawLayerDataStorageLocation = 'PRIMARY'
INTO #EnvironmentVariables


SET IDENTITY_INSERT [Metadata].[EnvironmentVariables] ON

INSERT INTO Metadata.EnvironmentVariables
        (id 
		, StagingEnvironmentName
        , NormEnvironmentName
        , MartEnvironmentName
        , DefaultTableCompressionType
        , DefaultSSISIncrementalLoad
        , DefaultSSISConfigurationFrameWorkCatalog
        , DefaultDtsConfigEnvironmentVariableName
        , DefaultNormLayerIndexStorageLocation
        , DefaultNormLayerDataStorageLocation
        , DefaultMartLayerIndexStorageLocation
        , DefaultMartLayerDataStorageLocation
        , RawEnvironmentName
        , DefaultRawLayerIndexStorageLocation
        , DefaultRawLayerDataStorageLocation )
SELECT ev.Id
     , ev.StagingEnvironmentName
     , ev.NormEnvironmentName
     , ev.MartEnvironmentName
     , ev.DefaultTableCompressionType
     , ev.DefaultSSISIncrementalLoad
     , ev.DefaultSSISConfigurationFrameWorkCatalog
     , ev.DefaultDtsConfigEnvironmentVariableName
     , ev.DefaultNormLayerIndexStorageLocation
     , ev.DefaultNormLayerDataStorageLocation
     , ev.DefaultMartLayerIndexStorageLocation
     , ev.DefaultMartLayerDataStorageLocation
     , ev.RawEnvironmentName
     , ev.DefaultRawLayerIndexStorageLocation
     , ev.DefaultRawLayerDataStorageLocation 
FROM #EnvironmentVariables ev
WHERE ev.Id NOT IN (SELECT ev2.Id FROM Metadata.EnvironmentVariables ev2)

SET IDENTITY_INSERT [Metadata].[EnvironmentVariables] OFF


SELECT	null as ID,
        null as [COLUMN_NAME] ,
        null as  [DATA_TYPE] ,
        null as  [CHARACTER_MAXIMUM_LENGTH] ,
        null as  [DATETIME_PRECISION] ,
        null as  [ORDINAL_POSITION] ,
        null as  [NUMERIC_PRECISION] ,
        null as  [NUMERIC_SCALE] ,
        null as  [IS_NULLABLE] ,
        null as  [IncludeInChecksum_src] ,
        null as  [TableColumnSpecification] ,
        null as  [IsIdentity] ,
        null as  [CreateColumnIndex] ,
        null as  [SourceTableCatalog] ,
        null as  [DestinationTableCatalog] ,
        null as  [DestinationSchemaName] ,
        null as  [ApplicableTable] ,
        null as  [SSISDataType] ,
        null as  [SSISDataTypeLength] ,
        null as  [SSISColumnSpecification] ,
        null as  [SetFieldOnInsert] ,
        null as  [SetFieldOnUpdate] ,
        null as  [SetFieldOnDelete] ,
        null as  [GroupName]
INTO #DestinationFieldExtended
UNION ALL SELECT 1, N'SysIsInferred', N'bit', NULL, NULL, 9700, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_2_Norm', N'-', NULL, N'Boolean', NULL, N'0', 1, 1, 0, 'Dimension' 
UNION ALL SELECT 2, N'SysExecutionLog_key', N'int', NULL, NULL, 1003, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_2_Norm', N'-', NULL, N'Int32', NULL, N'@[User::SysExecutionLog_key]', 1, 1, 1, 'All' 
UNION ALL SELECT 3, N'SysDatetimeReprocessedUTC', N'datetime2', NULL, 0, 1007, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, NULL, 0, 0, 0, 'All' 
UNION ALL SELECT 4, N'SysIsInferred', N'bit', NULL, NULL, 9700, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'Boolean', NULL, N'0', 1, 1, 0, 'Dimension' 
UNION ALL SELECT 5, N'SysExecutionLog_key', N'int', NULL, NULL, 1003, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'Int32', NULL, N'@[User::SysExecutionLog_key]', 1, 1, 1, 'All' 
UNION ALL SELECT 6, N'SysDatetimeInsertedUTC', N'datetime2', NULL, 0, 1004, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 1, 0, 0, 'All' 
UNION ALL SELECT 7, N'SysDatetimeUpdatedUTC', N'datetime2', NULL, 0, 1005, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 0, 1, 0, 'All' 
UNION ALL SELECT 8, N'SysDatetimeDeletedUTC', N'datetime2', NULL, 0, 1006, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 0, 0, 1, 'All' 
UNION ALL SELECT 9, N'SysModifiedUTC', N'datetime2', NULL, 0, 9500, NULL, NULL, 'NO', 0, NULL, 0, 1, N'DWH_1_Raw', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 1, 1, 1, 'All' 
UNION ALL SELECT 10, N'SysDatetimeInsertedUTC', N'datetime2', NULL, 0, 1004, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 1, 0, 0, 'All' 
UNION ALL SELECT 11, N'SysDatetimeUpdatedUTC', N'datetime2', NULL, 0, 1005, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 0, 1, 0, 'All' 
UNION ALL SELECT 12, N'SysDatetimeDeletedUTC', N'datetime2', NULL, 0, 1006, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 0, 0, 1, 'All' 
UNION ALL SELECT 13, N'SysModifiedUTC', N'datetime2', NULL, 0, 9500, NULL, NULL, 'NO', 0, NULL, 0, 1, N'DWH_2_Norm', N'DWH_2_Norm', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 1, 1, 1, 'All' 
UNION ALL SELECT 14, N'SysIsInferred', N'bit', NULL, NULL, 9700, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_1_Raw', N'-', NULL, N'Boolean', NULL, N'0', 1, 1, 0, 'Dimension' 
UNION ALL SELECT 15, N'SysExecutionLog_key', N'int', NULL, NULL, 1003, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_1_Raw', N'-', NULL, N'Int32', NULL, N'@[User::SysExecutionLog_key]', 1, 1, 1, 'All' 
UNION ALL SELECT 16, N'SysDatetimeInsertedUTC', N'datetime2', NULL, 0, 1004, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_1_Raw', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 1, 0, 0, 'All' 
UNION ALL SELECT 17, N'SysDatetimeUpdatedUTC', N'datetime2', NULL, 0, 1005, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_1_Raw', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 0, 1, 0, 'All' 
UNION ALL SELECT 18, N'SysDatetimeDeletedUTC', N'datetime2', NULL, 0, 1006, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_1_Raw', N'DWH_1_Raw', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 0, 0, 1, 'All' 
UNION ALL SELECT 19, N'SysModifiedUTC', N'datetime2', NULL, 0, 9500, NULL, NULL, 'NO', 0, NULL, 0, 1, N'DWH_1_Raw', N'DWH_1_Raw', N'-', NULL, N'DateTime', NULL, N'(DT_DBTIMESTAMP2,0)GETUTCDATE()', 1, 1, 1, 'All' 
UNION ALL SELECT 20, N'SysExecutionLog_key', N'int', NULL, NULL, 1003, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_3_Fact', N'-', NULL, N'Int32', NULL, N'@[User::SysExecutionLog_key]', 1, 1, 1, 'All' 
UNION ALL SELECT 21, N'SysDatetimeInsertedUTC', N'datetime2', NULL, 0, 1004, NULL, NULL, 'NO', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_3_Fact', N'-', NULL, N'DateTime', NULL, N'@[User::SysDatetimeInsertedUTC]', 1, 0, 0, 'All' 
UNION ALL SELECT 22, N'SysDatetimeUpdatedUTC', N'datetime2', NULL, 0, 1005, NULL, NULL, 'YES', 0, NULL, 0, 0, N'DWH_2_Norm', N'DWH_3_Fact', N'-', NULL, N'DateTime', NULL, N'@[User::SysDatetimeUpdatedUTC]', 0, 1, 0, 'All' 
UNION ALL SELECT 23, N'SysModifiedUTC', N'datetime2', NULL, 0, 9500, NULL, NULL, 'NO', 0, NULL, 0, 1, N'DWH_2_Norm', N'DWH_3_Fact', N'-', NULL, N'DateTime', NULL, N'@[User::SysModifiedUTC]', 1, 1, 1, 'All' 



SET IDENTITY_INSERT [Metadata].[DestinationFieldExtended] ON  


INSERT INTO Metadata.DestinationFieldExtended
        ( ID
		, COLUMN_NAME
        , DATA_TYPE
        , CHARACTER_MAXIMUM_LENGTH
        , DATETIME_PRECISION
        , ORDINAL_POSITION
        , NUMERIC_PRECISION
        , NUMERIC_SCALE
        , IS_NULLABLE
        , IncludeInChecksum_src
        , TableColumnSpecification
        , IsIdentity
        , CreateColumnIndex
        , SourceTableCatalog
        , DestinationTableCatalog
        , DestinationSchemaName
        , ApplicableTable
        , SSISDataType
        , SSISDataTypeLength
        , SSISColumnSpecification
        , SetFieldOnInsert
        , SetFieldOnUpdate
        , SetFieldOnDelete
        , GroupName )
SELECT dfe.ID
     , dfe.COLUMN_NAME
     , dfe.DATA_TYPE
     , dfe.CHARACTER_MAXIMUM_LENGTH
     , dfe.DATETIME_PRECISION
     , dfe.ORDINAL_POSITION
     , dfe.NUMERIC_PRECISION
     , dfe.NUMERIC_SCALE
     , dfe.IS_NULLABLE
     , dfe.IncludeInChecksum_src
     , dfe.TableColumnSpecification
     , dfe.IsIdentity
     , dfe.CreateColumnIndex
     , dfe.SourceTableCatalog
     , dfe.DestinationTableCatalog
     , dfe.DestinationSchemaName
     , dfe.ApplicableTable
     , dfe.SSISDataType
     , dfe.SSISDataTypeLength
     , dfe.SSISColumnSpecification
     , dfe.SetFieldOnInsert
     , dfe.SetFieldOnUpdate
     , dfe.SetFieldOnDelete
     , dfe.GroupName 
FROM #DestinationFieldExtended dfe
WHERE dfe.ID NOT IN (SELECT ID FROM [Metadata].[DestinationFieldExtended])
AND dfe.ID IS NOT NULL

SET IDENTITY_INSERT [Metadata].[DestinationFieldExtended] OFF



GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
